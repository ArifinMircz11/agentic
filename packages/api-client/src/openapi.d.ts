/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            status: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a user */
        get: operations["getUser"];
        put?: never;
        /** @description Updates a user */
        post: operations["updateUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lists all teams the authenticated user belongs to. */
        get: operations["listTeams"];
        put?: never;
        /** @description Creates a team. */
        post: operations["createTeam"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/teams/{teamId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a team by slug. */
        get: operations["getTeam"];
        put?: never;
        /** @description Updates a team. */
        post: operations["updateTeam"];
        /** @description Deletes a team by slug. */
        delete: operations["deleteTeam"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/teams/{teamId}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Creates a team member. */
        post: operations["createTeamMember"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/teams/{teamId}/members/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Updates a team member. */
        post: operations["updateTeamMember"];
        /** @description Deletes a team member. */
        delete: operations["deleteTeamMember"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lists projects the authenticated user has access to. */
        get: operations["listProjects"];
        put?: never;
        /** @description Creates a new project. */
        post: operations["createProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a project */
        get: operations["getProject"];
        put?: never;
        /** @description Updates a project. */
        post: operations["updateProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/consumers/{consumerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a consumer */
        get: operations["getConsumer"];
        put?: never;
        /** @description Updates a consumer's subscription to a different deployment or pricing plan. Set `plan` to undefined to cancel the subscription. */
        post: operations["updateConsumer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/consumers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Creates a new consumer by subscribing a customer to a project. */
        post: operations["createConsumer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/consumers/{consumerId}/refresh-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Refreshes a consumer's API token. */
        post: operations["refreshConsumerToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{projectId}/consumers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lists all of the customers for a project. */
        get: operations["listConsumers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/deployments/{deploymentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a deployment */
        get: operations["getDeployment"];
        put?: never;
        /** @description Updates a deployment. */
        post: operations["updateDeployment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/deployments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lists deployments the user or team has access to. */
        get: operations["listDeployments"];
        put?: never;
        /** @description Creates a new deployment within a project. */
        post: operations["createDeployment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/deployments/{deploymentId}/publish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Publishes a deployment. */
        post: operations["publishDeployment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admin/consumers/tokens/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a consumer by API token */
        get: operations["adminGetConsumerByToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        User: {
            id: string;
            createdAt: string | null;
            updatedAt: string | null;
            name: string;
            email: string;
            emailVerified: boolean;
            image?: string;
            username?: string;
            /** @enum {string} */
            role: "user" | "admin";
            isStripeConnectEnabledByDefault: boolean;
            stripeCustomerId?: string;
        };
        Team: {
            id: string;
            createdAt: string;
            updatedAt: string;
            deletedAt?: string;
            slug: string;
            name: string;
            ownerId: string;
        };
        TeamMember: {
            createdAt: string;
            updatedAt: string;
            deletedAt?: string;
            userId: string;
            teamSlug: string;
            teamId: string;
            /** @enum {string} */
            role: "user" | "admin";
            confirmed: boolean;
            confirmedAt?: string;
        };
        ProjectIdentifier: string;
        /** @description The frequency at which a subscription is billed. */
        PricingInterval: "day" | "week" | "month" | "year";
        Project: {
            /** @description Project id (e.g. "proj_tz4a98xxat96iws9zmbrgj3a") */
            id: string;
            createdAt: string;
            updatedAt: string;
            deletedAt?: string;
            identifier: components["schemas"]["ProjectIdentifier"];
            name: string;
            alias?: string;
            /** @description User id (e.g. "user_tz4a98xxat96iws9zmbrgj3a") */
            userId: string;
            /** @description Team id (e.g. "team_tz4a98xxat96iws9zmbrgj3a") */
            teamId?: string;
            /** @description Deployment id (e.g. "depl_tz4a98xxat96iws9zmbrgj3a") */
            lastPublishedDeploymentId?: string;
            /** @description Deployment id (e.g. "depl_tz4a98xxat96iws9zmbrgj3a") */
            lastDeploymentId?: string;
            applicationFeePercent: number;
            isStripeConnectEnabled: boolean;
            pricingIntervals: components["schemas"]["PricingInterval"][];
            defaultPricingInterval: components["schemas"]["PricingInterval"];
            /** @enum {string} */
            pricingCurrency: "usd";
        };
        Consumer: {
            /** @description Consumer id (e.g. "csmr_tz4a98xxat96iws9zmbrgj3a") */
            id: string;
            createdAt: string;
            updatedAt: string;
            deletedAt?: string;
            token: string;
            plan?: string;
            activated: boolean;
            source?: string;
            /** @description User id (e.g. "user_tz4a98xxat96iws9zmbrgj3a") */
            userId: string;
            /** @description Project id (e.g. "proj_tz4a98xxat96iws9zmbrgj3a") */
            projectId: string;
            /** @description Deployment id (e.g. "depl_tz4a98xxat96iws9zmbrgj3a") */
            deploymentId: string;
            stripeStatus?: string;
            isStripeSubscriptionActive: boolean;
        };
        DeploymentIdentifier: string;
        /** @description Deployment origin API adapter is used to configure the origin API server downstream from Agentic's API gateway. It specifies whether the origin API server denoted by `originUrl` is hosted externally or deployed internally to Agentic's infrastructure. It also specifies the format for how origin tools / services are defined: either as an OpenAPI spec, an MCP server, or as a raw HTTP REST API.
         *
         *     NOTE: Agentic currently only supports `external` API servers. If you'd like to host your API or MCP server on Agentic's infrastructure, please reach out to support@agentic.so. */
        DeploymentOriginAdapter: {
            /** @enum {string} */
            type: "openapi";
            /** @description JSON stringified OpenAPI spec describing the origin API server. */
            spec: string;
            /** @enum {string} */
            location: "external";
        } | {
            /** @enum {string} */
            type: "raw";
            /** @enum {string} */
            location: "external";
        };
        /** @example Starter Monthly */
        name: string;
        /**
         * @description PricingPlan slug ("free", "starter-monthly", "pro-annual", etc)
         * @example starter-monthly
         */
        slug: string;
        /** @example API calls */
        label: string;
        RateLimit: {
            interval: number;
            maxPerInterval: number;
        };
        PricingPlanTier: {
            unitAmount?: number;
            flatAmount?: number;
            upTo: number | "inf";
        };
        /** @description PricingPlanLineItems represent a single line-item in a Stripe Subscription. They map to a Stripe billing `Price` and possibly a corresponding Stripe `Meter` for metered usage. */
        PricingPlanLineItem: {
            slug: string | "base" | "requests";
            interval?: components["schemas"]["PricingInterval"];
            label?: components["schemas"]["label"];
            /** @enum {string} */
            usageType: "licensed";
            amount: number;
        } | {
            slug: string | "base" | "requests";
            interval?: components["schemas"]["PricingInterval"];
            label?: components["schemas"]["label"];
            /** @enum {string} */
            usageType: "metered";
            unitLabel?: string;
            rateLimit?: components["schemas"]["RateLimit"];
            billingScheme: "per_unit" | "tiered";
            unitAmount?: number;
            tiersMode?: "graduated" | "volume";
            tiers?: components["schemas"]["PricingPlanTier"][];
            defaultAggregation?: {
                /** @default sum */
                formula: "sum" | "count" | "last";
            };
            transformQuantity?: {
                divideBy: number;
                round: "down" | "up";
            };
        };
        /** @description Represents the config for a Stripe subscription with one or more PricingPlanLineItems. */
        PricingPlan: {
            name: components["schemas"]["name"];
            slug: components["schemas"]["slug"];
            interval?: components["schemas"]["PricingInterval"];
            desc?: string;
            features: string[];
            trialPeriodDays?: number;
            lineItems: components["schemas"]["PricingPlanLineItem"][];
        };
        Deployment: {
            /** @description Deployment id (e.g. "depl_tz4a98xxat96iws9zmbrgj3a") */
            id: string;
            createdAt: string;
            updatedAt: string;
            deletedAt?: string;
            identifier: components["schemas"]["DeploymentIdentifier"];
            hash: string;
            version?: string;
            published: boolean;
            description: string;
            readme: string;
            iconUrl?: string;
            /** @description User id (e.g. "user_tz4a98xxat96iws9zmbrgj3a") */
            userId: string;
            /** @description Team id (e.g. "team_tz4a98xxat96iws9zmbrgj3a") */
            teamId?: string;
            /** @description Project id (e.g. "proj_tz4a98xxat96iws9zmbrgj3a") */
            projectId: string;
            originAdapter: components["schemas"]["DeploymentOriginAdapter"];
            /** @description List of PricingPlans */
            pricingPlans: components["schemas"]["PricingPlan"][];
        };
    };
    responses: {
        /** @description Bad Request */
        400: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    error: string;
                };
            };
        };
        /** @description Unauthorized */
        401: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    error: string;
                };
            };
        };
        /** @description Forbidden */
        403: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    error: string;
                };
            };
        };
        /** @description Not Found */
        404: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    error: string;
                };
            };
        };
        /** @description Conflict */
        409: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    error: string;
                };
            };
        };
        /** @description Gone */
        410: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    error: string;
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A user object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                userId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name?: string;
                    image?: string;
                    isStripeConnectEnabledByDefault?: boolean;
                };
            };
        };
        responses: {
            /** @description A user object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    listTeams: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
                sort?: "asc" | "desc";
                sortBy?: "createdAt" | "updatedAt";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of teams */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"][];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
        };
    };
    createTeam: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    deletedAt?: string;
                    slug: string;
                    name: string;
                };
            };
        };
        responses: {
            /** @description The created team */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
        };
    };
    getTeam: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team ID */
                teamId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A team object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    updateTeam: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team ID */
                teamId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name?: string;
                    /** @description User id (e.g. "user_tz4a98xxat96iws9zmbrgj3a") */
                    ownerId: string;
                };
            };
        };
        responses: {
            /** @description The updated team */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    deleteTeam: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team ID */
                teamId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The team that was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    createTeamMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team ID */
                teamId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description User id (e.g. "user_tz4a98xxat96iws9zmbrgj3a") */
                    userId: string;
                    /** @enum {string} */
                    role?: "user" | "admin";
                };
            };
        };
        responses: {
            /** @description The created team member */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamMember"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
        };
    };
    updateTeamMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team ID */
                teamId: string;
                /** @description Team member user ID */
                userId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    role?: "user" | "admin";
                };
            };
        };
        responses: {
            /** @description The updated team member */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamMember"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    deleteTeamMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team ID */
                teamId: string;
                /** @description Team member user ID */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The deleted team member */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamMember"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    listProjects: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
                sort?: "asc" | "desc";
                sortBy?: "createdAt" | "updatedAt";
                populate?: ("user" | "team" | "lastPublishedDeployment" | "lastDeployment")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of projects */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"][];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
        };
    };
    createProject: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                };
            };
        };
        responses: {
            /** @description The created project */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
        };
    };
    getProject: {
        parameters: {
            query?: {
                populate?: ("user" | "team" | "lastPublishedDeployment" | "lastDeployment")[];
            };
            header?: never;
            path: {
                /** @description Project ID */
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A project */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    updateProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ID */
                projectId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name?: string;
                    alias?: string;
                };
            };
        };
        responses: {
            /** @description The updated project */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    getConsumer: {
        parameters: {
            query?: {
                populate?: ("user" | "project" | "deployment")[];
            };
            header?: never;
            path: {
                /** @description Consumer ID */
                consumerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A consumer object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Consumer"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    updateConsumer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Consumer ID */
                consumerId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    plan?: string;
                    /** @description Deployment id (e.g. "depl_tz4a98xxat96iws9zmbrgj3a") */
                    deploymentId?: string;
                };
            };
        };
        responses: {
            /** @description A consumer object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Consumer"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            410: components["responses"]["410"];
        };
    };
    createConsumer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    plan: string;
                    source?: string;
                    /** @description Deployment id (e.g. "depl_tz4a98xxat96iws9zmbrgj3a") */
                    deploymentId?: string;
                };
            };
        };
        responses: {
            /** @description A consumer object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Consumer"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            410: components["responses"]["410"];
        };
    };
    refreshConsumerToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Consumer ID */
                consumerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A consumer object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Consumer"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    listConsumers: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
                sort?: "asc" | "desc";
                sortBy?: "createdAt" | "updatedAt";
                populate?: ("user" | "project" | "deployment")[];
            };
            header?: never;
            path: {
                /** @description Project ID */
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of consumers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Consumer"][];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    getDeployment: {
        parameters: {
            query?: {
                populate?: ("user" | "team" | "project")[];
            };
            header?: never;
            path: {
                /** @description deployment ID */
                deploymentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A deployment object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deployment"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    updateDeployment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description deployment ID */
                deploymentId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    deletedAt?: string;
                    description?: string;
                };
            };
        };
        responses: {
            /** @description A deployment object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deployment"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    listDeployments: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
                sort?: "asc" | "desc";
                sortBy?: "createdAt" | "updatedAt";
                populate?: ("user" | "team" | "project")[];
                /** @description Project id (e.g. "proj_tz4a98xxat96iws9zmbrgj3a") */
                projectId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of deployments */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deployment"][];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
        };
    };
    createDeployment: {
        parameters: {
            query?: {
                publish?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    deletedAt?: string;
                    identifier: string;
                    version?: string;
                    published?: boolean;
                    description?: string;
                    readme?: string;
                    /**
                     * Format: uri
                     * @description Logo image URL to use for this delpoyment. Logos should have a square aspect ratio.
                     */
                    iconUrl?: string;
                    /** @description Project id (e.g. "proj_tz4a98xxat96iws9zmbrgj3a") */
                    projectId: string;
                    /**
                     * Format: uri
                     * @description Base URL of the externally hosted origin API server.
                     *
                     *     NOTE: Agentic currently only supports `external` API servers. If you'd like to host your API or MCP server on Agentic's infrastructure, please reach out to support@agentic.so.
                     */
                    originUrl: string;
                    originAdapter?: components["schemas"]["DeploymentOriginAdapter"] & unknown;
                    /** @description List of PricingPlans should be available as subscriptions for this deployment. */
                    pricingPlans: components["schemas"]["PricingPlan"][];
                };
            };
        };
        responses: {
            /** @description A deployment object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deployment"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
        };
    };
    publishDeployment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description deployment ID */
                deploymentId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    version: string;
                };
            };
        };
        responses: {
            /** @description A deployment object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deployment"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    adminGetConsumerByToken: {
        parameters: {
            query?: {
                populate?: ("user" | "project" | "deployment")[];
            };
            header?: never;
            path: {
                /** @description Consumer token */
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A consumer object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Consumer"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
}
