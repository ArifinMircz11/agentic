/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Health check endpoint. */
        get: operations["healthCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a user by ID. */
        get: operations["getUser"];
        put?: never;
        /** @description Updates a user by ID. */
        post: operations["updateUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lists all teams the authenticated user belongs to. */
        get: operations["listTeams"];
        put?: never;
        /** @description Creates a new team. */
        post: operations["createTeam"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/teams/{teamId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a team by ID. */
        get: operations["getTeam"];
        put?: never;
        /** @description Updates a team. */
        post: operations["updateTeam"];
        /** @description Deletes a team by ID. */
        delete: operations["deleteTeam"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/teams/{teamId}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Creates a new team member. */
        post: operations["createTeamMember"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/teams/{teamId}/members/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Updates a team member. */
        post: operations["updateTeamMember"];
        /** @description Deletes a team member. */
        delete: operations["deleteTeamMember"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lists projects the authenticated user has access to. */
        get: operations["listProjects"];
        put?: never;
        /** @description Creates a new project. */
        post: operations["createProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/by-identifier": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a project by its public identifier (eg, "@username/project-name"). */
        get: operations["getProjectByIdentifier"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a project by ID. */
        get: operations["getProject"];
        put?: never;
        /** @description Updates a project. */
        post: operations["updateProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/consumers/{consumerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a consumer by ID. */
        get: operations["getConsumer"];
        put?: never;
        /** @description Updates a consumer's subscription to a different deployment or pricing plan. Set `plan` to undefined to cancel the subscription. */
        post: operations["updateConsumer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/consumers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Creates a new consumer by subscribing a customer to a project. */
        post: operations["createConsumer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/consumers/{consumerId}/refresh-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Refreshes a consumer's API token. */
        post: operations["refreshConsumerToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{projectId}/consumers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lists all of the customers for a project. */
        get: operations["listConsumers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/deployments/by-identifier": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a deployment by its public identifier */
        get: operations["getDeploymentByIdentifier"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/deployments/{deploymentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a deployment by its ID */
        get: operations["getDeployment"];
        put?: never;
        /** @description Updates a deployment. */
        post: operations["updateDeployment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/deployments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lists deployments the user or team has access to, optionally filtering by project. */
        get: operations["listDeployments"];
        put?: never;
        /** @description Creates a new deployment within a project. */
        post: operations["createDeployment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/deployments/{deploymentId}/publish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Publishes a deployment. */
        post: operations["publishDeployment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admin/consumers/tokens/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a consumer by API token. This route is admin-only. */
        get: operations["adminGetConsumerByToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admin/consumers/{consumerId}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Activates a consumer signifying that at least one API call has been made using the consumer's API token. This method is idempotent and admin-only. */
        put: operations["adminActivateConsumer"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admin/deployments/by-identifier": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a deployment by its public identifier. This route is admin-only. */
        get: operations["adminGetDeploymentByIdentifier"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        User: {
            id: string;
            createdAt: string;
            updatedAt: string;
            deletedAt?: string;
            username: string;
            /** @enum {string} */
            role: "user" | "admin";
            name?: string;
            email: string;
            isEmailVerified: boolean;
            image?: string;
            stripeCustomerId?: string;
        };
        Team: {
            id: string;
            createdAt: string;
            updatedAt: string;
            deletedAt?: string;
            slug: string;
            name: string;
            ownerId: string;
        };
        TeamMember: {
            createdAt: string;
            updatedAt: string;
            deletedAt?: string;
            userId: string;
            teamSlug: string;
            teamId: string;
            /** @enum {string} */
            role: "user" | "admin";
            confirmed: boolean;
            confirmedAt?: string;
        };
        /** @description Public project identifier (e.g. "@namespace/project-name") */
        ProjectIdentifier: string;
        /** @description The frequency at which a subscription is billed. */
        PricingInterval: "day" | "week" | "month" | "year";
        /** @description A Project represents a single Agentic API product. A Project is comprised of a series of immutable Deployments, each of which contains pricing data, origin API config, OpenAPI or MCP specs, tool definitions, and various metadata.
         *
         *     You can think of Agentic Projects as similar to Vercel projects. They both hold some common configuration and are comprised of a series of immutable Deployments.
         *
         *     Internally, Projects manage all of the Stripe billing resources across Deployments (Stripe Products, Prices, and Meters for usage-based billing). */
        Project: {
            /** @description Project id (e.g. "proj_tz4a98xxat96iws9zmbrgj3a") */
            id: string;
            createdAt: string;
            updatedAt: string;
            deletedAt?: string;
            identifier: components["schemas"]["ProjectIdentifier"];
            name: string;
            alias?: string;
            /** @description User id (e.g. "user_tz4a98xxat96iws9zmbrgj3a") */
            userId: string;
            /** @description Team id (e.g. "team_tz4a98xxat96iws9zmbrgj3a") */
            teamId?: string;
            /** @description Deployment id (e.g. "depl_tz4a98xxat96iws9zmbrgj3a") */
            lastPublishedDeploymentId?: string;
            /** @description Deployment id (e.g. "depl_tz4a98xxat96iws9zmbrgj3a") */
            lastDeploymentId?: string;
            lastPublishedDeploymentVersion?: string;
            applicationFeePercent: number;
            defaultPricingInterval: components["schemas"]["PricingInterval"];
            /** @enum {string} */
            pricingCurrency: "usd";
        };
        /** @description A Consumer represents a user who has subscribed to a Project and is used
         *     to track usage and billing.
         *
         *     Consumers are linked to a corresponding Stripe Customer and Subscription.
         *     The Stripe customer will either be the user's default Stripe Customer if the
         *     project uses the default Agentic platform account, or a customer on the project
         *     owner's connected Stripe account if the project has Stripe Connect enabled. */
        Consumer: {
            /** @description Consumer id (e.g. "csmr_tz4a98xxat96iws9zmbrgj3a") */
            id: string;
            createdAt: string;
            updatedAt: string;
            deletedAt?: string;
            token: string;
            plan?: string;
            activated: boolean;
            source?: string;
            /** @description User id (e.g. "user_tz4a98xxat96iws9zmbrgj3a") */
            userId: string;
            /** @description Project id (e.g. "proj_tz4a98xxat96iws9zmbrgj3a") */
            projectId: string;
            /** @description Deployment id (e.g. "depl_tz4a98xxat96iws9zmbrgj3a") */
            deploymentId: string;
            stripeStatus: string;
            isStripeSubscriptionActive: boolean;
        };
        /** @description Public deployment identifier (e.g. "@namespace/project-name@{hash|version|latest}") */
        DeploymentIdentifier: string;
        JsonSchemaObject: {
            /** @enum {string} */
            type: "object";
            properties?: {
                [key: string]: unknown;
            };
            required?: string[];
        };
        Tool: {
            /** @description Agentic tool name */
            name: string;
            description?: string;
            inputSchema: components["schemas"]["JsonSchemaObject"];
            outputSchema?: components["schemas"]["JsonSchemaObject"];
            annotations?: {
                title?: string;
                readOnlyHint?: boolean;
                destructiveHint?: boolean;
                idempotentHint?: boolean;
                openWorldHint?: boolean;
            };
        };
        RateLimit: {
            /** @description The interval at which the rate limit is applied. Either a positive integer expressed in seconds or a valid positive [ms](https://github.com/vercel/ms) string (eg, "10s", "1m", "8h", "2d", "1w", "1y", etc). */
            interval: number | string;
            /** @description Maximum number of operations per interval (unitless). */
            maxPerInterval: number;
            /**
             * @description Whether to enforce the rate limit synchronously or asynchronously.
             * @default true
             */
            async: boolean;
        };
        PricingPlanToolOverride: {
            enabled?: boolean;
            reportUsage?: boolean;
            rateLimit?: components["schemas"]["RateLimit"] | null;
        };
        ToolConfig: {
            /** @description Agentic tool name */
            name: string;
            /** @default true */
            enabled: boolean;
            /** @default false */
            pure: boolean;
            cacheControl?: string;
            /** @default true */
            reportUsage: boolean;
            rateLimit?: components["schemas"]["RateLimit"] | null;
            /** @description Allows you to override this tool's behavior or disable it entirely for different pricing plans. This is a map of PricingPlan slug to PricingPlanToolOverrides for that plan. */
            pricingPlanOverridesMap?: {
                [key: string]: components["schemas"]["PricingPlanToolOverride"];
            };
        };
        /** @description Origin adapter is used to configure the origin API server downstream from Agentic's API gateway. It specifies whether the origin API server denoted by `originUrl` is hosted externally or deployed internally to Agentic's infrastructure. It also specifies the format for how origin tools are defined: either an OpenAPI spec, an MCP server, or a raw HTTP REST API. */
        OriginAdapter: {
            /**
             * @default external
             * @enum {string}
             */
            location: "external";
            /** @enum {string} */
            type: "openapi";
            /** @description JSON stringified OpenAPI spec describing the origin API server. */
            spec: string;
            /** @description Mapping from tool name to OpenAPI Operation info. This is used by the Agentic API gateway to route tools to the correct origin API operation, along with the HTTP method, path, params, etc. */
            toolToOperationMap: {
                [key: string]: {
                    /** @description OpenAPI operationId for the tool */
                    operationId: string;
                    /** @description HTTP method */
                    method: "get" | "put" | "post" | "delete" | "patch" | "trace";
                    /** @description HTTP path template */
                    path: string;
                    /** @description Mapping from parameter name to HTTP source (query, path, JSON body, etc). */
                    parameterSources: {
                        [key: string]: "query" | "header" | "path" | "cookie" | "body" | "formData";
                    };
                    tags?: string[];
                };
            };
        } | {
            /**
             * @default external
             * @enum {string}
             */
            location: "external";
            /** @enum {string} */
            type: "mcp";
            serverInfo: {
                name: string;
                version: string;
                capabilities?: {
                    experimental?: Record<string, never>;
                    logging?: Record<string, never>;
                    completions?: Record<string, never>;
                    prompts?: {
                        listChanged?: boolean;
                    };
                    resources?: {
                        subscribe?: boolean;
                        listChanged?: boolean;
                    };
                    tools?: {
                        listChanged?: boolean;
                    };
                };
                instructions?: string;
            };
        } | {
            /**
             * @default external
             * @enum {string}
             */
            location: "external";
            /** @enum {string} */
            type: "raw";
        };
        /**
         * @description Human-readable name for the pricing plan (eg, "Free", "Starter Monthly", "Pro Annual", etc)
         * @example Starter Monthly
         */
        name: string;
        /**
         * @description PricingPlan slug (eg, "free", "starter-monthly", "pro-annual", etc). Should be lower-cased and kebab-cased. Should be stable across deployments.
         * @example starter-monthly
         */
        slug: string;
        /** @example API calls */
        label: string;
        PricingPlanTier: {
            unitAmount?: number;
            flatAmount?: number;
            upTo: number | "inf";
        };
        /** @description PricingPlanLineItems represent a single line-item in a Stripe Subscription. They map to a Stripe billing `Price` and possibly a corresponding Stripe `Meter` for usage-based line-items. */
        PricingPlanLineItem: {
            slug: string;
            label?: components["schemas"]["label"];
            /** @enum {string} */
            usageType: "licensed";
            amount: number;
        } | {
            slug: string;
            label?: components["schemas"]["label"];
            /** @enum {string} */
            usageType: "metered";
            unitLabel?: string;
            rateLimit?: components["schemas"]["RateLimit"];
            billingScheme: "per_unit" | "tiered";
            unitAmount?: number;
            tiersMode?: "graduated" | "volume";
            tiers?: components["schemas"]["PricingPlanTier"][];
            defaultAggregation?: {
                /** @default sum */
                formula: "sum" | "count" | "last";
            };
            transformQuantity?: {
                divideBy: number;
                round: "down" | "up";
            };
        };
        /** @description Represents the config for a Stripe subscription with one or more PricingPlanLineItems. */
        PricingPlan: {
            name: components["schemas"]["name"];
            slug: components["schemas"]["slug"];
            interval?: components["schemas"]["PricingInterval"];
            description?: string;
            features?: string[];
            trialPeriodDays?: number;
            lineItems: components["schemas"]["PricingPlanLineItem"][];
        };
        /** @description A Deployment is a single, immutable instance of a Project. Each deployment contains pricing plans, origin server config (OpenAPI or MCP server), tool definitions, and metadata.
         *
         *     Deployments are private to a developer or team until they are published, at which point they are accessible to any customers with access to the parent Project. */
        Deployment: {
            /** @description Deployment id (e.g. "depl_tz4a98xxat96iws9zmbrgj3a") */
            id: string;
            createdAt: string;
            updatedAt: string;
            deletedAt?: string;
            identifier: components["schemas"]["DeploymentIdentifier"];
            hash: string;
            /** @description Optional semantic version of the project as a semver string. Ex: 1.0.0, 0.0.1, 5.0.1, etc. */
            version?: string;
            published: boolean;
            /** @description A short description of the project. */
            description?: string;
            /** @description A readme documenting the project (supports GitHub-flavored markdown). */
            readme?: string;
            /**
             * Format: uri
             * @description Optional logo image URL to use for the project. Logos should have a square aspect ratio.
             */
            iconUrl?: string;
            /**
             * Format: uri
             * @description Optional URL to the source code of the project (eg, GitHub repo).
             */
            sourceUrl?: string;
            /** @description User id (e.g. "user_tz4a98xxat96iws9zmbrgj3a") */
            userId: string;
            /** @description Team id (e.g. "team_tz4a98xxat96iws9zmbrgj3a") */
            teamId?: string;
            /** @description Project id (e.g. "proj_tz4a98xxat96iws9zmbrgj3a") */
            projectId: string;
            /** @default [] */
            tools: components["schemas"]["Tool"][];
            /** @default [] */
            toolConfigs: components["schemas"]["ToolConfig"][];
            originAdapter: components["schemas"]["OriginAdapter"];
            /**
             * @description List of PricingPlans configuring which Stripe subscriptions should be available for the project. Defaults to a single free plan which is useful for developing and testing your project.
             * @default [
             *       {
             *         "name": "Free",
             *         "slug": "free",
             *         "lineItems": [
             *           {
             *             "slug": "base",
             *             "usageType": "licensed",
             *             "amount": 0
             *           }
             *         ]
             *       }
             *     ]
             */
            pricingPlans: components["schemas"]["PricingPlan"][];
            /**
             * @description Optional list of billing intervals to enable in the pricingPlans.
             *
             *     Defaults to a single monthly interval `['month']`.
             *
             *     To add support for annual pricing plans, for example, you can use: `['month', 'year']`.
             * @default [
             *       "month"
             *     ]
             */
            pricingIntervals: components["schemas"]["PricingInterval"][];
            project?: components["schemas"]["Project"];
        };
        /**
         * @description Origin adapter is used to configure the origin API server downstream from Agentic's API gateway. It specifies whether the origin API server denoted by `originUrl` is hosted externally or deployed internally to Agentic's infrastructure. It also specifies the format for how origin tools are defined: either an OpenAPI spec, an MCP server, or a raw HTTP REST API.
         *
         *     NOTE: Agentic currently only supports `external` API servers. If you'd like to host your API or MCP server on Agentic's infrastructure, please reach out to support@agentic.so.
         * @default {
         *       "location": "external",
         *       "type": "raw"
         *     }
         */
        OriginAdapterConfig: {
            /**
             * @default external
             * @enum {string}
             */
            location: "external";
            /** @enum {string} */
            type: "openapi";
            /** @description Local file path, URL, or JSON stringified OpenAPI spec describing the origin API server. */
            spec: string;
        } | {
            /**
             * @default external
             * @enum {string}
             */
            location: "external";
            /** @enum {string} */
            type: "mcp";
        } | {
            /**
             * @default external
             * @enum {string}
             */
            location: "external";
            /** @enum {string} */
            type: "raw";
        };
        /** @description A Consumer represents a user who has subscribed to a Project and is used
         *     to track usage and billing.
         *
         *     Consumers are linked to a corresponding Stripe Customer and Subscription.
         *     The Stripe customer will either be the user's default Stripe Customer if the
         *     project uses the default Agentic platform account, or a customer on the project
         *     owner's connected Stripe account if the project has Stripe Connect enabled. */
        AdminConsumer: components["schemas"]["Consumer"] & {
            _stripeCustomerId: string;
        };
        /** @description A Deployment is a single, immutable instance of a Project. Each deployment contains pricing plans, origin server config (OpenAPI or MCP server), tool definitions, and metadata.
         *
         *     Deployments are private to a developer or team until they are published, at which point they are accessible to any customers with access to the parent Project. */
        AdminDeployment: components["schemas"]["Deployment"] & {
            /**
             * Format: uri
             * @description Required base URL of the externally hosted origin API server. Must be a valid `https` URL.
             *
             *     NOTE: Agentic currently only supports `external` API servers. If you'd like to host your API or MCP server on Agentic's infrastructure, please reach out to support@agentic.so.
             */
            originUrl: string;
            _secret: string;
        };
    };
    responses: {
        /** @description Bad Request */
        400: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    error: string;
                    requestId: string;
                };
            };
        };
        /** @description Unauthorized */
        401: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    error: string;
                    requestId: string;
                };
            };
        };
        /** @description Forbidden */
        403: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    error: string;
                    requestId: string;
                };
            };
        };
        /** @description Not Found */
        404: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    error: string;
                    requestId: string;
                };
            };
        };
        /** @description Conflict */
        409: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    error: string;
                    requestId: string;
                };
            };
        };
        /** @description Gone */
        410: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    error: string;
                    requestId: string;
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    healthCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: string;
                    };
                };
            };
        };
    };
    getUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A user object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                userId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name?: string;
                    image?: string;
                };
            };
        };
        responses: {
            /** @description A user object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    listTeams: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
                sort?: "asc" | "desc";
                sortBy?: "createdAt" | "updatedAt";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of teams */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"][];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
        };
    };
    createTeam: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    deletedAt?: string;
                    slug: string;
                    name: string;
                };
            };
        };
        responses: {
            /** @description The created team */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
        };
    };
    getTeam: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team ID */
                teamId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A team object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    updateTeam: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team ID */
                teamId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name?: string;
                    /** @description User id (e.g. "user_tz4a98xxat96iws9zmbrgj3a") */
                    ownerId: string;
                };
            };
        };
        responses: {
            /** @description The updated team */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    deleteTeam: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team ID */
                teamId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The team that was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    createTeamMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team ID */
                teamId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description User id (e.g. "user_tz4a98xxat96iws9zmbrgj3a") */
                    userId: string;
                    /** @enum {string} */
                    role?: "user" | "admin";
                };
            };
        };
        responses: {
            /** @description The created team member */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamMember"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
        };
    };
    updateTeamMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team ID */
                teamId: string;
                /** @description Team member user ID */
                userId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    role?: "user" | "admin";
                };
            };
        };
        responses: {
            /** @description The updated team member */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamMember"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    deleteTeamMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team ID */
                teamId: string;
                /** @description Team member user ID */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The deleted team member */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamMember"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    listProjects: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
                sort?: "asc" | "desc";
                sortBy?: "createdAt" | "updatedAt";
                populate?: ("user" | "team" | "lastPublishedDeployment" | "lastDeployment") | ("user" | "team" | "lastPublishedDeployment" | "lastDeployment")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of projects */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"][];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
        };
    };
    createProject: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                };
            };
        };
        responses: {
            /** @description The created project */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
        };
    };
    getProjectByIdentifier: {
        parameters: {
            query: {
                populate?: ("user" | "team" | "lastPublishedDeployment" | "lastDeployment") | ("user" | "team" | "lastPublishedDeployment" | "lastDeployment")[];
                /** @description Public project identifier (e.g. "@namespace/project-name") */
                projectIdentifier: components["schemas"]["ProjectIdentifier"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A project */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    getProject: {
        parameters: {
            query?: {
                populate?: ("user" | "team" | "lastPublishedDeployment" | "lastDeployment") | ("user" | "team" | "lastPublishedDeployment" | "lastDeployment")[];
            };
            header?: never;
            path: {
                /** @description Project ID */
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A project */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    updateProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ID */
                projectId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name?: string;
                    alias?: string;
                };
            };
        };
        responses: {
            /** @description The updated project */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    getConsumer: {
        parameters: {
            query?: {
                populate?: ("user" | "project" | "deployment") | ("user" | "project" | "deployment")[];
            };
            header?: never;
            path: {
                /** @description Consumer ID */
                consumerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A consumer object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Consumer"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    updateConsumer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Consumer ID */
                consumerId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    plan?: string;
                    /** @description Deployment id (e.g. "depl_tz4a98xxat96iws9zmbrgj3a") */
                    deploymentId?: string;
                };
            };
        };
        responses: {
            /** @description A consumer object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Consumer"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            410: components["responses"]["410"];
        };
    };
    createConsumer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    plan: string;
                    source?: string;
                    /** @description Deployment id (e.g. "depl_tz4a98xxat96iws9zmbrgj3a") */
                    deploymentId?: string;
                };
            };
        };
        responses: {
            /** @description A consumer object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Consumer"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            410: components["responses"]["410"];
        };
    };
    refreshConsumerToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Consumer ID */
                consumerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A consumer object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Consumer"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    listConsumers: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
                sort?: "asc" | "desc";
                sortBy?: "createdAt" | "updatedAt";
                populate?: ("user" | "project" | "deployment") | ("user" | "project" | "deployment")[];
            };
            header?: never;
            path: {
                /** @description Project ID */
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of consumers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Consumer"][];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    getDeploymentByIdentifier: {
        parameters: {
            query: {
                populate?: ("user" | "team" | "project") | ("user" | "team" | "project")[];
                /** @description Public deployment identifier (e.g. "@namespace/project-name@{hash|version|latest}") */
                deploymentIdentifier: components["schemas"]["DeploymentIdentifier"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A deployment object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deployment"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    getDeployment: {
        parameters: {
            query?: {
                populate?: ("user" | "team" | "project") | ("user" | "team" | "project")[];
            };
            header?: never;
            path: {
                /** @description deployment ID */
                deploymentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A deployment object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deployment"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    updateDeployment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description deployment ID */
                deploymentId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    deletedAt?: string;
                    description?: string;
                };
            };
        };
        responses: {
            /** @description A deployment object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deployment"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    listDeployments: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
                sort?: "asc" | "desc";
                sortBy?: "createdAt" | "updatedAt";
                populate?: ("user" | "team" | "project") | ("user" | "team" | "project")[];
                /** @description Public project identifier (e.g. "@namespace/project-name") */
                projectIdentifier?: components["schemas"]["ProjectIdentifier"];
                /** @description Public deployment identifier (e.g. "@namespace/project-name@{hash|version|latest}") */
                deploymentIdentifier?: components["schemas"]["DeploymentIdentifier"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of deployments */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deployment"][];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
        };
    };
    createDeployment: {
        parameters: {
            query?: {
                publish?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Name of the project. */
                    name: string;
                    /** @description Optional semantic version of the project as a semver string. Ex: 1.0.0, 0.0.1, 5.0.1, etc. */
                    version?: string;
                    /** @description A short description of the project. */
                    description?: string;
                    /** @description A readme documenting the project (supports GitHub-flavored markdown). */
                    readme?: string;
                    /**
                     * Format: uri
                     * @description Optional logo image URL to use for the project. Logos should have a square aspect ratio.
                     */
                    iconUrl?: string;
                    /**
                     * Format: uri
                     * @description Optional URL to the source code of the project (eg, GitHub repo).
                     */
                    sourceUrl?: string;
                    /**
                     * Format: uri
                     * @description Required base URL of the externally hosted origin API server. Must be a valid `https` URL.
                     *
                     *     NOTE: Agentic currently only supports `external` API servers. If you'd like to host your API or MCP server on Agentic's infrastructure, please reach out to support@agentic.so.
                     */
                    originUrl: string;
                    originAdapter?: components["schemas"]["OriginAdapterConfig"];
                    /**
                     * @description List of PricingPlans configuring which Stripe subscriptions should be available for the project. Defaults to a single free plan which is useful for developing and testing your project.
                     * @default [
                     *       {
                     *         "name": "Free",
                     *         "slug": "free",
                     *         "lineItems": [
                     *           {
                     *             "slug": "base",
                     *             "usageType": "licensed",
                     *             "amount": 0
                     *           }
                     *         ]
                     *       }
                     *     ]
                     */
                    pricingPlans?: components["schemas"]["PricingPlan"][];
                    /**
                     * @description Optional list of billing intervals to enable in the pricingPlans.
                     *
                     *     Defaults to a single monthly interval `['month']`.
                     *
                     *     To add support for annual pricing plans, for example, you can use: `['month', 'year']`.
                     * @default [
                     *       "month"
                     *     ]
                     */
                    pricingIntervals?: components["schemas"]["PricingInterval"][];
                    /** @default [] */
                    toolConfigs?: components["schemas"]["ToolConfig"][];
                };
            };
        };
        responses: {
            /** @description A deployment object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deployment"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
        };
    };
    publishDeployment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description deployment ID */
                deploymentId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    version: string;
                };
            };
        };
        responses: {
            /** @description A deployment object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deployment"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    adminGetConsumerByToken: {
        parameters: {
            query?: {
                populate?: ("user" | "project" | "deployment") | ("user" | "project" | "deployment")[];
            };
            header?: never;
            path: {
                /** @description Consumer token */
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description An admin consumer object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminConsumer"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
    adminActivateConsumer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Consumer ID */
                consumerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description An admin consumer object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminConsumer"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            410: components["responses"]["410"];
        };
    };
    adminGetDeploymentByIdentifier: {
        parameters: {
            query: {
                populate?: ("user" | "team" | "project") | ("user" | "team" | "project")[];
                /** @description Public deployment identifier (e.g. "@namespace/project-name@{hash|version|latest}") */
                deploymentIdentifier: components["schemas"]["DeploymentIdentifier"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description An admin deployment object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminDeployment"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
        };
    };
}
