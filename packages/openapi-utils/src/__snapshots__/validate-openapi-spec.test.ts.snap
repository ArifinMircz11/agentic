// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`validateOpenAPISpec > basic.json (file url) 1`] = `
{
  "info": {
    "title": "OpenAPI Basic Test Fixture",
    "version": "0.1.0",
  },
  "openapi": "3.0.2",
  "paths": {
    "/": {
      "get": {
        "operationId": "echo",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "title": "name",
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {},
              },
            },
            "description": "Success",
          },
        },
        "summary": "Echo",
      },
    },
  },
  "servers": [
    {
      "url": "https://test-openapi-basic.now.sh",
    },
  ],
}
`;

exports[`validateOpenAPISpec > basic.json (http url) 1`] = `
{
  "info": {
    "title": "OpenAPI Basic Test Fixture",
    "version": "0.1.0",
  },
  "openapi": "3.0.2",
  "paths": {
    "/": {
      "get": {
        "operationId": "echo",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "title": "name",
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {},
              },
            },
            "description": "Success",
          },
        },
        "summary": "Echo",
      },
    },
  },
  "servers": [
    {
      "url": "https://test-openapi-basic.now.sh",
    },
  ],
}
`;

exports[`validateOpenAPISpec > basic.json (string) 1`] = `
{
  "info": {
    "title": "OpenAPI Basic Test Fixture",
    "version": "0.1.0",
  },
  "openapi": "3.0.2",
  "paths": {
    "/": {
      "get": {
        "operationId": "echo",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "title": "name",
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {},
              },
            },
            "description": "Success",
          },
        },
        "summary": "Echo",
      },
    },
  },
  "servers": [
    {
      "url": "https://test-openapi-basic.now.sh",
    },
  ],
}
`;

exports[`validateOpenAPISpec > firecrawl.json (file url) 1`] = `
{
  "components": {
    "schemas": {
      "CrawlResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "success": {
            "type": "boolean",
          },
          "url": {
            "format": "uri",
            "type": "string",
          },
        },
        "type": "object",
      },
      "CrawlStatusResponseObj": {
        "properties": {
          "html": {
            "description": "HTML version of the content on page if the \`html\` format was specified",
            "nullable": true,
            "type": "string",
          },
          "links": {
            "description": "Links on the page if the \`links\` format was specified",
            "items": {
              "format": "uri",
              "type": "string",
            },
            "nullable": true,
            "type": "array",
          },
          "markdown": {
            "description": "Markdown content of the page if the \`markdown\` format was specified (default)",
            "nullable": true,
            "type": "string",
          },
          "metadata": {
            "properties": {
              "<any other metadata> ": {
                "type": "string",
              },
              "description": {
                "type": "string",
              },
              "error": {
                "description": "The error message of the page",
                "nullable": true,
                "type": "string",
              },
              "language": {
                "nullable": true,
                "type": "string",
              },
              "sourceURL": {
                "format": "uri",
                "type": "string",
              },
              "statusCode": {
                "description": "The status code of the page",
                "type": "integer",
              },
              "title": {
                "type": "string",
              },
            },
            "type": "object",
          },
          "rawHtml": {
            "description": "Raw HTML content of the page if the \`rawHtml\` format was specified",
            "nullable": true,
            "type": "string",
          },
          "screenshot": {
            "description": "URL of the screenshot of the page if the \`screenshot\` or \`screenshot@fullSize\` format was specified",
            "nullable": true,
            "type": "string",
          },
        },
        "type": "object",
      },
      "ScrapeResponse": {
        "properties": {
          "data": {
            "properties": {
              "html": {
                "description": "HTML version of the content on page if the \`html\` format was specified",
                "nullable": true,
                "type": "string",
              },
              "links": {
                "description": "Links on the page if the \`links\` format was specified",
                "items": {
                  "format": "uri",
                  "type": "string",
                },
                "nullable": true,
                "type": "array",
              },
              "markdown": {
                "description": "Markdown content of the page if the \`markdown\` format was specified (default)",
                "nullable": true,
                "type": "string",
              },
              "metadata": {
                "properties": {
                  "<any other metadata> ": {
                    "type": "string",
                  },
                  "description": {
                    "type": "string",
                  },
                  "error": {
                    "description": "The error message of the page",
                    "nullable": true,
                    "type": "string",
                  },
                  "language": {
                    "nullable": true,
                    "type": "string",
                  },
                  "sourceURL": {
                    "format": "uri",
                    "type": "string",
                  },
                  "statusCode": {
                    "description": "The status code of the page",
                    "type": "integer",
                  },
                  "title": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
              "rawHtml": {
                "description": "Raw HTML content of the page if the \`rawHtml\` format was specified",
                "nullable": true,
                "type": "string",
              },
              "screenshot": {
                "description": "URL of the screenshot of the page if the \`screenshot\` or \`screenshot@fullSize\` format was specified",
                "nullable": true,
                "type": "string",
              },
            },
            "type": "object",
          },
          "success": {
            "type": "boolean",
          },
          "warning": {
            "description": "Warning message to let you know of any issues.",
            "nullable": true,
            "type": "string",
          },
        },
        "type": "object",
      },
      "SearchResponse": {
        "properties": {
          "data": {
            "items": {
              "html": {
                "description": "HTML version of the content on page if the \`html\` format was specified",
                "nullable": true,
                "type": "string",
              },
              "links": {
                "description": "Links on the page if the \`links\` format was specified",
                "items": {
                  "format": "uri",
                  "type": "string",
                },
                "nullable": true,
                "type": "array",
              },
              "markdown": {
                "description": "Markdown content of the page if the \`markdown\` format was specified (default)",
                "nullable": true,
                "type": "string",
              },
              "metadata": {
                "properties": {
                  "<any other metadata> ": {
                    "type": "string",
                  },
                  "description": {
                    "type": "string",
                  },
                  "error": {
                    "description": "The error message of the page",
                    "nullable": true,
                    "type": "string",
                  },
                  "language": {
                    "nullable": true,
                    "type": "string",
                  },
                  "sourceURL": {
                    "format": "uri",
                    "type": "string",
                  },
                  "statusCode": {
                    "description": "The status code of the page",
                    "type": "integer",
                  },
                  "title": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
              "rawHtml": {
                "description": "Raw HTML content of the page if the \`rawHtml\` format was specified",
                "nullable": true,
                "type": "string",
              },
              "screenshot": {
                "description": "URL of the screenshot of the page if the \`screenshot\` or \`screenshot@fullSize\` format was specified",
                "nullable": true,
                "type": "string",
              },
            },
            "type": "array",
          },
          "success": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
    },
    "securitySchemes": {
      "bearerAuth": {
        "scheme": "bearer",
        "type": "http",
      },
    },
  },
  "info": {
    "contact": {
      "email": "support@firecrawl.dev",
      "name": "Firecrawl Support",
      "url": "https://firecrawl.dev/support",
    },
    "description": "API for interacting with Firecrawl services to perform web scraping and crawling tasks.",
    "title": "Firecrawl API",
    "version": "1.0.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/crawl": {
      "post": {
        "operationId": "crawlUrls",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "crawlerOptions": {
                    "properties": {
                      "allowBackwardCrawling": {
                        "default": false,
                        "description": "Enables the crawler to navigate from a specific URL to previously linked pages. For instance, from 'example.com/product/123' back to 'example.com/product'",
                        "type": "boolean",
                      },
                      "allowExternalContentLinks": {
                        "default": false,
                        "description": "Allows the crawler to follow links to external websites.",
                        "type": "boolean",
                      },
                      "excludes": {
                        "description": "URL patterns to exclude",
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "generateImgAltText": {
                        "default": false,
                        "description": "Generate alt text for images using LLMs (must have a paid plan)",
                        "type": "boolean",
                      },
                      "ignoreSitemap": {
                        "default": false,
                        "description": "Ignore the website sitemap when crawling",
                        "type": "boolean",
                      },
                      "includes": {
                        "description": "URL patterns to include",
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "limit": {
                        "default": 10000,
                        "description": "Maximum number of pages to crawl",
                        "type": "integer",
                      },
                      "maxDepth": {
                        "description": "Maximum depth to crawl relative to the entered URL. A maxDepth of 0 scrapes only the entered URL. A maxDepth of 1 scrapes the entered URL and all pages one level deep. A maxDepth of 2 scrapes the entered URL and all pages up to two levels deep. Higher values follow the same pattern.",
                        "type": "integer",
                      },
                      "mode": {
                        "default": "default",
                        "description": "The crawling mode to use. Fast mode crawls 4x faster websites without sitemap, but may not be as accurate and shouldn't be used in heavy js-rendered websites.",
                        "enum": [
                          "default",
                          "fast",
                        ],
                        "type": "string",
                      },
                      "returnOnlyUrls": {
                        "default": false,
                        "description": "If true, returns only the URLs as a list on the crawl status. Attention: the return response will be a list of URLs inside the data, not a list of documents.",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                  "pageOptions": {
                    "properties": {
                      "fullPageScreenshot": {
                        "default": false,
                        "description": "Include a full page screenshot of the page that you are scraping.",
                        "type": "boolean",
                      },
                      "headers": {
                        "description": "Headers to send with the request. Can be used to send cookies, user-agent, etc.",
                        "type": "object",
                      },
                      "includeHtml": {
                        "default": false,
                        "description": "Include the HTML version of the content on page. Will output a html key in the response.",
                        "type": "boolean",
                      },
                      "includeRawHtml": {
                        "default": false,
                        "description": "Include the raw HTML content of the page. Will output a rawHtml key in the response.",
                        "type": "boolean",
                      },
                      "onlyIncludeTags": {
                        "description": "Only include tags, classes and ids from the page in the final output. Use comma separated values. Example: 'script, .ad, #footer'",
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "onlyMainContent": {
                        "default": false,
                        "description": "Only return the main content of the page excluding headers, navs, footers, etc.",
                        "type": "boolean",
                      },
                      "removeTags": {
                        "description": "Tags, classes and ids to remove from the page. Use comma separated values. Example: 'script, .ad, #footer'",
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "replaceAllPathsWithAbsolutePaths": {
                        "default": false,
                        "description": "Replace all relative paths with absolute paths for images and links",
                        "type": "boolean",
                      },
                      "screenshot": {
                        "default": false,
                        "description": "Include a screenshot of the top of the page that you are scraping.",
                        "type": "boolean",
                      },
                      "waitFor": {
                        "default": 0,
                        "description": "Wait x amount of milliseconds for the page to load to fetch content",
                        "type": "integer",
                      },
                    },
                    "type": "object",
                  },
                  "url": {
                    "description": "The base URL to start crawling from",
                    "format": "uri",
                    "type": "string",
                  },
                },
                "required": [
                  "url",
                ],
                "type": "object",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrawlResponse",
                },
              },
            },
            "description": "Successful response",
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Payment required to access this resource.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Payment required",
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Request rate limit exceeded. Please wait and try again later.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Too many requests",
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "An unexpected error occurred on the server.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Server error",
          },
        },
        "security": [
          {
            "bearerAuth": [],
          },
        ],
        "summary": "Crawl multiple URLs based on options",
        "tags": [
          "Crawling",
        ],
      },
    },
    "/crawl/cancel/{jobId}": {
      "delete": {
        "operationId": "cancelCrawlJob",
        "parameters": [
          {
            "description": "ID of the crawl job",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "description": "Returns cancelled.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Payment required to access this resource.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Payment required",
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Request rate limit exceeded. Please wait and try again later.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Too many requests",
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "An unexpected error occurred on the server.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Server error",
          },
        },
        "security": [
          {
            "bearerAuth": [],
          },
        ],
        "summary": "Cancel a crawl job",
        "tags": [
          "Crawl",
        ],
      },
    },
    "/crawl/status/{jobId}": {
      "get": {
        "operationId": "getCrawlStatus",
        "parameters": [
          {
            "description": "ID of the crawl job",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "current": {
                      "description": "Current page number",
                      "type": "integer",
                    },
                    "data": {
                      "description": "Data returned from the job (null when it is in progress)",
                      "items": {
                        "$ref": "#/components/schemas/CrawlStatusResponseObj",
                      },
                      "type": "array",
                    },
                    "partial_data": {
                      "description": "Partial documents returned as it is being crawled (streaming). **This feature is currently in alpha - expect breaking changes** When a page is ready, it will append to the partial_data array, so there is no need to wait for the entire website to be crawled. When the crawl is done, partial_data will become empty and the result will be available in \`data\`. There is a max of 50 items in the array response. The oldest item (top of the array) will be removed when the new item is added to the array.",
                      "items": {
                        "$ref": "#/components/schemas/CrawlStatusResponseObj",
                      },
                      "type": "array",
                    },
                    "status": {
                      "description": "Status of the job (completed, active, failed, paused)",
                      "type": "string",
                    },
                    "total": {
                      "description": "Total number of pages",
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Payment required to access this resource.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Payment required",
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Request rate limit exceeded. Please wait and try again later.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Too many requests",
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "An unexpected error occurred on the server.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Server error",
          },
        },
        "security": [
          {
            "bearerAuth": [],
          },
        ],
        "summary": "Get the status of a crawl job",
        "tags": [
          "Crawl",
        ],
      },
    },
    "/scrape": {
      "post": {
        "operationId": "scrape",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "excludeTags": {
                    "description": "Tags, classes and ids to remove from the page. Use comma separated values. Example: 'script, .ad, #footer'",
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "formats": {
                    "default": [
                      "markdown",
                    ],
                    "description": "Specific formats to return.

 - markdown: The page in Markdown format.
 - html: The page's HTML, trimmed to include only meaningful content.
 - rawHtml: The page's original HTML.
 - links: The links on the page.
 - screenshot: A screenshot of the top of the page.
 - screenshot@fullPage: A screenshot of the full page. (overridden by screenshot if present)",
                    "items": {
                      "enum": [
                        "markdown",
                        "html",
                        "rawHtml",
                        "links",
                        "screenshot",
                        "screenshot@fullPage",
                      ],
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "headers": {
                    "description": "Headers to send with the request. Can be used to send cookies, user-agent, etc.",
                    "type": "object",
                  },
                  "includeTags": {
                    "description": "Only include tags, classes and ids from the page in the final output. Use comma separated values. Example: 'script, .ad, #footer'",
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "onlyMainContent": {
                    "default": true,
                    "description": "Only return the main content of the page excluding headers, navs, footers, etc.",
                    "type": "boolean",
                  },
                  "timeout": {
                    "default": 30000,
                    "description": "Timeout in milliseconds for the request",
                    "type": "integer",
                  },
                  "url": {
                    "description": "The URL to scrape",
                    "format": "uri",
                    "type": "string",
                  },
                  "waitFor": {
                    "default": 0,
                    "description": "Wait x amount of milliseconds for the page to load to fetch content",
                    "type": "integer",
                  },
                },
                "required": [
                  "url",
                ],
                "type": "object",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScrapeResponse",
                },
              },
            },
            "description": "Successful response",
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Payment required to access this resource.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Payment required",
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Request rate limit exceeded. Please wait and try again later.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Too many requests",
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "An unexpected error occurred on the server.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Server error",
          },
        },
        "security": [
          {
            "bearerAuth": [],
          },
        ],
        "summary": "Scrape a single URL",
        "tags": [
          "Scraping",
        ],
      },
    },
    "/search": {
      "post": {
        "operationId": "searchGoogle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "pageOptions": {
                    "properties": {
                      "fetchPageContent": {
                        "default": true,
                        "description": "Fetch the content of each page. If false, defaults to a basic fast serp API.",
                        "type": "boolean",
                      },
                      "includeHtml": {
                        "default": false,
                        "description": "Include the HTML version of the content on page. Will output a html key in the response.",
                        "type": "boolean",
                      },
                      "includeRawHtml": {
                        "default": false,
                        "description": "Include the raw HTML content of the page. Will output a rawHtml key in the response.",
                        "type": "boolean",
                      },
                      "onlyMainContent": {
                        "default": false,
                        "description": "Only return the main content of the page excluding headers, navs, footers, etc.",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                  "query": {
                    "description": "The query to search for",
                    "format": "uri",
                    "type": "string",
                  },
                  "searchOptions": {
                    "properties": {
                      "limit": {
                        "description": "Maximum number of results. Max is 20 during beta.",
                        "type": "integer",
                      },
                    },
                    "type": "object",
                  },
                },
                "required": [
                  "query",
                ],
                "type": "object",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse",
                },
              },
            },
            "description": "Successful response",
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Payment required to access this resource.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Payment required",
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Request rate limit exceeded. Please wait and try again later.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Too many requests",
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "An unexpected error occurred on the server.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Server error",
          },
        },
        "security": [
          {
            "bearerAuth": [],
          },
        ],
        "summary": "Search for a keyword in Google, returns top page results with markdown content for each page",
        "tags": [
          "Search",
        ],
      },
    },
  },
  "security": [
    {
      "bearerAuth": [],
    },
  ],
  "servers": [
    {
      "url": "https://api.firecrawl.dev/v0",
    },
  ],
}
`;

exports[`validateOpenAPISpec > firecrawl.json (http url) 1`] = `
{
  "components": {
    "schemas": {
      "CrawlResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "success": {
            "type": "boolean",
          },
          "url": {
            "format": "uri",
            "type": "string",
          },
        },
        "type": "object",
      },
      "CrawlStatusResponseObj": {
        "properties": {
          "html": {
            "description": "HTML version of the content on page if the \`html\` format was specified",
            "nullable": true,
            "type": "string",
          },
          "links": {
            "description": "Links on the page if the \`links\` format was specified",
            "items": {
              "format": "uri",
              "type": "string",
            },
            "nullable": true,
            "type": "array",
          },
          "markdown": {
            "description": "Markdown content of the page if the \`markdown\` format was specified (default)",
            "nullable": true,
            "type": "string",
          },
          "metadata": {
            "properties": {
              "<any other metadata> ": {
                "type": "string",
              },
              "description": {
                "type": "string",
              },
              "error": {
                "description": "The error message of the page",
                "nullable": true,
                "type": "string",
              },
              "language": {
                "nullable": true,
                "type": "string",
              },
              "sourceURL": {
                "format": "uri",
                "type": "string",
              },
              "statusCode": {
                "description": "The status code of the page",
                "type": "integer",
              },
              "title": {
                "type": "string",
              },
            },
            "type": "object",
          },
          "rawHtml": {
            "description": "Raw HTML content of the page if the \`rawHtml\` format was specified",
            "nullable": true,
            "type": "string",
          },
          "screenshot": {
            "description": "URL of the screenshot of the page if the \`screenshot\` or \`screenshot@fullSize\` format was specified",
            "nullable": true,
            "type": "string",
          },
        },
        "type": "object",
      },
      "ScrapeResponse": {
        "properties": {
          "data": {
            "properties": {
              "html": {
                "description": "HTML version of the content on page if the \`html\` format was specified",
                "nullable": true,
                "type": "string",
              },
              "links": {
                "description": "Links on the page if the \`links\` format was specified",
                "items": {
                  "format": "uri",
                  "type": "string",
                },
                "nullable": true,
                "type": "array",
              },
              "markdown": {
                "description": "Markdown content of the page if the \`markdown\` format was specified (default)",
                "nullable": true,
                "type": "string",
              },
              "metadata": {
                "properties": {
                  "<any other metadata> ": {
                    "type": "string",
                  },
                  "description": {
                    "type": "string",
                  },
                  "error": {
                    "description": "The error message of the page",
                    "nullable": true,
                    "type": "string",
                  },
                  "language": {
                    "nullable": true,
                    "type": "string",
                  },
                  "sourceURL": {
                    "format": "uri",
                    "type": "string",
                  },
                  "statusCode": {
                    "description": "The status code of the page",
                    "type": "integer",
                  },
                  "title": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
              "rawHtml": {
                "description": "Raw HTML content of the page if the \`rawHtml\` format was specified",
                "nullable": true,
                "type": "string",
              },
              "screenshot": {
                "description": "URL of the screenshot of the page if the \`screenshot\` or \`screenshot@fullSize\` format was specified",
                "nullable": true,
                "type": "string",
              },
            },
            "type": "object",
          },
          "success": {
            "type": "boolean",
          },
          "warning": {
            "description": "Warning message to let you know of any issues.",
            "nullable": true,
            "type": "string",
          },
        },
        "type": "object",
      },
      "SearchResponse": {
        "properties": {
          "data": {
            "items": {
              "html": {
                "description": "HTML version of the content on page if the \`html\` format was specified",
                "nullable": true,
                "type": "string",
              },
              "links": {
                "description": "Links on the page if the \`links\` format was specified",
                "items": {
                  "format": "uri",
                  "type": "string",
                },
                "nullable": true,
                "type": "array",
              },
              "markdown": {
                "description": "Markdown content of the page if the \`markdown\` format was specified (default)",
                "nullable": true,
                "type": "string",
              },
              "metadata": {
                "properties": {
                  "<any other metadata> ": {
                    "type": "string",
                  },
                  "description": {
                    "type": "string",
                  },
                  "error": {
                    "description": "The error message of the page",
                    "nullable": true,
                    "type": "string",
                  },
                  "language": {
                    "nullable": true,
                    "type": "string",
                  },
                  "sourceURL": {
                    "format": "uri",
                    "type": "string",
                  },
                  "statusCode": {
                    "description": "The status code of the page",
                    "type": "integer",
                  },
                  "title": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
              "rawHtml": {
                "description": "Raw HTML content of the page if the \`rawHtml\` format was specified",
                "nullable": true,
                "type": "string",
              },
              "screenshot": {
                "description": "URL of the screenshot of the page if the \`screenshot\` or \`screenshot@fullSize\` format was specified",
                "nullable": true,
                "type": "string",
              },
            },
            "type": "array",
          },
          "success": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
    },
    "securitySchemes": {
      "bearerAuth": {
        "scheme": "bearer",
        "type": "http",
      },
    },
  },
  "info": {
    "contact": {
      "email": "support@firecrawl.dev",
      "name": "Firecrawl Support",
      "url": "https://firecrawl.dev/support",
    },
    "description": "API for interacting with Firecrawl services to perform web scraping and crawling tasks.",
    "title": "Firecrawl API",
    "version": "1.0.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/crawl": {
      "post": {
        "operationId": "crawlUrls",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "crawlerOptions": {
                    "properties": {
                      "allowBackwardCrawling": {
                        "default": false,
                        "description": "Enables the crawler to navigate from a specific URL to previously linked pages. For instance, from 'example.com/product/123' back to 'example.com/product'",
                        "type": "boolean",
                      },
                      "allowExternalContentLinks": {
                        "default": false,
                        "description": "Allows the crawler to follow links to external websites.",
                        "type": "boolean",
                      },
                      "excludes": {
                        "description": "URL patterns to exclude",
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "generateImgAltText": {
                        "default": false,
                        "description": "Generate alt text for images using LLMs (must have a paid plan)",
                        "type": "boolean",
                      },
                      "ignoreSitemap": {
                        "default": false,
                        "description": "Ignore the website sitemap when crawling",
                        "type": "boolean",
                      },
                      "includes": {
                        "description": "URL patterns to include",
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "limit": {
                        "default": 10000,
                        "description": "Maximum number of pages to crawl",
                        "type": "integer",
                      },
                      "maxDepth": {
                        "description": "Maximum depth to crawl relative to the entered URL. A maxDepth of 0 scrapes only the entered URL. A maxDepth of 1 scrapes the entered URL and all pages one level deep. A maxDepth of 2 scrapes the entered URL and all pages up to two levels deep. Higher values follow the same pattern.",
                        "type": "integer",
                      },
                      "mode": {
                        "default": "default",
                        "description": "The crawling mode to use. Fast mode crawls 4x faster websites without sitemap, but may not be as accurate and shouldn't be used in heavy js-rendered websites.",
                        "enum": [
                          "default",
                          "fast",
                        ],
                        "type": "string",
                      },
                      "returnOnlyUrls": {
                        "default": false,
                        "description": "If true, returns only the URLs as a list on the crawl status. Attention: the return response will be a list of URLs inside the data, not a list of documents.",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                  "pageOptions": {
                    "properties": {
                      "fullPageScreenshot": {
                        "default": false,
                        "description": "Include a full page screenshot of the page that you are scraping.",
                        "type": "boolean",
                      },
                      "headers": {
                        "description": "Headers to send with the request. Can be used to send cookies, user-agent, etc.",
                        "type": "object",
                      },
                      "includeHtml": {
                        "default": false,
                        "description": "Include the HTML version of the content on page. Will output a html key in the response.",
                        "type": "boolean",
                      },
                      "includeRawHtml": {
                        "default": false,
                        "description": "Include the raw HTML content of the page. Will output a rawHtml key in the response.",
                        "type": "boolean",
                      },
                      "onlyIncludeTags": {
                        "description": "Only include tags, classes and ids from the page in the final output. Use comma separated values. Example: 'script, .ad, #footer'",
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "onlyMainContent": {
                        "default": false,
                        "description": "Only return the main content of the page excluding headers, navs, footers, etc.",
                        "type": "boolean",
                      },
                      "removeTags": {
                        "description": "Tags, classes and ids to remove from the page. Use comma separated values. Example: 'script, .ad, #footer'",
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "replaceAllPathsWithAbsolutePaths": {
                        "default": false,
                        "description": "Replace all relative paths with absolute paths for images and links",
                        "type": "boolean",
                      },
                      "screenshot": {
                        "default": false,
                        "description": "Include a screenshot of the top of the page that you are scraping.",
                        "type": "boolean",
                      },
                      "waitFor": {
                        "default": 0,
                        "description": "Wait x amount of milliseconds for the page to load to fetch content",
                        "type": "integer",
                      },
                    },
                    "type": "object",
                  },
                  "url": {
                    "description": "The base URL to start crawling from",
                    "format": "uri",
                    "type": "string",
                  },
                },
                "required": [
                  "url",
                ],
                "type": "object",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrawlResponse",
                },
              },
            },
            "description": "Successful response",
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Payment required to access this resource.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Payment required",
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Request rate limit exceeded. Please wait and try again later.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Too many requests",
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "An unexpected error occurred on the server.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Server error",
          },
        },
        "security": [
          {
            "bearerAuth": [],
          },
        ],
        "summary": "Crawl multiple URLs based on options",
        "tags": [
          "Crawling",
        ],
      },
    },
    "/crawl/cancel/{jobId}": {
      "delete": {
        "operationId": "cancelCrawlJob",
        "parameters": [
          {
            "description": "ID of the crawl job",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "description": "Returns cancelled.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Payment required to access this resource.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Payment required",
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Request rate limit exceeded. Please wait and try again later.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Too many requests",
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "An unexpected error occurred on the server.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Server error",
          },
        },
        "security": [
          {
            "bearerAuth": [],
          },
        ],
        "summary": "Cancel a crawl job",
        "tags": [
          "Crawl",
        ],
      },
    },
    "/crawl/status/{jobId}": {
      "get": {
        "operationId": "getCrawlStatus",
        "parameters": [
          {
            "description": "ID of the crawl job",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "current": {
                      "description": "Current page number",
                      "type": "integer",
                    },
                    "data": {
                      "description": "Data returned from the job (null when it is in progress)",
                      "items": {
                        "$ref": "#/components/schemas/CrawlStatusResponseObj",
                      },
                      "type": "array",
                    },
                    "partial_data": {
                      "description": "Partial documents returned as it is being crawled (streaming). **This feature is currently in alpha - expect breaking changes** When a page is ready, it will append to the partial_data array, so there is no need to wait for the entire website to be crawled. When the crawl is done, partial_data will become empty and the result will be available in \`data\`. There is a max of 50 items in the array response. The oldest item (top of the array) will be removed when the new item is added to the array.",
                      "items": {
                        "$ref": "#/components/schemas/CrawlStatusResponseObj",
                      },
                      "type": "array",
                    },
                    "status": {
                      "description": "Status of the job (completed, active, failed, paused)",
                      "type": "string",
                    },
                    "total": {
                      "description": "Total number of pages",
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Payment required to access this resource.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Payment required",
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Request rate limit exceeded. Please wait and try again later.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Too many requests",
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "An unexpected error occurred on the server.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Server error",
          },
        },
        "security": [
          {
            "bearerAuth": [],
          },
        ],
        "summary": "Get the status of a crawl job",
        "tags": [
          "Crawl",
        ],
      },
    },
    "/scrape": {
      "post": {
        "operationId": "scrape",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "excludeTags": {
                    "description": "Tags, classes and ids to remove from the page. Use comma separated values. Example: 'script, .ad, #footer'",
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "formats": {
                    "default": [
                      "markdown",
                    ],
                    "description": "Specific formats to return.

 - markdown: The page in Markdown format.
 - html: The page's HTML, trimmed to include only meaningful content.
 - rawHtml: The page's original HTML.
 - links: The links on the page.
 - screenshot: A screenshot of the top of the page.
 - screenshot@fullPage: A screenshot of the full page. (overridden by screenshot if present)",
                    "items": {
                      "enum": [
                        "markdown",
                        "html",
                        "rawHtml",
                        "links",
                        "screenshot",
                        "screenshot@fullPage",
                      ],
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "headers": {
                    "description": "Headers to send with the request. Can be used to send cookies, user-agent, etc.",
                    "type": "object",
                  },
                  "includeTags": {
                    "description": "Only include tags, classes and ids from the page in the final output. Use comma separated values. Example: 'script, .ad, #footer'",
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "onlyMainContent": {
                    "default": true,
                    "description": "Only return the main content of the page excluding headers, navs, footers, etc.",
                    "type": "boolean",
                  },
                  "timeout": {
                    "default": 30000,
                    "description": "Timeout in milliseconds for the request",
                    "type": "integer",
                  },
                  "url": {
                    "description": "The URL to scrape",
                    "format": "uri",
                    "type": "string",
                  },
                  "waitFor": {
                    "default": 0,
                    "description": "Wait x amount of milliseconds for the page to load to fetch content",
                    "type": "integer",
                  },
                },
                "required": [
                  "url",
                ],
                "type": "object",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScrapeResponse",
                },
              },
            },
            "description": "Successful response",
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Payment required to access this resource.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Payment required",
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Request rate limit exceeded. Please wait and try again later.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Too many requests",
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "An unexpected error occurred on the server.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Server error",
          },
        },
        "security": [
          {
            "bearerAuth": [],
          },
        ],
        "summary": "Scrape a single URL",
        "tags": [
          "Scraping",
        ],
      },
    },
    "/search": {
      "post": {
        "operationId": "searchGoogle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "pageOptions": {
                    "properties": {
                      "fetchPageContent": {
                        "default": true,
                        "description": "Fetch the content of each page. If false, defaults to a basic fast serp API.",
                        "type": "boolean",
                      },
                      "includeHtml": {
                        "default": false,
                        "description": "Include the HTML version of the content on page. Will output a html key in the response.",
                        "type": "boolean",
                      },
                      "includeRawHtml": {
                        "default": false,
                        "description": "Include the raw HTML content of the page. Will output a rawHtml key in the response.",
                        "type": "boolean",
                      },
                      "onlyMainContent": {
                        "default": false,
                        "description": "Only return the main content of the page excluding headers, navs, footers, etc.",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                  "query": {
                    "description": "The query to search for",
                    "format": "uri",
                    "type": "string",
                  },
                  "searchOptions": {
                    "properties": {
                      "limit": {
                        "description": "Maximum number of results. Max is 20 during beta.",
                        "type": "integer",
                      },
                    },
                    "type": "object",
                  },
                },
                "required": [
                  "query",
                ],
                "type": "object",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse",
                },
              },
            },
            "description": "Successful response",
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Payment required to access this resource.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Payment required",
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Request rate limit exceeded. Please wait and try again later.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Too many requests",
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "An unexpected error occurred on the server.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Server error",
          },
        },
        "security": [
          {
            "bearerAuth": [],
          },
        ],
        "summary": "Search for a keyword in Google, returns top page results with markdown content for each page",
        "tags": [
          "Search",
        ],
      },
    },
  },
  "security": [
    {
      "bearerAuth": [],
    },
  ],
  "servers": [
    {
      "url": "https://api.firecrawl.dev/v0",
    },
  ],
}
`;

exports[`validateOpenAPISpec > firecrawl.json (string) 1`] = `
{
  "components": {
    "schemas": {
      "CrawlResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "success": {
            "type": "boolean",
          },
          "url": {
            "format": "uri",
            "type": "string",
          },
        },
        "type": "object",
      },
      "CrawlStatusResponseObj": {
        "properties": {
          "html": {
            "description": "HTML version of the content on page if the \`html\` format was specified",
            "nullable": true,
            "type": "string",
          },
          "links": {
            "description": "Links on the page if the \`links\` format was specified",
            "items": {
              "format": "uri",
              "type": "string",
            },
            "nullable": true,
            "type": "array",
          },
          "markdown": {
            "description": "Markdown content of the page if the \`markdown\` format was specified (default)",
            "nullable": true,
            "type": "string",
          },
          "metadata": {
            "properties": {
              "<any other metadata> ": {
                "type": "string",
              },
              "description": {
                "type": "string",
              },
              "error": {
                "description": "The error message of the page",
                "nullable": true,
                "type": "string",
              },
              "language": {
                "nullable": true,
                "type": "string",
              },
              "sourceURL": {
                "format": "uri",
                "type": "string",
              },
              "statusCode": {
                "description": "The status code of the page",
                "type": "integer",
              },
              "title": {
                "type": "string",
              },
            },
            "type": "object",
          },
          "rawHtml": {
            "description": "Raw HTML content of the page if the \`rawHtml\` format was specified",
            "nullable": true,
            "type": "string",
          },
          "screenshot": {
            "description": "URL of the screenshot of the page if the \`screenshot\` or \`screenshot@fullSize\` format was specified",
            "nullable": true,
            "type": "string",
          },
        },
        "type": "object",
      },
      "ScrapeResponse": {
        "properties": {
          "data": {
            "properties": {
              "html": {
                "description": "HTML version of the content on page if the \`html\` format was specified",
                "nullable": true,
                "type": "string",
              },
              "links": {
                "description": "Links on the page if the \`links\` format was specified",
                "items": {
                  "format": "uri",
                  "type": "string",
                },
                "nullable": true,
                "type": "array",
              },
              "markdown": {
                "description": "Markdown content of the page if the \`markdown\` format was specified (default)",
                "nullable": true,
                "type": "string",
              },
              "metadata": {
                "properties": {
                  "<any other metadata> ": {
                    "type": "string",
                  },
                  "description": {
                    "type": "string",
                  },
                  "error": {
                    "description": "The error message of the page",
                    "nullable": true,
                    "type": "string",
                  },
                  "language": {
                    "nullable": true,
                    "type": "string",
                  },
                  "sourceURL": {
                    "format": "uri",
                    "type": "string",
                  },
                  "statusCode": {
                    "description": "The status code of the page",
                    "type": "integer",
                  },
                  "title": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
              "rawHtml": {
                "description": "Raw HTML content of the page if the \`rawHtml\` format was specified",
                "nullable": true,
                "type": "string",
              },
              "screenshot": {
                "description": "URL of the screenshot of the page if the \`screenshot\` or \`screenshot@fullSize\` format was specified",
                "nullable": true,
                "type": "string",
              },
            },
            "type": "object",
          },
          "success": {
            "type": "boolean",
          },
          "warning": {
            "description": "Warning message to let you know of any issues.",
            "nullable": true,
            "type": "string",
          },
        },
        "type": "object",
      },
      "SearchResponse": {
        "properties": {
          "data": {
            "items": {
              "html": {
                "description": "HTML version of the content on page if the \`html\` format was specified",
                "nullable": true,
                "type": "string",
              },
              "links": {
                "description": "Links on the page if the \`links\` format was specified",
                "items": {
                  "format": "uri",
                  "type": "string",
                },
                "nullable": true,
                "type": "array",
              },
              "markdown": {
                "description": "Markdown content of the page if the \`markdown\` format was specified (default)",
                "nullable": true,
                "type": "string",
              },
              "metadata": {
                "properties": {
                  "<any other metadata> ": {
                    "type": "string",
                  },
                  "description": {
                    "type": "string",
                  },
                  "error": {
                    "description": "The error message of the page",
                    "nullable": true,
                    "type": "string",
                  },
                  "language": {
                    "nullable": true,
                    "type": "string",
                  },
                  "sourceURL": {
                    "format": "uri",
                    "type": "string",
                  },
                  "statusCode": {
                    "description": "The status code of the page",
                    "type": "integer",
                  },
                  "title": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
              "rawHtml": {
                "description": "Raw HTML content of the page if the \`rawHtml\` format was specified",
                "nullable": true,
                "type": "string",
              },
              "screenshot": {
                "description": "URL of the screenshot of the page if the \`screenshot\` or \`screenshot@fullSize\` format was specified",
                "nullable": true,
                "type": "string",
              },
            },
            "type": "array",
          },
          "success": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
    },
    "securitySchemes": {
      "bearerAuth": {
        "scheme": "bearer",
        "type": "http",
      },
    },
  },
  "info": {
    "contact": {
      "email": "support@firecrawl.dev",
      "name": "Firecrawl Support",
      "url": "https://firecrawl.dev/support",
    },
    "description": "API for interacting with Firecrawl services to perform web scraping and crawling tasks.",
    "title": "Firecrawl API",
    "version": "1.0.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/crawl": {
      "post": {
        "operationId": "crawlUrls",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "crawlerOptions": {
                    "properties": {
                      "allowBackwardCrawling": {
                        "default": false,
                        "description": "Enables the crawler to navigate from a specific URL to previously linked pages. For instance, from 'example.com/product/123' back to 'example.com/product'",
                        "type": "boolean",
                      },
                      "allowExternalContentLinks": {
                        "default": false,
                        "description": "Allows the crawler to follow links to external websites.",
                        "type": "boolean",
                      },
                      "excludes": {
                        "description": "URL patterns to exclude",
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "generateImgAltText": {
                        "default": false,
                        "description": "Generate alt text for images using LLMs (must have a paid plan)",
                        "type": "boolean",
                      },
                      "ignoreSitemap": {
                        "default": false,
                        "description": "Ignore the website sitemap when crawling",
                        "type": "boolean",
                      },
                      "includes": {
                        "description": "URL patterns to include",
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "limit": {
                        "default": 10000,
                        "description": "Maximum number of pages to crawl",
                        "type": "integer",
                      },
                      "maxDepth": {
                        "description": "Maximum depth to crawl relative to the entered URL. A maxDepth of 0 scrapes only the entered URL. A maxDepth of 1 scrapes the entered URL and all pages one level deep. A maxDepth of 2 scrapes the entered URL and all pages up to two levels deep. Higher values follow the same pattern.",
                        "type": "integer",
                      },
                      "mode": {
                        "default": "default",
                        "description": "The crawling mode to use. Fast mode crawls 4x faster websites without sitemap, but may not be as accurate and shouldn't be used in heavy js-rendered websites.",
                        "enum": [
                          "default",
                          "fast",
                        ],
                        "type": "string",
                      },
                      "returnOnlyUrls": {
                        "default": false,
                        "description": "If true, returns only the URLs as a list on the crawl status. Attention: the return response will be a list of URLs inside the data, not a list of documents.",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                  "pageOptions": {
                    "properties": {
                      "fullPageScreenshot": {
                        "default": false,
                        "description": "Include a full page screenshot of the page that you are scraping.",
                        "type": "boolean",
                      },
                      "headers": {
                        "description": "Headers to send with the request. Can be used to send cookies, user-agent, etc.",
                        "type": "object",
                      },
                      "includeHtml": {
                        "default": false,
                        "description": "Include the HTML version of the content on page. Will output a html key in the response.",
                        "type": "boolean",
                      },
                      "includeRawHtml": {
                        "default": false,
                        "description": "Include the raw HTML content of the page. Will output a rawHtml key in the response.",
                        "type": "boolean",
                      },
                      "onlyIncludeTags": {
                        "description": "Only include tags, classes and ids from the page in the final output. Use comma separated values. Example: 'script, .ad, #footer'",
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "onlyMainContent": {
                        "default": false,
                        "description": "Only return the main content of the page excluding headers, navs, footers, etc.",
                        "type": "boolean",
                      },
                      "removeTags": {
                        "description": "Tags, classes and ids to remove from the page. Use comma separated values. Example: 'script, .ad, #footer'",
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "replaceAllPathsWithAbsolutePaths": {
                        "default": false,
                        "description": "Replace all relative paths with absolute paths for images and links",
                        "type": "boolean",
                      },
                      "screenshot": {
                        "default": false,
                        "description": "Include a screenshot of the top of the page that you are scraping.",
                        "type": "boolean",
                      },
                      "waitFor": {
                        "default": 0,
                        "description": "Wait x amount of milliseconds for the page to load to fetch content",
                        "type": "integer",
                      },
                    },
                    "type": "object",
                  },
                  "url": {
                    "description": "The base URL to start crawling from",
                    "format": "uri",
                    "type": "string",
                  },
                },
                "required": [
                  "url",
                ],
                "type": "object",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrawlResponse",
                },
              },
            },
            "description": "Successful response",
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Payment required to access this resource.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Payment required",
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Request rate limit exceeded. Please wait and try again later.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Too many requests",
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "An unexpected error occurred on the server.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Server error",
          },
        },
        "security": [
          {
            "bearerAuth": [],
          },
        ],
        "summary": "Crawl multiple URLs based on options",
        "tags": [
          "Crawling",
        ],
      },
    },
    "/crawl/cancel/{jobId}": {
      "delete": {
        "operationId": "cancelCrawlJob",
        "parameters": [
          {
            "description": "ID of the crawl job",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "description": "Returns cancelled.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Payment required to access this resource.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Payment required",
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Request rate limit exceeded. Please wait and try again later.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Too many requests",
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "An unexpected error occurred on the server.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Server error",
          },
        },
        "security": [
          {
            "bearerAuth": [],
          },
        ],
        "summary": "Cancel a crawl job",
        "tags": [
          "Crawl",
        ],
      },
    },
    "/crawl/status/{jobId}": {
      "get": {
        "operationId": "getCrawlStatus",
        "parameters": [
          {
            "description": "ID of the crawl job",
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "current": {
                      "description": "Current page number",
                      "type": "integer",
                    },
                    "data": {
                      "description": "Data returned from the job (null when it is in progress)",
                      "items": {
                        "$ref": "#/components/schemas/CrawlStatusResponseObj",
                      },
                      "type": "array",
                    },
                    "partial_data": {
                      "description": "Partial documents returned as it is being crawled (streaming). **This feature is currently in alpha - expect breaking changes** When a page is ready, it will append to the partial_data array, so there is no need to wait for the entire website to be crawled. When the crawl is done, partial_data will become empty and the result will be available in \`data\`. There is a max of 50 items in the array response. The oldest item (top of the array) will be removed when the new item is added to the array.",
                      "items": {
                        "$ref": "#/components/schemas/CrawlStatusResponseObj",
                      },
                      "type": "array",
                    },
                    "status": {
                      "description": "Status of the job (completed, active, failed, paused)",
                      "type": "string",
                    },
                    "total": {
                      "description": "Total number of pages",
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Payment required to access this resource.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Payment required",
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Request rate limit exceeded. Please wait and try again later.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Too many requests",
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "An unexpected error occurred on the server.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Server error",
          },
        },
        "security": [
          {
            "bearerAuth": [],
          },
        ],
        "summary": "Get the status of a crawl job",
        "tags": [
          "Crawl",
        ],
      },
    },
    "/scrape": {
      "post": {
        "operationId": "scrape",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "excludeTags": {
                    "description": "Tags, classes and ids to remove from the page. Use comma separated values. Example: 'script, .ad, #footer'",
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "formats": {
                    "default": [
                      "markdown",
                    ],
                    "description": "Specific formats to return.

 - markdown: The page in Markdown format.
 - html: The page's HTML, trimmed to include only meaningful content.
 - rawHtml: The page's original HTML.
 - links: The links on the page.
 - screenshot: A screenshot of the top of the page.
 - screenshot@fullPage: A screenshot of the full page. (overridden by screenshot if present)",
                    "items": {
                      "enum": [
                        "markdown",
                        "html",
                        "rawHtml",
                        "links",
                        "screenshot",
                        "screenshot@fullPage",
                      ],
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "headers": {
                    "description": "Headers to send with the request. Can be used to send cookies, user-agent, etc.",
                    "type": "object",
                  },
                  "includeTags": {
                    "description": "Only include tags, classes and ids from the page in the final output. Use comma separated values. Example: 'script, .ad, #footer'",
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "onlyMainContent": {
                    "default": true,
                    "description": "Only return the main content of the page excluding headers, navs, footers, etc.",
                    "type": "boolean",
                  },
                  "timeout": {
                    "default": 30000,
                    "description": "Timeout in milliseconds for the request",
                    "type": "integer",
                  },
                  "url": {
                    "description": "The URL to scrape",
                    "format": "uri",
                    "type": "string",
                  },
                  "waitFor": {
                    "default": 0,
                    "description": "Wait x amount of milliseconds for the page to load to fetch content",
                    "type": "integer",
                  },
                },
                "required": [
                  "url",
                ],
                "type": "object",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScrapeResponse",
                },
              },
            },
            "description": "Successful response",
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Payment required to access this resource.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Payment required",
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Request rate limit exceeded. Please wait and try again later.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Too many requests",
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "An unexpected error occurred on the server.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Server error",
          },
        },
        "security": [
          {
            "bearerAuth": [],
          },
        ],
        "summary": "Scrape a single URL",
        "tags": [
          "Scraping",
        ],
      },
    },
    "/search": {
      "post": {
        "operationId": "searchGoogle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "pageOptions": {
                    "properties": {
                      "fetchPageContent": {
                        "default": true,
                        "description": "Fetch the content of each page. If false, defaults to a basic fast serp API.",
                        "type": "boolean",
                      },
                      "includeHtml": {
                        "default": false,
                        "description": "Include the HTML version of the content on page. Will output a html key in the response.",
                        "type": "boolean",
                      },
                      "includeRawHtml": {
                        "default": false,
                        "description": "Include the raw HTML content of the page. Will output a rawHtml key in the response.",
                        "type": "boolean",
                      },
                      "onlyMainContent": {
                        "default": false,
                        "description": "Only return the main content of the page excluding headers, navs, footers, etc.",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                  "query": {
                    "description": "The query to search for",
                    "format": "uri",
                    "type": "string",
                  },
                  "searchOptions": {
                    "properties": {
                      "limit": {
                        "description": "Maximum number of results. Max is 20 during beta.",
                        "type": "integer",
                      },
                    },
                    "type": "object",
                  },
                },
                "required": [
                  "query",
                ],
                "type": "object",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse",
                },
              },
            },
            "description": "Successful response",
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Payment required to access this resource.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Payment required",
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Request rate limit exceeded. Please wait and try again later.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Too many requests",
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "An unexpected error occurred on the server.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Server error",
          },
        },
        "security": [
          {
            "bearerAuth": [],
          },
        ],
        "summary": "Search for a keyword in Google, returns top page results with markdown content for each page",
        "tags": [
          "Search",
        ],
      },
    },
  },
  "security": [
    {
      "bearerAuth": [],
    },
  ],
  "servers": [
    {
      "url": "https://api.firecrawl.dev/v0",
    },
  ],
}
`;

exports[`validateOpenAPISpec > notion.json (file url) 1`] = `
{
  "components": {
    "schemas": {
      "AnnotationRequest": {
        "properties": {
          "bold": {
            "type": "boolean",
          },
          "code": {
            "type": "boolean",
          },
          "color": {
            "enum": [
              "default",
              "gray",
              "brown",
              "orange",
              "yellow",
              "green",
              "blue",
              "purple",
              "pink",
              "red",
              "gray_background",
              "brown_background",
              "orange_background",
              "yellow_background",
              "green_background",
              "blue_background",
              "purple_background",
              "pink_background",
              "red_background",
            ],
            "type": "string",
          },
          "italic": {
            "type": "boolean",
          },
          "strikethrough": {
            "type": "boolean",
          },
          "underline": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "AnnotationResponse": {
        "properties": {
          "bold": {
            "type": "boolean",
          },
          "code": {
            "type": "boolean",
          },
          "color": {
            "enum": [
              "default",
              "gray",
              "brown",
              "orange",
              "yellow",
              "green",
              "blue",
              "purple",
              "pink",
              "red",
              "gray_background",
              "brown_background",
              "orange_background",
              "yellow_background",
              "green_background",
              "blue_background",
              "purple_background",
              "pink_background",
              "red_background",
            ],
            "type": "string",
          },
          "italic": {
            "type": "boolean",
          },
          "strikethrough": {
            "type": "boolean",
          },
          "underline": {
            "type": "boolean",
          },
        },
        "required": [
          "bold",
          "italic",
          "strikethrough",
          "underline",
          "code",
          "color",
        ],
        "type": "object",
      },
      "AppendBlockChildrenParameters": {
        "properties": {
          "children": {
            "items": {
              "$ref": "#/components/schemas/BlockObjectRequest",
            },
            "type": "array",
          },
        },
        "required": [
          "children",
        ],
        "type": "object",
      },
      "AppendBlockChildrenResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "object": {
            "enum": [
              "list",
            ],
            "type": "string",
          },
          "results": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PartialBlockObjectResponse",
                },
                {
                  "$ref": "#/components/schemas/BlockObjectResponse",
                },
              ],
            },
            "type": "array",
          },
        },
        "required": [
          "object",
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "BlockObjectRequest": {
        "oneOf": [
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "paragraph": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "paragraph",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "paragraph",
            ],
            "type": "object",
          },
          {
            "properties": {
              "heading_1": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "heading_1",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "heading_1",
            ],
            "type": "object",
          },
          {
            "properties": {
              "heading_2": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "heading_2",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "heading_2",
            ],
            "type": "object",
          },
          {
            "properties": {
              "heading_3": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "heading_3",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "heading_3",
            ],
            "type": "object",
          },
          {
            "properties": {
              "bulleted_list_item": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "bulleted_list_item",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "bulleted_list_item",
            ],
            "type": "object",
          },
          {
            "properties": {
              "numbered_list_item": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "numbered_list_item",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "numbered_list_item",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "to_do": {
                "properties": {
                  "checked": {
                    "type": "boolean",
                  },
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                  "checked",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "to_do",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "to_do",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "toggle": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "toggle",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "toggle",
            ],
            "type": "object",
          },
          {
            "properties": {
              "code": {
                "properties": {
                  "caption": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                  "language": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                  "language",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "code",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "code",
            ],
            "type": "object",
          },
          {
            "properties": {
              "child_page": {
                "properties": {
                  "title": {
                    "type": "string",
                  },
                },
                "required": [
                  "title",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "child_page",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "child_page",
            ],
            "type": "object",
          },
          {
            "properties": {
              "child_database": {
                "properties": {
                  "title": {
                    "type": "string",
                  },
                },
                "required": [
                  "title",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "child_database",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "child_database",
            ],
            "type": "object",
          },
          {
            "properties": {
              "embed": {
                "properties": {
                  "caption": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                  "url": {
                    "type": "string",
                  },
                },
                "required": [
                  "url",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "embed",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "embed",
            ],
            "type": "object",
          },
          {
            "properties": {
              "image": {
                "properties": {
                  "caption": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                },
                "required": [
                  "external",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "image",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "image",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "video",
                ],
                "type": "string",
              },
              "video": {
                "properties": {
                  "caption": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                },
                "required": [
                  "external",
                ],
                "type": "object",
              },
            },
            "required": [
              "object",
              "type",
              "video",
            ],
            "type": "object",
          },
          {
            "properties": {
              "file": {
                "properties": {
                  "caption": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                },
                "required": [
                  "external",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "file",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "file",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "pdf": {
                "properties": {
                  "caption": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                },
                "required": [
                  "external",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "pdf",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "pdf",
            ],
            "type": "object",
          },
          {
            "properties": {
              "bookmark": {
                "properties": {
                  "caption": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                  "url": {
                    "type": "string",
                  },
                },
                "required": [
                  "url",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "bookmark",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "bookmark",
            ],
            "type": "object",
          },
          {
            "properties": {
              "equation": {
                "properties": {
                  "expression": {
                    "type": "string",
                  },
                },
                "required": [
                  "expression",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "equation",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "equation",
            ],
            "type": "object",
          },
          {
            "properties": {
              "divider": {
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "divider",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "divider",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "table_of_contents": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
              "type": {
                "enum": [
                  "table_of_contents",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "table_of_contents",
            ],
            "type": "object",
          },
          {
            "properties": {
              "column_list": {
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "column_list",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "column_list",
            ],
            "type": "object",
          },
          {
            "properties": {
              "column": {
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "column",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "column",
            ],
            "type": "object",
          },
          {
            "properties": {
              "link_to_page": {
                "oneOf": [
                  {
                    "properties": {
                      "page_id": {
                        "type": "string",
                      },
                      "type": {
                        "enum": [
                          "page_id",
                        ],
                        "type": "string",
                      },
                    },
                    "required": [
                      "type",
                      "page_id",
                    ],
                    "type": "object",
                  },
                  {
                    "properties": {
                      "database_id": {
                        "type": "string",
                      },
                      "type": {
                        "enum": [
                          "database_id",
                        ],
                        "type": "string",
                      },
                    },
                    "required": [
                      "type",
                      "database_id",
                    ],
                    "type": "object",
                  },
                ],
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "link_to_page",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "link_to_page",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "table": {
                "properties": {
                  "children": {
                    "items": {
                      "$ref": "#/components/schemas/BlockObjectRequest",
                    },
                    "type": "array",
                  },
                  "has_column_header": {
                    "type": "boolean",
                  },
                  "has_row_header": {
                    "type": "boolean",
                  },
                  "table_width": {
                    "type": "integer",
                  },
                },
                "required": [
                  "table_width",
                  "children",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "table",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "table",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "table_row": {
                "properties": {
                  "cells": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/RichTextItemRequest",
                      },
                      "type": "array",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "cells",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "table_row",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "table_row",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "synced_block": {
                "properties": {
                  "children": {
                    "items": {
                      "$ref": "#/components/schemas/BlockObjectRequest",
                    },
                    "type": "array",
                  },
                  "synced_from": {
                    "oneOf": [
                      {
                        "properties": {
                          "block_id": {
                            "type": "string",
                          },
                          "type": {
                            "enum": [
                              "block_id",
                            ],
                            "type": "string",
                          },
                        },
                        "required": [
                          "type",
                          "block_id",
                        ],
                        "type": "object",
                      },
                      {
                        "type": "null",
                      },
                    ],
                  },
                },
                "type": "object",
              },
              "type": {
                "enum": [
                  "synced_block",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "synced_block",
            ],
            "type": "object",
          },
        ],
      },
      "BlockObjectResponse": {
        "properties": {
          "archived": {
            "type": "boolean",
          },
          "created_time": {
            "type": "string",
          },
          "has_children": {
            "type": "boolean",
          },
          "id": {
            "type": "string",
          },
          "last_edited_time": {
            "type": "string",
          },
          "object": {
            "enum": [
              "block",
            ],
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
          "type",
          "created_time",
          "last_edited_time",
          "has_children",
          "archived",
        ],
        "type": "object",
      },
      "CheckboxPropertyFilter": {
        "properties": {
          "does_not_equal": {
            "type": "boolean",
          },
          "equals": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "CheckboxPropertyResponse": {
        "properties": {
          "checkbox": {
            "type": "object",
          },
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "checkbox",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "checkbox",
        ],
        "type": "object",
      },
      "CommentObjectResponse": {
        "properties": {
          "created_by": {
            "$ref": "#/components/schemas/PartialUserObjectResponse",
          },
          "created_time": {
            "type": "string",
          },
          "discussion_id": {
            "type": "string",
          },
          "id": {
            "type": "string",
          },
          "last_edited_time": {
            "type": "string",
          },
          "object": {
            "enum": [
              "comment",
            ],
            "type": "string",
          },
          "parent": {
            "oneOf": [
              {
                "properties": {
                  "page_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "page_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "page_id",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "block_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "block_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "block_id",
                ],
                "type": "object",
              },
            ],
          },
          "rich_text": {
            "items": {
              "$ref": "#/components/schemas/RichTextItemResponse",
            },
            "type": "array",
          },
        },
        "required": [
          "object",
          "id",
          "parent",
          "discussion_id",
          "rich_text",
          "created_by",
          "created_time",
          "last_edited_time",
        ],
        "type": "object",
      },
      "CompoundFilter": {
        "properties": {
          "and": {
            "items": {
              "$ref": "#/components/schemas/PropertyFilter",
            },
            "type": "array",
          },
          "or": {
            "items": {
              "$ref": "#/components/schemas/PropertyFilter",
            },
            "type": "array",
          },
        },
        "type": "object",
      },
      "CreateCommentParameters": {
        "oneOf": [
          {
            "properties": {
              "parent": {
                "properties": {
                  "page_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "page_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "page_id",
                ],
                "type": "object",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "required": [
              "parent",
              "rich_text",
            ],
            "type": "object",
          },
          {
            "properties": {
              "discussion_id": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "required": [
              "discussion_id",
              "rich_text",
            ],
            "type": "object",
          },
        ],
      },
      "CreateDatabaseParameters": {
        "properties": {
          "cover": {
            "oneOf": [
              {
                "properties": {
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "external",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "external",
                ],
                "type": "object",
              },
              {
                "type": "null",
              },
            ],
          },
          "description": {
            "items": {
              "$ref": "#/components/schemas/RichTextItemRequest",
            },
            "type": "array",
          },
          "icon": {
            "oneOf": [
              {
                "properties": {
                  "emoji": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "emoji",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "emoji",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "external",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "external",
                ],
                "type": "object",
              },
              {
                "type": "null",
              },
            ],
          },
          "is_inline": {
            "type": "boolean",
          },
          "parent": {
            "oneOf": [
              {
                "properties": {
                  "page_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "page_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "page_id",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "database_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "database_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "database_id",
                ],
                "type": "object",
              },
            ],
          },
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/PropertySchema",
            },
            "type": "object",
          },
          "title": {
            "items": {
              "$ref": "#/components/schemas/RichTextItemRequest",
            },
            "type": "array",
          },
        },
        "required": [
          "parent",
          "properties",
          "title",
        ],
        "type": "object",
      },
      "CreatePageParameters": {
        "properties": {
          "parent": {
            "oneOf": [
              {
                "properties": {
                  "page_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "page_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "page_id",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "database_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "database_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "database_id",
                ],
                "type": "object",
              },
            ],
            "type": "object",
          },
          "properties": {
            "additionalProperties": {
              "oneOf": [
                {
                  "properties": {
                    "title": {
                      "items": {
                        "$ref": "#/components/schemas/RichTextItemRequest",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "title",
                  ],
                  "type": "object",
                },
                {
                  "properties": {
                    "rich_text": {
                      "items": {
                        "$ref": "#/components/schemas/RichTextItemRequest",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "rich_text",
                  ],
                  "type": "object",
                },
                {
                  "properties": {
                    "number": {
                      "type": [
                        "number",
                        "null",
                      ],
                    },
                  },
                  "required": [
                    "number",
                  ],
                  "type": "object",
                },
                {
                  "properties": {
                    "select": {
                      "properties": {
                        "name": {
                          "type": "string",
                        },
                      },
                      "required": [
                        "name",
                      ],
                      "type": [
                        "object",
                        "null",
                      ],
                    },
                  },
                  "required": [
                    "select",
                  ],
                  "type": "object",
                },
              ],
            },
            "type": "object",
          },
        },
        "required": [
          "parent",
          "properties",
        ],
        "type": "object",
      },
      "CreatedByPropertyResponse": {
        "properties": {
          "created_by": {
            "type": "object",
          },
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "created_by",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "created_by",
        ],
        "type": "object",
      },
      "CreatedTimePropertyResponse": {
        "properties": {
          "created_time": {
            "type": "object",
          },
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "created_time",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "created_time",
        ],
        "type": "object",
      },
      "DatabaseObjectResponse": {
        "properties": {
          "archived": {
            "type": "boolean",
          },
          "cover": {
            "oneOf": [
              {
                "properties": {
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "external",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "external",
                ],
                "type": "object",
              },
              {
                "type": "null",
              },
            ],
          },
          "created_by": {
            "$ref": "#/components/schemas/PartialUserObjectResponse",
          },
          "created_time": {
            "type": "string",
          },
          "description": {
            "items": {
              "$ref": "#/components/schemas/RichTextItemResponse",
            },
            "type": "array",
          },
          "icon": {
            "oneOf": [
              {
                "properties": {
                  "emoji": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "emoji",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "emoji",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "external",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "external",
                ],
                "type": "object",
              },
              {
                "type": "null",
              },
            ],
          },
          "id": {
            "type": "string",
          },
          "is_inline": {
            "type": "boolean",
          },
          "last_edited_by": {
            "$ref": "#/components/schemas/PartialUserObjectResponse",
          },
          "last_edited_time": {
            "type": "string",
          },
          "object": {
            "enum": [
              "database",
            ],
            "type": "string",
          },
          "parent": {
            "oneOf": [
              {
                "properties": {
                  "page_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "page_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "page_id",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "workspace",
                    ],
                    "type": "string",
                  },
                  "workspace": {
                    "enum": [
                      true,
                    ],
                    "type": "boolean",
                  },
                },
                "required": [
                  "type",
                  "workspace",
                ],
                "type": "object",
              },
            ],
          },
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/DatabasePropertyConfigResponse",
            },
            "type": "object",
          },
          "title": {
            "items": {
              "$ref": "#/components/schemas/RichTextItemResponse",
            },
            "type": "array",
          },
          "url": {
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
          "created_time",
          "created_by",
          "last_edited_time",
          "last_edited_by",
          "title",
          "description",
          "is_inline",
          "properties",
          "parent",
          "url",
          "archived",
        ],
        "type": "object",
      },
      "DatabasePropertyConfigResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TitlePropertyResponse",
          },
          {
            "$ref": "#/components/schemas/RichTextPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/NumberPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/SelectPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/MultiSelectPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/DatePropertyResponse",
          },
          {
            "$ref": "#/components/schemas/PeoplePropertyResponse",
          },
          {
            "$ref": "#/components/schemas/FilePropertyResponse",
          },
          {
            "$ref": "#/components/schemas/CheckboxPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/URLPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/EmailPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/PhoneNumberPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/FormulaPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/RelationPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/RollupPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/CreatedTimePropertyResponse",
          },
          {
            "$ref": "#/components/schemas/CreatedByPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/LastEditedTimePropertyResponse",
          },
          {
            "$ref": "#/components/schemas/LastEditedByPropertyResponse",
          },
        ],
      },
      "DatePropertyFilter": {
        "properties": {
          "after": {
            "type": "string",
          },
          "before": {
            "type": "string",
          },
          "equals": {
            "type": "string",
          },
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
          "next_month": {},
          "next_week": {},
          "next_year": {},
          "on_or_after": {
            "type": "string",
          },
          "on_or_before": {
            "type": "string",
          },
          "past_month": {},
          "past_week": {},
          "past_year": {},
        },
        "type": "object",
      },
      "DatePropertyResponse": {
        "properties": {
          "date": {
            "type": "object",
          },
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "date",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "date",
        ],
        "type": "object",
      },
      "DateRequest": {
        "properties": {
          "end": {
            "type": [
              "string",
              "null",
            ],
          },
          "start": {
            "type": "string",
          },
          "time_zone": {
            "type": [
              "string",
              "null",
            ],
          },
        },
        "required": [
          "start",
        ],
        "type": "object",
      },
      "DateResponse": {
        "properties": {
          "end": {
            "type": [
              "string",
              "null",
            ],
          },
          "start": {
            "type": "string",
          },
          "time_zone": {
            "type": [
              "string",
              "null",
            ],
          },
        },
        "required": [
          "start",
          "end",
          "time_zone",
        ],
        "type": "object",
      },
      "EmailPropertyResponse": {
        "properties": {
          "email": {
            "type": "object",
          },
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "email",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "email",
        ],
        "type": "object",
      },
      "EquationRichTextItemResponse": {
        "properties": {
          "annotations": {
            "$ref": "#/components/schemas/AnnotationResponse",
          },
          "equation": {
            "properties": {
              "expression": {
                "type": "string",
              },
            },
            "required": [
              "expression",
            ],
            "type": "object",
          },
          "href": {
            "type": [
              "string",
              "null",
            ],
          },
          "plain_text": {
            "type": "string",
          },
          "type": {
            "enum": [
              "equation",
            ],
            "type": "string",
          },
        },
        "required": [
          "type",
          "equation",
          "annotations",
          "plain_text",
          "href",
        ],
        "type": "object",
      },
      "FilePropertyResponse": {
        "properties": {
          "files": {
            "type": "object",
          },
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "files",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "files",
        ],
        "type": "object",
      },
      "FilesPropertyFilter": {
        "properties": {
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "FormulaPropertyResponse": {
        "properties": {
          "formula": {
            "properties": {
              "expression": {
                "type": "string",
              },
            },
            "required": [
              "expression",
            ],
            "type": "object",
          },
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "formula",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "formula",
        ],
        "type": "object",
      },
      "LastEditedByPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "last_edited_by": {
            "type": "object",
          },
          "type": {
            "enum": [
              "last_edited_by",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "last_edited_by",
        ],
        "type": "object",
      },
      "LastEditedTimePropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "last_edited_time": {
            "type": "object",
          },
          "type": {
            "enum": [
              "last_edited_time",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "last_edited_time",
        ],
        "type": "object",
      },
      "ListBlockChildrenResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "object": {
            "enum": [
              "list",
            ],
            "type": "string",
          },
          "results": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PartialBlockObjectResponse",
                },
                {
                  "$ref": "#/components/schemas/BlockObjectResponse",
                },
              ],
            },
            "type": "array",
          },
        },
        "required": [
          "object",
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "ListCommentsResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "object": {
            "enum": [
              "list",
            ],
            "type": "string",
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/CommentObjectResponse",
            },
            "type": "array",
          },
        },
        "required": [
          "object",
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "ListDatabasesResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "object": {
            "enum": [
              "list",
            ],
            "type": "string",
          },
          "results": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PartialDatabaseObjectResponse",
                },
                {
                  "$ref": "#/components/schemas/DatabaseObjectResponse",
                },
              ],
            },
            "type": "array",
          },
        },
        "required": [
          "object",
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "ListUsersResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/UserObjectResponse",
            },
            "type": "array",
          },
        },
        "required": [
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "MentionRichTextItemResponse": {
        "properties": {
          "annotations": {
            "$ref": "#/components/schemas/AnnotationResponse",
          },
          "href": {
            "type": [
              "string",
              "null",
            ],
          },
          "mention": {
            "oneOf": [
              {
                "properties": {
                  "type": {
                    "enum": [
                      "user",
                    ],
                    "type": "string",
                  },
                  "user": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/PartialUserObjectResponse",
                      },
                      {
                        "$ref": "#/components/schemas/UserObjectResponse",
                      },
                    ],
                  },
                },
                "required": [
                  "type",
                  "user",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "date": {
                    "$ref": "#/components/schemas/DateResponse",
                  },
                  "type": {
                    "enum": [
                      "date",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "date",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "link_preview": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "link_preview",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "link_preview",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "page": {
                    "properties": {
                      "id": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "id",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "page",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "page",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "database": {
                    "properties": {
                      "id": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "id",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "database",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "database",
                ],
                "type": "object",
              },
            ],
          },
          "plain_text": {
            "type": "string",
          },
          "type": {
            "enum": [
              "mention",
            ],
            "type": "string",
          },
        },
        "required": [
          "type",
          "mention",
          "annotations",
          "plain_text",
          "href",
        ],
        "type": "object",
      },
      "MultiSelectPropertyFilter": {
        "properties": {
          "contains": {
            "type": "string",
          },
          "does_not_contain": {
            "type": "string",
          },
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "MultiSelectPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "multi_select": {
            "properties": {
              "options": {
                "items": {
                  "$ref": "#/components/schemas/SelectOption",
                },
                "type": "array",
              },
            },
            "required": [
              "options",
            ],
            "type": "object",
          },
          "type": {
            "enum": [
              "multi_select",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "multi_select",
        ],
        "type": "object",
      },
      "NumberPropertyFilter": {
        "properties": {
          "does_not_equal": {
            "type": "number",
          },
          "equals": {
            "type": "number",
          },
          "greater_than": {
            "type": "number",
          },
          "greater_than_or_equal_to": {
            "type": "number",
          },
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
          "less_than": {
            "type": "number",
          },
          "less_than_or_equal_to": {
            "type": "number",
          },
        },
        "type": "object",
      },
      "NumberPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "number": {
            "properties": {
              "format": {
                "type": "string",
              },
            },
            "required": [
              "format",
            ],
            "type": "object",
          },
          "type": {
            "enum": [
              "number",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "number",
        ],
        "type": "object",
      },
      "OauthTokenParameters": {
        "properties": {
          "code": {
            "type": "string",
          },
          "external_account": {
            "properties": {
              "key": {
                "type": "string",
              },
              "name": {
                "type": "string",
              },
            },
            "required": [
              "key",
              "name",
            ],
            "type": "object",
          },
          "grant_type": {
            "type": "string",
          },
          "redirect_uri": {
            "type": "string",
          },
        },
        "required": [
          "grant_type",
          "code",
        ],
        "type": "object",
      },
      "OauthTokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
          },
          "bot_id": {
            "type": "string",
          },
          "duplicated_template_id": {
            "type": [
              "string",
              "null",
            ],
          },
          "owner": {
            "oneOf": [
              {
                "properties": {
                  "type": {
                    "enum": [
                      "user",
                    ],
                    "type": "string",
                  },
                  "user": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/UserObjectResponse",
                      },
                      {
                        "$ref": "#/components/schemas/PartialUserObjectResponse",
                      },
                    ],
                  },
                },
                "required": [
                  "type",
                  "user",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "workspace",
                    ],
                    "type": "string",
                  },
                  "workspace": {
                    "enum": [
                      true,
                    ],
                    "type": "boolean",
                  },
                },
                "required": [
                  "type",
                  "workspace",
                ],
                "type": "object",
              },
            ],
          },
          "token_type": {
            "enum": [
              "bearer",
            ],
            "type": "string",
          },
          "workspace_icon": {
            "type": [
              "string",
              "null",
            ],
          },
          "workspace_id": {
            "type": "string",
          },
          "workspace_name": {
            "type": [
              "string",
              "null",
            ],
          },
        },
        "required": [
          "access_token",
          "token_type",
          "bot_id",
          "workspace_name",
          "workspace_icon",
          "workspace_id",
          "owner",
          "duplicated_template_id",
        ],
        "type": "object",
      },
      "PageObjectResponse": {
        "properties": {
          "archived": {
            "type": "boolean",
          },
          "created_time": {
            "type": "string",
          },
          "id": {
            "type": "string",
          },
          "last_edited_time": {
            "type": "string",
          },
          "object": {
            "enum": [
              "page",
            ],
            "type": "string",
          },
          "url": {
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
          "created_time",
          "last_edited_time",
          "archived",
          "url",
        ],
        "type": "object",
      },
      "PartialBlockObjectResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "object": {
            "enum": [
              "block",
            ],
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
        ],
        "type": "object",
      },
      "PartialCommentObjectResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "object": {
            "enum": [
              "comment",
            ],
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
        ],
        "type": "object",
      },
      "PartialDatabaseObjectResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "object": {
            "enum": [
              "database",
            ],
            "type": "string",
          },
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/DatabasePropertyConfigResponse",
            },
            "type": "object",
          },
        },
        "required": [
          "object",
          "id",
          "properties",
        ],
        "type": "object",
      },
      "PartialPageObjectResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "object": {
            "enum": [
              "page",
            ],
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
        ],
        "type": "object",
      },
      "PartialUserObjectResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "object": {
            "enum": [
              "user",
            ],
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
        ],
        "type": "object",
      },
      "PeoplePropertyFilter": {
        "properties": {
          "contains": {
            "type": "string",
          },
          "does_not_contain": {
            "type": "string",
          },
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "PeoplePropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "people": {
            "type": "object",
          },
          "type": {
            "enum": [
              "people",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "people",
        ],
        "type": "object",
      },
      "PhoneNumberPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "phone_number": {
            "type": "object",
          },
          "type": {
            "enum": [
              "phone_number",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "phone_number",
        ],
        "type": "object",
      },
      "PropertyFilter": {
        "oneOf": [
          {
            "properties": {
              "property": {
                "type": "string",
              },
              "title": {
                "$ref": "#/components/schemas/TextPropertyFilter",
              },
            },
            "required": [
              "property",
              "title",
            ],
            "type": "object",
          },
          {
            "properties": {
              "property": {
                "type": "string",
              },
              "rich_text": {
                "$ref": "#/components/schemas/TextPropertyFilter",
              },
            },
            "required": [
              "property",
              "rich_text",
            ],
            "type": "object",
          },
          {
            "properties": {
              "number": {
                "$ref": "#/components/schemas/NumberPropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "number",
            ],
            "type": "object",
          },
          {
            "properties": {
              "checkbox": {
                "$ref": "#/components/schemas/CheckboxPropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "checkbox",
            ],
            "type": "object",
          },
          {
            "properties": {
              "property": {
                "type": "string",
              },
              "select": {
                "$ref": "#/components/schemas/SelectPropertyFilter",
              },
            },
            "required": [
              "property",
              "select",
            ],
            "type": "object",
          },
          {
            "properties": {
              "multi_select": {
                "$ref": "#/components/schemas/MultiSelectPropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "multi_select",
            ],
            "type": "object",
          },
          {
            "properties": {
              "date": {
                "$ref": "#/components/schemas/DatePropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "date",
            ],
            "type": "object",
          },
          {
            "properties": {
              "people": {
                "$ref": "#/components/schemas/PeoplePropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "people",
            ],
            "type": "object",
          },
          {
            "properties": {
              "files": {
                "$ref": "#/components/schemas/FilesPropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "files",
            ],
            "type": "object",
          },
          {
            "properties": {
              "property": {
                "type": "string",
              },
              "url": {
                "$ref": "#/components/schemas/TextPropertyFilter",
              },
            },
            "required": [
              "property",
              "url",
            ],
            "type": "object",
          },
          {
            "properties": {
              "email": {
                "$ref": "#/components/schemas/TextPropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "email",
            ],
            "type": "object",
          },
          {
            "properties": {
              "phone_number": {
                "$ref": "#/components/schemas/TextPropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "phone_number",
            ],
            "type": "object",
          },
          {
            "properties": {
              "property": {
                "type": "string",
              },
              "relation": {
                "$ref": "#/components/schemas/RelationPropertyFilter",
              },
            },
            "required": [
              "property",
              "relation",
            ],
            "type": "object",
          },
          {
            "properties": {
              "created_by": {
                "$ref": "#/components/schemas/PeoplePropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "created_by",
            ],
            "type": "object",
          },
          {
            "properties": {
              "created_time": {
                "$ref": "#/components/schemas/DatePropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "created_time",
            ],
            "type": "object",
          },
          {
            "properties": {
              "last_edited_by": {
                "$ref": "#/components/schemas/PeoplePropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "last_edited_by",
            ],
            "type": "object",
          },
          {
            "properties": {
              "last_edited_time": {
                "$ref": "#/components/schemas/DatePropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "last_edited_time",
            ],
            "type": "object",
          },
          {
            "properties": {
              "created_time": {
                "$ref": "#/components/schemas/DatePropertyFilter",
              },
              "timestamp": {
                "enum": [
                  "created_time",
                  "last_edited_time",
                ],
                "type": "string",
              },
            },
            "required": [
              "timestamp",
              "created_time",
            ],
            "type": "object",
          },
          {
            "properties": {
              "last_edited_time": {
                "$ref": "#/components/schemas/DatePropertyFilter",
              },
              "timestamp": {
                "enum": [
                  "created_time",
                  "last_edited_time",
                ],
                "type": "string",
              },
            },
            "required": [
              "timestamp",
              "last_edited_time",
            ],
            "type": "object",
          },
        ],
      },
      "PropertyItemListResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/PropertyItemObjectResponse",
            },
            "type": "array",
          },
        },
        "required": [
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "PropertyItemObjectResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "required": [
          "type",
          "id",
        ],
        "type": "object",
      },
      "PropertySchema": {
        "properties": {
          "name": {
            "type": [
              "string",
              "null",
            ],
          },
          "type": {
            "type": "string",
          },
        },
        "required": [
          "type",
        ],
        "type": "object",
      },
      "PropertyUpdateSchema": {
        "properties": {
          "name": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "QueryDatabaseParameters": {
        "properties": {
          "archived": {
            "type": "boolean",
          },
          "filter": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PropertyFilter",
              },
              {
                "$ref": "#/components/schemas/CompoundFilter",
              },
            ],
          },
          "page_size": {
            "type": "integer",
          },
          "sorts": {
            "items": {
              "oneOf": [
                {
                  "properties": {
                    "direction": {
                      "enum": [
                        "ascending",
                        "descending",
                      ],
                      "type": "string",
                    },
                    "property": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "property",
                    "direction",
                  ],
                  "type": "object",
                },
                {
                  "properties": {
                    "direction": {
                      "enum": [
                        "ascending",
                        "descending",
                      ],
                      "type": "string",
                    },
                    "timestamp": {
                      "enum": [
                        "created_time",
                        "last_edited_time",
                      ],
                      "type": "string",
                    },
                  },
                  "required": [
                    "timestamp",
                    "direction",
                  ],
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
          "start_cursor": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "QueryDatabaseResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "object": {
            "enum": [
              "list",
            ],
            "type": "string",
          },
          "results": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PageObjectResponse",
                },
                {
                  "$ref": "#/components/schemas/PartialPageObjectResponse",
                },
              ],
            },
            "type": "array",
          },
        },
        "required": [
          "object",
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "RelationPropertyFilter": {
        "properties": {
          "contains": {
            "type": "string",
          },
          "does_not_contain": {
            "type": "string",
          },
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "RelationPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "relation": {
            "properties": {
              "database_id": {
                "type": "string",
              },
              "synced_property_id": {
                "type": "string",
              },
              "synced_property_name": {
                "type": "string",
              },
            },
            "required": [
              "database_id",
              "synced_property_name",
              "synced_property_id",
            ],
            "type": "object",
          },
          "type": {
            "enum": [
              "relation",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "relation",
        ],
        "type": "object",
      },
      "RichTextItemRequest": {
        "oneOf": [
          {
            "properties": {
              "annotations": {
                "$ref": "#/components/schemas/AnnotationRequest",
              },
              "text": {
                "properties": {
                  "content": {
                    "type": "string",
                  },
                  "link": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": [
                      "object",
                      "null",
                    ],
                  },
                },
                "required": [
                  "content",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "text",
                ],
                "type": "string",
              },
            },
            "required": [
              "text",
            ],
            "type": "object",
          },
          {
            "properties": {
              "annotations": {
                "$ref": "#/components/schemas/AnnotationRequest",
              },
              "mention": {
                "oneOf": [
                  {
                    "properties": {
                      "user": {
                        "oneOf": [
                          {
                            "properties": {
                              "id": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "id",
                            ],
                            "type": "object",
                          },
                          {
                            "$ref": "#/components/schemas/UserObjectResponse",
                          },
                        ],
                      },
                    },
                    "required": [
                      "user",
                    ],
                    "type": "object",
                  },
                  {
                    "properties": {
                      "page": {
                        "properties": {
                          "id": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "id",
                        ],
                        "type": "object",
                      },
                    },
                    "required": [
                      "page",
                    ],
                    "type": "object",
                  },
                  {
                    "properties": {
                      "database": {
                        "properties": {
                          "id": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "id",
                        ],
                        "type": "object",
                      },
                    },
                    "required": [
                      "database",
                    ],
                    "type": "object",
                  },
                  {
                    "properties": {
                      "date": {
                        "$ref": "#/components/schemas/DateRequest",
                      },
                    },
                    "required": [
                      "date",
                    ],
                    "type": "object",
                  },
                ],
              },
              "type": {
                "enum": [
                  "mention",
                ],
                "type": "string",
              },
            },
            "required": [
              "mention",
            ],
            "type": "object",
          },
          {
            "properties": {
              "annotations": {
                "$ref": "#/components/schemas/AnnotationRequest",
              },
              "equation": {
                "properties": {
                  "expression": {
                    "type": "string",
                  },
                },
                "required": [
                  "expression",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "equation",
                ],
                "type": "string",
              },
            },
            "required": [
              "equation",
            ],
            "type": "object",
          },
        ],
      },
      "RichTextItemResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TextRichTextItemResponse",
          },
          {
            "$ref": "#/components/schemas/MentionRichTextItemResponse",
          },
          {
            "$ref": "#/components/schemas/EquationRichTextItemResponse",
          },
        ],
      },
      "RichTextPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "rich_text": {
            "type": "object",
          },
          "type": {
            "enum": [
              "rich_text",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "rich_text",
        ],
        "type": "object",
      },
      "RollupPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "rollup": {
            "properties": {
              "function": {
                "type": "string",
              },
              "relation_property_id": {
                "type": "string",
              },
              "relation_property_name": {
                "type": "string",
              },
              "rollup_property_id": {
                "type": "string",
              },
              "rollup_property_name": {
                "type": "string",
              },
            },
            "required": [
              "relation_property_name",
              "relation_property_id",
              "rollup_property_name",
              "rollup_property_id",
              "function",
            ],
            "type": "object",
          },
          "type": {
            "enum": [
              "rollup",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "rollup",
        ],
        "type": "object",
      },
      "SearchParameters": {
        "properties": {
          "filter": {
            "properties": {
              "property": {
                "enum": [
                  "object",
                ],
                "type": "string",
              },
              "value": {
                "enum": [
                  "page",
                  "database",
                ],
                "type": "string",
              },
            },
            "required": [
              "value",
              "property",
            ],
            "type": "object",
          },
          "page_size": {
            "type": "integer",
          },
          "query": {
            "type": "string",
          },
          "sort": {
            "properties": {
              "direction": {
                "enum": [
                  "ascending",
                  "descending",
                ],
                "type": "string",
              },
              "timestamp": {
                "enum": [
                  "last_edited_time",
                ],
                "type": "string",
              },
            },
            "required": [
              "direction",
              "timestamp",
            ],
            "type": "object",
          },
          "start_cursor": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "SearchResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "object": {
            "enum": [
              "list",
            ],
            "type": "string",
          },
          "results": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PageObjectResponse",
                },
                {
                  "$ref": "#/components/schemas/PartialPageObjectResponse",
                },
                {
                  "$ref": "#/components/schemas/PartialDatabaseObjectResponse",
                },
                {
                  "$ref": "#/components/schemas/DatabaseObjectResponse",
                },
              ],
            },
            "type": "array",
          },
        },
        "required": [
          "object",
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "SelectOption": {
        "properties": {
          "color": {
            "type": "string",
          },
          "id": {
            "type": "string",
          },
          "name": {
            "type": "string",
          },
        },
        "required": [
          "id",
          "name",
          "color",
        ],
        "type": "object",
      },
      "SelectPropertyFilter": {
        "properties": {
          "does_not_equal": {
            "type": "string",
          },
          "equals": {
            "type": "string",
          },
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "SelectPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "select": {
            "properties": {
              "options": {
                "items": {
                  "$ref": "#/components/schemas/SelectOption",
                },
                "type": "array",
              },
            },
            "required": [
              "options",
            ],
            "type": "object",
          },
          "type": {
            "enum": [
              "select",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "select",
        ],
        "type": "object",
      },
      "TextPropertyFilter": {
        "properties": {
          "contains": {
            "type": "string",
          },
          "does_not_contain": {
            "type": "string",
          },
          "does_not_equal": {
            "type": "string",
          },
          "ends_with": {
            "type": "string",
          },
          "equals": {
            "type": "string",
          },
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
          "starts_with": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "TextRichTextItemResponse": {
        "properties": {
          "annotations": {
            "$ref": "#/components/schemas/AnnotationResponse",
          },
          "href": {
            "type": [
              "string",
              "null",
            ],
          },
          "plain_text": {
            "type": "string",
          },
          "text": {
            "properties": {
              "content": {
                "type": "string",
              },
              "link": {
                "properties": {
                  "url": {
                    "type": "string",
                  },
                },
                "required": [
                  "url",
                ],
                "type": [
                  "object",
                  "null",
                ],
              },
            },
            "required": [
              "content",
              "link",
            ],
            "type": "object",
          },
          "type": {
            "enum": [
              "text",
            ],
            "type": "string",
          },
        },
        "required": [
          "type",
          "text",
          "annotations",
          "plain_text",
          "href",
        ],
        "type": "object",
      },
      "TitlePropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "title": {
            "type": "object",
          },
          "type": {
            "enum": [
              "title",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "title",
        ],
        "type": "object",
      },
      "URLPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "url",
            ],
            "type": "string",
          },
          "url": {
            "type": "object",
          },
        },
        "required": [
          "id",
          "type",
          "url",
        ],
        "type": "object",
      },
      "UpdateBlockParameters": {
        "properties": {
          "archived": {
            "type": "boolean",
          },
          "bookmark": {
            "properties": {
              "url": {
                "type": "string",
              },
            },
            "type": "object",
          },
          "breadcrumb": {
            "type": "object",
          },
          "bulleted_list_item": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "code": {
            "properties": {
              "language": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "column": {
            "type": "object",
          },
          "column_list": {
            "type": "object",
          },
          "divider": {
            "type": "object",
          },
          "embed": {
            "properties": {
              "url": {
                "type": "string",
              },
            },
            "type": "object",
          },
          "equation": {
            "properties": {
              "expression": {
                "type": "string",
              },
            },
            "type": "object",
          },
          "file": {
            "properties": {
              "external": {
                "properties": {
                  "url": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
            "type": "object",
          },
          "heading_1": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "heading_2": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "heading_3": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "image": {
            "properties": {
              "external": {
                "properties": {
                  "url": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
            "type": "object",
          },
          "link_to_page": {
            "properties": {
              "database_id": {
                "type": "string",
              },
              "page_id": {
                "type": "string",
              },
              "type": {
                "enum": [
                  "page_id",
                  "database_id",
                ],
                "type": "string",
              },
            },
            "type": "object",
          },
          "numbered_list_item": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "paragraph": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "pdf": {
            "properties": {
              "external": {
                "properties": {
                  "url": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
            "type": "object",
          },
          "quote": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "table_of_contents": {
            "properties": {
              "color": {
                "type": "string",
              },
            },
            "type": "object",
          },
          "table_row": {
            "properties": {
              "cells": {
                "items": {
                  "items": {
                    "$ref": "#/components/schemas/RichTextItemRequest",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "to_do": {
            "properties": {
              "checked": {
                "type": "boolean",
              },
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "toggle": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "video": {
            "properties": {
              "external": {
                "properties": {
                  "url": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
            "type": "object",
          },
        },
        "type": "object",
      },
      "UpdateDatabaseParameters": {
        "properties": {
          "archived": {
            "type": "boolean",
          },
          "cover": {
            "oneOf": [
              {
                "properties": {
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "external",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "external",
                  "type",
                ],
                "type": "object",
              },
              {
                "type": "null",
              },
            ],
          },
          "description": {
            "items": {
              "$ref": "#/components/schemas/RichTextItemRequest",
            },
            "type": "array",
          },
          "icon": {
            "oneOf": [
              {
                "properties": {
                  "emoji": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "emoji",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "emoji",
                  "type",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "external",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "external",
                  "type",
                ],
                "type": "object",
              },
              {
                "type": "null",
              },
            ],
          },
          "is_inline": {
            "type": "boolean",
          },
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/PropertyUpdateSchema",
            },
            "type": "object",
          },
          "title": {
            "items": {
              "$ref": "#/components/schemas/RichTextItemRequest",
            },
            "type": "array",
          },
        },
        "type": "object",
      },
      "UpdatePageParameters": {
        "properties": {
          "archived": {
            "type": "boolean",
          },
          "properties": {
            "additionalProperties": {
              "oneOf": [
                {
                  "properties": {
                    "title": {
                      "items": {
                        "$ref": "#/components/schemas/RichTextItemRequest",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "title",
                  ],
                  "type": "object",
                },
                {
                  "properties": {
                    "rich_text": {
                      "items": {
                        "$ref": "#/components/schemas/RichTextItemRequest",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "rich_text",
                  ],
                  "type": "object",
                },
                {
                  "properties": {
                    "number": {
                      "type": [
                        "number",
                        "null",
                      ],
                    },
                  },
                  "required": [
                    "number",
                  ],
                  "type": "object",
                },
                {
                  "properties": {
                    "select": {
                      "properties": {
                        "name": {
                          "type": "string",
                        },
                      },
                      "required": [
                        "name",
                      ],
                      "type": [
                        "object",
                        "null",
                      ],
                    },
                  },
                  "required": [
                    "select",
                  ],
                  "type": "object",
                },
              ],
            },
            "type": "object",
          },
        },
        "type": "object",
      },
      "UserObjectResponse": {
        "properties": {
          "avatar_url": {
            "type": "string",
          },
          "id": {
            "type": "string",
          },
          "name": {
            "type": "string",
          },
          "object": {
            "enum": [
              "user",
            ],
            "type": "string",
          },
          "type": {
            "enum": [
              "person",
              "bot",
            ],
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
          "type",
          "name",
          "avatar_url",
        ],
        "type": "object",
      },
    },
    "securitySchemes": {
      "oauth2": {
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://api.notion.com/v1/oauth/authorize",
            "scopes": {},
            "tokenUrl": "https://api.notion.com/v1/oauth/token",
          },
        },
        "type": "oauth2",
      },
    },
  },
  "info": {
    "description": "API specification for Notion",
    "title": "Notion API",
    "version": "1.0.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/blocks/{block_id}": {
      "delete": {
        "operationId": "deleteBlock",
        "parameters": [
          {
            "in": "path",
            "name": "block_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PartialBlockObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/BlockObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Delete block",
      },
      "get": {
        "operationId": "getBlock",
        "parameters": [
          {
            "in": "path",
            "name": "block_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PartialBlockObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/BlockObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Get block",
      },
      "patch": {
        "operationId": "updateBlock",
        "parameters": [
          {
            "in": "path",
            "name": "block_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBlockParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PartialBlockObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/BlockObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Update block",
      },
    },
    "/blocks/{block_id}/children": {
      "get": {
        "operationId": "listBlockChildren",
        "parameters": [
          {
            "in": "path",
            "name": "block_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "start_cursor",
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListBlockChildrenResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "List block children",
      },
      "patch": {
        "operationId": "appendBlockChildren",
        "parameters": [
          {
            "in": "path",
            "name": "block_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppendBlockChildrenParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppendBlockChildrenResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Append block children",
      },
    },
    "/comments": {
      "get": {
        "operationId": "listComments",
        "parameters": [
          {
            "in": "query",
            "name": "block_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "start_cursor",
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCommentsResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "List comments",
      },
      "post": {
        "operationId": "createComment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommentParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CommentObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/PartialCommentObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Create comment",
      },
    },
    "/databases": {
      "get": {
        "operationId": "listDatabases",
        "parameters": [
          {
            "in": "query",
            "name": "start_cursor",
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDatabasesResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "List databases",
      },
      "post": {
        "operationId": "createDatabase",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDatabaseParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PartialDatabaseObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/DatabaseObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Create database",
      },
    },
    "/databases/{database_id}": {
      "get": {
        "operationId": "getDatabase",
        "parameters": [
          {
            "in": "path",
            "name": "database_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PartialDatabaseObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/DatabaseObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Get database",
      },
      "patch": {
        "operationId": "updateDatabase",
        "parameters": [
          {
            "in": "path",
            "name": "database_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDatabaseParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PartialDatabaseObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/DatabaseObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Update database",
      },
    },
    "/databases/{database_id}/query": {
      "post": {
        "operationId": "queryDatabase",
        "parameters": [
          {
            "in": "path",
            "name": "database_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "filter_properties",
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryDatabaseParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDatabaseResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Query database",
      },
    },
    "/oauth/token": {
      "post": {
        "operationId": "oauthToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OauthTokenParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthTokenResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "OAuth token",
      },
    },
    "/pages": {
      "post": {
        "operationId": "createPage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePageParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PageObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/PartialPageObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Create page",
      },
    },
    "/pages/{page_id}": {
      "get": {
        "operationId": "getPage",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "filter_properties",
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PageObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/PartialPageObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Get page",
      },
      "patch": {
        "operationId": "updatePage",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePageParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PageObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/PartialPageObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Update page",
      },
    },
    "/pages/{page_id}/properties/{property_id}": {
      "get": {
        "operationId": "getPageProperty",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "property_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "start_cursor",
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PropertyItemObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/PropertyItemListResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Get page property",
      },
    },
    "/search": {
      "post": {
        "operationId": "search",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Search",
      },
    },
    "/users": {
      "get": {
        "operationId": "listUsers",
        "parameters": [
          {
            "in": "query",
            "name": "start_cursor",
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListUsersResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "List users",
      },
    },
    "/users/me": {
      "get": {
        "operationId": "getSelf",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserObjectResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Get current user",
      },
    },
    "/users/{user_id}": {
      "get": {
        "operationId": "getUser",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserObjectResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Get user",
      },
    },
  },
  "security": [
    {
      "oauth2": [],
    },
  ],
  "servers": [
    {
      "url": "https://api.notion.so",
    },
  ],
}
`;

exports[`validateOpenAPISpec > notion.json (http url) 1`] = `
{
  "components": {
    "schemas": {
      "AnnotationRequest": {
        "properties": {
          "bold": {
            "type": "boolean",
          },
          "code": {
            "type": "boolean",
          },
          "color": {
            "enum": [
              "default",
              "gray",
              "brown",
              "orange",
              "yellow",
              "green",
              "blue",
              "purple",
              "pink",
              "red",
              "gray_background",
              "brown_background",
              "orange_background",
              "yellow_background",
              "green_background",
              "blue_background",
              "purple_background",
              "pink_background",
              "red_background",
            ],
            "type": "string",
          },
          "italic": {
            "type": "boolean",
          },
          "strikethrough": {
            "type": "boolean",
          },
          "underline": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "AnnotationResponse": {
        "properties": {
          "bold": {
            "type": "boolean",
          },
          "code": {
            "type": "boolean",
          },
          "color": {
            "enum": [
              "default",
              "gray",
              "brown",
              "orange",
              "yellow",
              "green",
              "blue",
              "purple",
              "pink",
              "red",
              "gray_background",
              "brown_background",
              "orange_background",
              "yellow_background",
              "green_background",
              "blue_background",
              "purple_background",
              "pink_background",
              "red_background",
            ],
            "type": "string",
          },
          "italic": {
            "type": "boolean",
          },
          "strikethrough": {
            "type": "boolean",
          },
          "underline": {
            "type": "boolean",
          },
        },
        "required": [
          "bold",
          "italic",
          "strikethrough",
          "underline",
          "code",
          "color",
        ],
        "type": "object",
      },
      "AppendBlockChildrenParameters": {
        "properties": {
          "children": {
            "items": {
              "$ref": "#/components/schemas/BlockObjectRequest",
            },
            "type": "array",
          },
        },
        "required": [
          "children",
        ],
        "type": "object",
      },
      "AppendBlockChildrenResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "object": {
            "enum": [
              "list",
            ],
            "type": "string",
          },
          "results": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PartialBlockObjectResponse",
                },
                {
                  "$ref": "#/components/schemas/BlockObjectResponse",
                },
              ],
            },
            "type": "array",
          },
        },
        "required": [
          "object",
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "BlockObjectRequest": {
        "oneOf": [
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "paragraph": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "paragraph",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "paragraph",
            ],
            "type": "object",
          },
          {
            "properties": {
              "heading_1": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "heading_1",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "heading_1",
            ],
            "type": "object",
          },
          {
            "properties": {
              "heading_2": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "heading_2",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "heading_2",
            ],
            "type": "object",
          },
          {
            "properties": {
              "heading_3": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "heading_3",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "heading_3",
            ],
            "type": "object",
          },
          {
            "properties": {
              "bulleted_list_item": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "bulleted_list_item",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "bulleted_list_item",
            ],
            "type": "object",
          },
          {
            "properties": {
              "numbered_list_item": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "numbered_list_item",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "numbered_list_item",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "to_do": {
                "properties": {
                  "checked": {
                    "type": "boolean",
                  },
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                  "checked",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "to_do",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "to_do",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "toggle": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "toggle",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "toggle",
            ],
            "type": "object",
          },
          {
            "properties": {
              "code": {
                "properties": {
                  "caption": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                  "language": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                  "language",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "code",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "code",
            ],
            "type": "object",
          },
          {
            "properties": {
              "child_page": {
                "properties": {
                  "title": {
                    "type": "string",
                  },
                },
                "required": [
                  "title",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "child_page",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "child_page",
            ],
            "type": "object",
          },
          {
            "properties": {
              "child_database": {
                "properties": {
                  "title": {
                    "type": "string",
                  },
                },
                "required": [
                  "title",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "child_database",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "child_database",
            ],
            "type": "object",
          },
          {
            "properties": {
              "embed": {
                "properties": {
                  "caption": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                  "url": {
                    "type": "string",
                  },
                },
                "required": [
                  "url",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "embed",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "embed",
            ],
            "type": "object",
          },
          {
            "properties": {
              "image": {
                "properties": {
                  "caption": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                },
                "required": [
                  "external",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "image",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "image",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "video",
                ],
                "type": "string",
              },
              "video": {
                "properties": {
                  "caption": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                },
                "required": [
                  "external",
                ],
                "type": "object",
              },
            },
            "required": [
              "object",
              "type",
              "video",
            ],
            "type": "object",
          },
          {
            "properties": {
              "file": {
                "properties": {
                  "caption": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                },
                "required": [
                  "external",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "file",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "file",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "pdf": {
                "properties": {
                  "caption": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                },
                "required": [
                  "external",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "pdf",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "pdf",
            ],
            "type": "object",
          },
          {
            "properties": {
              "bookmark": {
                "properties": {
                  "caption": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                  "url": {
                    "type": "string",
                  },
                },
                "required": [
                  "url",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "bookmark",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "bookmark",
            ],
            "type": "object",
          },
          {
            "properties": {
              "equation": {
                "properties": {
                  "expression": {
                    "type": "string",
                  },
                },
                "required": [
                  "expression",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "equation",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "equation",
            ],
            "type": "object",
          },
          {
            "properties": {
              "divider": {
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "divider",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "divider",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "table_of_contents": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
              "type": {
                "enum": [
                  "table_of_contents",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "table_of_contents",
            ],
            "type": "object",
          },
          {
            "properties": {
              "column_list": {
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "column_list",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "column_list",
            ],
            "type": "object",
          },
          {
            "properties": {
              "column": {
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "column",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "column",
            ],
            "type": "object",
          },
          {
            "properties": {
              "link_to_page": {
                "oneOf": [
                  {
                    "properties": {
                      "page_id": {
                        "type": "string",
                      },
                      "type": {
                        "enum": [
                          "page_id",
                        ],
                        "type": "string",
                      },
                    },
                    "required": [
                      "type",
                      "page_id",
                    ],
                    "type": "object",
                  },
                  {
                    "properties": {
                      "database_id": {
                        "type": "string",
                      },
                      "type": {
                        "enum": [
                          "database_id",
                        ],
                        "type": "string",
                      },
                    },
                    "required": [
                      "type",
                      "database_id",
                    ],
                    "type": "object",
                  },
                ],
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "link_to_page",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "link_to_page",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "table": {
                "properties": {
                  "children": {
                    "items": {
                      "$ref": "#/components/schemas/BlockObjectRequest",
                    },
                    "type": "array",
                  },
                  "has_column_header": {
                    "type": "boolean",
                  },
                  "has_row_header": {
                    "type": "boolean",
                  },
                  "table_width": {
                    "type": "integer",
                  },
                },
                "required": [
                  "table_width",
                  "children",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "table",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "table",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "table_row": {
                "properties": {
                  "cells": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/RichTextItemRequest",
                      },
                      "type": "array",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "cells",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "table_row",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "table_row",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "synced_block": {
                "properties": {
                  "children": {
                    "items": {
                      "$ref": "#/components/schemas/BlockObjectRequest",
                    },
                    "type": "array",
                  },
                  "synced_from": {
                    "oneOf": [
                      {
                        "properties": {
                          "block_id": {
                            "type": "string",
                          },
                          "type": {
                            "enum": [
                              "block_id",
                            ],
                            "type": "string",
                          },
                        },
                        "required": [
                          "type",
                          "block_id",
                        ],
                        "type": "object",
                      },
                      {
                        "type": "null",
                      },
                    ],
                  },
                },
                "type": "object",
              },
              "type": {
                "enum": [
                  "synced_block",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "synced_block",
            ],
            "type": "object",
          },
        ],
      },
      "BlockObjectResponse": {
        "properties": {
          "archived": {
            "type": "boolean",
          },
          "created_time": {
            "type": "string",
          },
          "has_children": {
            "type": "boolean",
          },
          "id": {
            "type": "string",
          },
          "last_edited_time": {
            "type": "string",
          },
          "object": {
            "enum": [
              "block",
            ],
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
          "type",
          "created_time",
          "last_edited_time",
          "has_children",
          "archived",
        ],
        "type": "object",
      },
      "CheckboxPropertyFilter": {
        "properties": {
          "does_not_equal": {
            "type": "boolean",
          },
          "equals": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "CheckboxPropertyResponse": {
        "properties": {
          "checkbox": {
            "type": "object",
          },
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "checkbox",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "checkbox",
        ],
        "type": "object",
      },
      "CommentObjectResponse": {
        "properties": {
          "created_by": {
            "$ref": "#/components/schemas/PartialUserObjectResponse",
          },
          "created_time": {
            "type": "string",
          },
          "discussion_id": {
            "type": "string",
          },
          "id": {
            "type": "string",
          },
          "last_edited_time": {
            "type": "string",
          },
          "object": {
            "enum": [
              "comment",
            ],
            "type": "string",
          },
          "parent": {
            "oneOf": [
              {
                "properties": {
                  "page_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "page_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "page_id",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "block_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "block_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "block_id",
                ],
                "type": "object",
              },
            ],
          },
          "rich_text": {
            "items": {
              "$ref": "#/components/schemas/RichTextItemResponse",
            },
            "type": "array",
          },
        },
        "required": [
          "object",
          "id",
          "parent",
          "discussion_id",
          "rich_text",
          "created_by",
          "created_time",
          "last_edited_time",
        ],
        "type": "object",
      },
      "CompoundFilter": {
        "properties": {
          "and": {
            "items": {
              "$ref": "#/components/schemas/PropertyFilter",
            },
            "type": "array",
          },
          "or": {
            "items": {
              "$ref": "#/components/schemas/PropertyFilter",
            },
            "type": "array",
          },
        },
        "type": "object",
      },
      "CreateCommentParameters": {
        "oneOf": [
          {
            "properties": {
              "parent": {
                "properties": {
                  "page_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "page_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "page_id",
                ],
                "type": "object",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "required": [
              "parent",
              "rich_text",
            ],
            "type": "object",
          },
          {
            "properties": {
              "discussion_id": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "required": [
              "discussion_id",
              "rich_text",
            ],
            "type": "object",
          },
        ],
      },
      "CreateDatabaseParameters": {
        "properties": {
          "cover": {
            "oneOf": [
              {
                "properties": {
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "external",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "external",
                ],
                "type": "object",
              },
              {
                "type": "null",
              },
            ],
          },
          "description": {
            "items": {
              "$ref": "#/components/schemas/RichTextItemRequest",
            },
            "type": "array",
          },
          "icon": {
            "oneOf": [
              {
                "properties": {
                  "emoji": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "emoji",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "emoji",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "external",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "external",
                ],
                "type": "object",
              },
              {
                "type": "null",
              },
            ],
          },
          "is_inline": {
            "type": "boolean",
          },
          "parent": {
            "oneOf": [
              {
                "properties": {
                  "page_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "page_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "page_id",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "database_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "database_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "database_id",
                ],
                "type": "object",
              },
            ],
          },
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/PropertySchema",
            },
            "type": "object",
          },
          "title": {
            "items": {
              "$ref": "#/components/schemas/RichTextItemRequest",
            },
            "type": "array",
          },
        },
        "required": [
          "parent",
          "properties",
          "title",
        ],
        "type": "object",
      },
      "CreatePageParameters": {
        "properties": {
          "parent": {
            "oneOf": [
              {
                "properties": {
                  "page_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "page_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "page_id",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "database_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "database_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "database_id",
                ],
                "type": "object",
              },
            ],
            "type": "object",
          },
          "properties": {
            "additionalProperties": {
              "oneOf": [
                {
                  "properties": {
                    "title": {
                      "items": {
                        "$ref": "#/components/schemas/RichTextItemRequest",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "title",
                  ],
                  "type": "object",
                },
                {
                  "properties": {
                    "rich_text": {
                      "items": {
                        "$ref": "#/components/schemas/RichTextItemRequest",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "rich_text",
                  ],
                  "type": "object",
                },
                {
                  "properties": {
                    "number": {
                      "type": [
                        "number",
                        "null",
                      ],
                    },
                  },
                  "required": [
                    "number",
                  ],
                  "type": "object",
                },
                {
                  "properties": {
                    "select": {
                      "properties": {
                        "name": {
                          "type": "string",
                        },
                      },
                      "required": [
                        "name",
                      ],
                      "type": [
                        "object",
                        "null",
                      ],
                    },
                  },
                  "required": [
                    "select",
                  ],
                  "type": "object",
                },
              ],
            },
            "type": "object",
          },
        },
        "required": [
          "parent",
          "properties",
        ],
        "type": "object",
      },
      "CreatedByPropertyResponse": {
        "properties": {
          "created_by": {
            "type": "object",
          },
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "created_by",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "created_by",
        ],
        "type": "object",
      },
      "CreatedTimePropertyResponse": {
        "properties": {
          "created_time": {
            "type": "object",
          },
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "created_time",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "created_time",
        ],
        "type": "object",
      },
      "DatabaseObjectResponse": {
        "properties": {
          "archived": {
            "type": "boolean",
          },
          "cover": {
            "oneOf": [
              {
                "properties": {
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "external",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "external",
                ],
                "type": "object",
              },
              {
                "type": "null",
              },
            ],
          },
          "created_by": {
            "$ref": "#/components/schemas/PartialUserObjectResponse",
          },
          "created_time": {
            "type": "string",
          },
          "description": {
            "items": {
              "$ref": "#/components/schemas/RichTextItemResponse",
            },
            "type": "array",
          },
          "icon": {
            "oneOf": [
              {
                "properties": {
                  "emoji": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "emoji",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "emoji",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "external",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "external",
                ],
                "type": "object",
              },
              {
                "type": "null",
              },
            ],
          },
          "id": {
            "type": "string",
          },
          "is_inline": {
            "type": "boolean",
          },
          "last_edited_by": {
            "$ref": "#/components/schemas/PartialUserObjectResponse",
          },
          "last_edited_time": {
            "type": "string",
          },
          "object": {
            "enum": [
              "database",
            ],
            "type": "string",
          },
          "parent": {
            "oneOf": [
              {
                "properties": {
                  "page_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "page_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "page_id",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "workspace",
                    ],
                    "type": "string",
                  },
                  "workspace": {
                    "enum": [
                      true,
                    ],
                    "type": "boolean",
                  },
                },
                "required": [
                  "type",
                  "workspace",
                ],
                "type": "object",
              },
            ],
          },
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/DatabasePropertyConfigResponse",
            },
            "type": "object",
          },
          "title": {
            "items": {
              "$ref": "#/components/schemas/RichTextItemResponse",
            },
            "type": "array",
          },
          "url": {
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
          "created_time",
          "created_by",
          "last_edited_time",
          "last_edited_by",
          "title",
          "description",
          "is_inline",
          "properties",
          "parent",
          "url",
          "archived",
        ],
        "type": "object",
      },
      "DatabasePropertyConfigResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TitlePropertyResponse",
          },
          {
            "$ref": "#/components/schemas/RichTextPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/NumberPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/SelectPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/MultiSelectPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/DatePropertyResponse",
          },
          {
            "$ref": "#/components/schemas/PeoplePropertyResponse",
          },
          {
            "$ref": "#/components/schemas/FilePropertyResponse",
          },
          {
            "$ref": "#/components/schemas/CheckboxPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/URLPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/EmailPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/PhoneNumberPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/FormulaPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/RelationPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/RollupPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/CreatedTimePropertyResponse",
          },
          {
            "$ref": "#/components/schemas/CreatedByPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/LastEditedTimePropertyResponse",
          },
          {
            "$ref": "#/components/schemas/LastEditedByPropertyResponse",
          },
        ],
      },
      "DatePropertyFilter": {
        "properties": {
          "after": {
            "type": "string",
          },
          "before": {
            "type": "string",
          },
          "equals": {
            "type": "string",
          },
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
          "next_month": {},
          "next_week": {},
          "next_year": {},
          "on_or_after": {
            "type": "string",
          },
          "on_or_before": {
            "type": "string",
          },
          "past_month": {},
          "past_week": {},
          "past_year": {},
        },
        "type": "object",
      },
      "DatePropertyResponse": {
        "properties": {
          "date": {
            "type": "object",
          },
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "date",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "date",
        ],
        "type": "object",
      },
      "DateRequest": {
        "properties": {
          "end": {
            "type": [
              "string",
              "null",
            ],
          },
          "start": {
            "type": "string",
          },
          "time_zone": {
            "type": [
              "string",
              "null",
            ],
          },
        },
        "required": [
          "start",
        ],
        "type": "object",
      },
      "DateResponse": {
        "properties": {
          "end": {
            "type": [
              "string",
              "null",
            ],
          },
          "start": {
            "type": "string",
          },
          "time_zone": {
            "type": [
              "string",
              "null",
            ],
          },
        },
        "required": [
          "start",
          "end",
          "time_zone",
        ],
        "type": "object",
      },
      "EmailPropertyResponse": {
        "properties": {
          "email": {
            "type": "object",
          },
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "email",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "email",
        ],
        "type": "object",
      },
      "EquationRichTextItemResponse": {
        "properties": {
          "annotations": {
            "$ref": "#/components/schemas/AnnotationResponse",
          },
          "equation": {
            "properties": {
              "expression": {
                "type": "string",
              },
            },
            "required": [
              "expression",
            ],
            "type": "object",
          },
          "href": {
            "type": [
              "string",
              "null",
            ],
          },
          "plain_text": {
            "type": "string",
          },
          "type": {
            "enum": [
              "equation",
            ],
            "type": "string",
          },
        },
        "required": [
          "type",
          "equation",
          "annotations",
          "plain_text",
          "href",
        ],
        "type": "object",
      },
      "FilePropertyResponse": {
        "properties": {
          "files": {
            "type": "object",
          },
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "files",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "files",
        ],
        "type": "object",
      },
      "FilesPropertyFilter": {
        "properties": {
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "FormulaPropertyResponse": {
        "properties": {
          "formula": {
            "properties": {
              "expression": {
                "type": "string",
              },
            },
            "required": [
              "expression",
            ],
            "type": "object",
          },
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "formula",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "formula",
        ],
        "type": "object",
      },
      "LastEditedByPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "last_edited_by": {
            "type": "object",
          },
          "type": {
            "enum": [
              "last_edited_by",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "last_edited_by",
        ],
        "type": "object",
      },
      "LastEditedTimePropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "last_edited_time": {
            "type": "object",
          },
          "type": {
            "enum": [
              "last_edited_time",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "last_edited_time",
        ],
        "type": "object",
      },
      "ListBlockChildrenResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "object": {
            "enum": [
              "list",
            ],
            "type": "string",
          },
          "results": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PartialBlockObjectResponse",
                },
                {
                  "$ref": "#/components/schemas/BlockObjectResponse",
                },
              ],
            },
            "type": "array",
          },
        },
        "required": [
          "object",
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "ListCommentsResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "object": {
            "enum": [
              "list",
            ],
            "type": "string",
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/CommentObjectResponse",
            },
            "type": "array",
          },
        },
        "required": [
          "object",
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "ListDatabasesResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "object": {
            "enum": [
              "list",
            ],
            "type": "string",
          },
          "results": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PartialDatabaseObjectResponse",
                },
                {
                  "$ref": "#/components/schemas/DatabaseObjectResponse",
                },
              ],
            },
            "type": "array",
          },
        },
        "required": [
          "object",
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "ListUsersResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/UserObjectResponse",
            },
            "type": "array",
          },
        },
        "required": [
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "MentionRichTextItemResponse": {
        "properties": {
          "annotations": {
            "$ref": "#/components/schemas/AnnotationResponse",
          },
          "href": {
            "type": [
              "string",
              "null",
            ],
          },
          "mention": {
            "oneOf": [
              {
                "properties": {
                  "type": {
                    "enum": [
                      "user",
                    ],
                    "type": "string",
                  },
                  "user": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/PartialUserObjectResponse",
                      },
                      {
                        "$ref": "#/components/schemas/UserObjectResponse",
                      },
                    ],
                  },
                },
                "required": [
                  "type",
                  "user",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "date": {
                    "$ref": "#/components/schemas/DateResponse",
                  },
                  "type": {
                    "enum": [
                      "date",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "date",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "link_preview": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "link_preview",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "link_preview",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "page": {
                    "properties": {
                      "id": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "id",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "page",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "page",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "database": {
                    "properties": {
                      "id": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "id",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "database",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "database",
                ],
                "type": "object",
              },
            ],
          },
          "plain_text": {
            "type": "string",
          },
          "type": {
            "enum": [
              "mention",
            ],
            "type": "string",
          },
        },
        "required": [
          "type",
          "mention",
          "annotations",
          "plain_text",
          "href",
        ],
        "type": "object",
      },
      "MultiSelectPropertyFilter": {
        "properties": {
          "contains": {
            "type": "string",
          },
          "does_not_contain": {
            "type": "string",
          },
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "MultiSelectPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "multi_select": {
            "properties": {
              "options": {
                "items": {
                  "$ref": "#/components/schemas/SelectOption",
                },
                "type": "array",
              },
            },
            "required": [
              "options",
            ],
            "type": "object",
          },
          "type": {
            "enum": [
              "multi_select",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "multi_select",
        ],
        "type": "object",
      },
      "NumberPropertyFilter": {
        "properties": {
          "does_not_equal": {
            "type": "number",
          },
          "equals": {
            "type": "number",
          },
          "greater_than": {
            "type": "number",
          },
          "greater_than_or_equal_to": {
            "type": "number",
          },
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
          "less_than": {
            "type": "number",
          },
          "less_than_or_equal_to": {
            "type": "number",
          },
        },
        "type": "object",
      },
      "NumberPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "number": {
            "properties": {
              "format": {
                "type": "string",
              },
            },
            "required": [
              "format",
            ],
            "type": "object",
          },
          "type": {
            "enum": [
              "number",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "number",
        ],
        "type": "object",
      },
      "OauthTokenParameters": {
        "properties": {
          "code": {
            "type": "string",
          },
          "external_account": {
            "properties": {
              "key": {
                "type": "string",
              },
              "name": {
                "type": "string",
              },
            },
            "required": [
              "key",
              "name",
            ],
            "type": "object",
          },
          "grant_type": {
            "type": "string",
          },
          "redirect_uri": {
            "type": "string",
          },
        },
        "required": [
          "grant_type",
          "code",
        ],
        "type": "object",
      },
      "OauthTokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
          },
          "bot_id": {
            "type": "string",
          },
          "duplicated_template_id": {
            "type": [
              "string",
              "null",
            ],
          },
          "owner": {
            "oneOf": [
              {
                "properties": {
                  "type": {
                    "enum": [
                      "user",
                    ],
                    "type": "string",
                  },
                  "user": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/UserObjectResponse",
                      },
                      {
                        "$ref": "#/components/schemas/PartialUserObjectResponse",
                      },
                    ],
                  },
                },
                "required": [
                  "type",
                  "user",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "workspace",
                    ],
                    "type": "string",
                  },
                  "workspace": {
                    "enum": [
                      true,
                    ],
                    "type": "boolean",
                  },
                },
                "required": [
                  "type",
                  "workspace",
                ],
                "type": "object",
              },
            ],
          },
          "token_type": {
            "enum": [
              "bearer",
            ],
            "type": "string",
          },
          "workspace_icon": {
            "type": [
              "string",
              "null",
            ],
          },
          "workspace_id": {
            "type": "string",
          },
          "workspace_name": {
            "type": [
              "string",
              "null",
            ],
          },
        },
        "required": [
          "access_token",
          "token_type",
          "bot_id",
          "workspace_name",
          "workspace_icon",
          "workspace_id",
          "owner",
          "duplicated_template_id",
        ],
        "type": "object",
      },
      "PageObjectResponse": {
        "properties": {
          "archived": {
            "type": "boolean",
          },
          "created_time": {
            "type": "string",
          },
          "id": {
            "type": "string",
          },
          "last_edited_time": {
            "type": "string",
          },
          "object": {
            "enum": [
              "page",
            ],
            "type": "string",
          },
          "url": {
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
          "created_time",
          "last_edited_time",
          "archived",
          "url",
        ],
        "type": "object",
      },
      "PartialBlockObjectResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "object": {
            "enum": [
              "block",
            ],
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
        ],
        "type": "object",
      },
      "PartialCommentObjectResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "object": {
            "enum": [
              "comment",
            ],
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
        ],
        "type": "object",
      },
      "PartialDatabaseObjectResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "object": {
            "enum": [
              "database",
            ],
            "type": "string",
          },
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/DatabasePropertyConfigResponse",
            },
            "type": "object",
          },
        },
        "required": [
          "object",
          "id",
          "properties",
        ],
        "type": "object",
      },
      "PartialPageObjectResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "object": {
            "enum": [
              "page",
            ],
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
        ],
        "type": "object",
      },
      "PartialUserObjectResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "object": {
            "enum": [
              "user",
            ],
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
        ],
        "type": "object",
      },
      "PeoplePropertyFilter": {
        "properties": {
          "contains": {
            "type": "string",
          },
          "does_not_contain": {
            "type": "string",
          },
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "PeoplePropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "people": {
            "type": "object",
          },
          "type": {
            "enum": [
              "people",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "people",
        ],
        "type": "object",
      },
      "PhoneNumberPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "phone_number": {
            "type": "object",
          },
          "type": {
            "enum": [
              "phone_number",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "phone_number",
        ],
        "type": "object",
      },
      "PropertyFilter": {
        "oneOf": [
          {
            "properties": {
              "property": {
                "type": "string",
              },
              "title": {
                "$ref": "#/components/schemas/TextPropertyFilter",
              },
            },
            "required": [
              "property",
              "title",
            ],
            "type": "object",
          },
          {
            "properties": {
              "property": {
                "type": "string",
              },
              "rich_text": {
                "$ref": "#/components/schemas/TextPropertyFilter",
              },
            },
            "required": [
              "property",
              "rich_text",
            ],
            "type": "object",
          },
          {
            "properties": {
              "number": {
                "$ref": "#/components/schemas/NumberPropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "number",
            ],
            "type": "object",
          },
          {
            "properties": {
              "checkbox": {
                "$ref": "#/components/schemas/CheckboxPropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "checkbox",
            ],
            "type": "object",
          },
          {
            "properties": {
              "property": {
                "type": "string",
              },
              "select": {
                "$ref": "#/components/schemas/SelectPropertyFilter",
              },
            },
            "required": [
              "property",
              "select",
            ],
            "type": "object",
          },
          {
            "properties": {
              "multi_select": {
                "$ref": "#/components/schemas/MultiSelectPropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "multi_select",
            ],
            "type": "object",
          },
          {
            "properties": {
              "date": {
                "$ref": "#/components/schemas/DatePropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "date",
            ],
            "type": "object",
          },
          {
            "properties": {
              "people": {
                "$ref": "#/components/schemas/PeoplePropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "people",
            ],
            "type": "object",
          },
          {
            "properties": {
              "files": {
                "$ref": "#/components/schemas/FilesPropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "files",
            ],
            "type": "object",
          },
          {
            "properties": {
              "property": {
                "type": "string",
              },
              "url": {
                "$ref": "#/components/schemas/TextPropertyFilter",
              },
            },
            "required": [
              "property",
              "url",
            ],
            "type": "object",
          },
          {
            "properties": {
              "email": {
                "$ref": "#/components/schemas/TextPropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "email",
            ],
            "type": "object",
          },
          {
            "properties": {
              "phone_number": {
                "$ref": "#/components/schemas/TextPropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "phone_number",
            ],
            "type": "object",
          },
          {
            "properties": {
              "property": {
                "type": "string",
              },
              "relation": {
                "$ref": "#/components/schemas/RelationPropertyFilter",
              },
            },
            "required": [
              "property",
              "relation",
            ],
            "type": "object",
          },
          {
            "properties": {
              "created_by": {
                "$ref": "#/components/schemas/PeoplePropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "created_by",
            ],
            "type": "object",
          },
          {
            "properties": {
              "created_time": {
                "$ref": "#/components/schemas/DatePropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "created_time",
            ],
            "type": "object",
          },
          {
            "properties": {
              "last_edited_by": {
                "$ref": "#/components/schemas/PeoplePropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "last_edited_by",
            ],
            "type": "object",
          },
          {
            "properties": {
              "last_edited_time": {
                "$ref": "#/components/schemas/DatePropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "last_edited_time",
            ],
            "type": "object",
          },
          {
            "properties": {
              "created_time": {
                "$ref": "#/components/schemas/DatePropertyFilter",
              },
              "timestamp": {
                "enum": [
                  "created_time",
                  "last_edited_time",
                ],
                "type": "string",
              },
            },
            "required": [
              "timestamp",
              "created_time",
            ],
            "type": "object",
          },
          {
            "properties": {
              "last_edited_time": {
                "$ref": "#/components/schemas/DatePropertyFilter",
              },
              "timestamp": {
                "enum": [
                  "created_time",
                  "last_edited_time",
                ],
                "type": "string",
              },
            },
            "required": [
              "timestamp",
              "last_edited_time",
            ],
            "type": "object",
          },
        ],
      },
      "PropertyItemListResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/PropertyItemObjectResponse",
            },
            "type": "array",
          },
        },
        "required": [
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "PropertyItemObjectResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "required": [
          "type",
          "id",
        ],
        "type": "object",
      },
      "PropertySchema": {
        "properties": {
          "name": {
            "type": [
              "string",
              "null",
            ],
          },
          "type": {
            "type": "string",
          },
        },
        "required": [
          "type",
        ],
        "type": "object",
      },
      "PropertyUpdateSchema": {
        "properties": {
          "name": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "QueryDatabaseParameters": {
        "properties": {
          "archived": {
            "type": "boolean",
          },
          "filter": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PropertyFilter",
              },
              {
                "$ref": "#/components/schemas/CompoundFilter",
              },
            ],
          },
          "page_size": {
            "type": "integer",
          },
          "sorts": {
            "items": {
              "oneOf": [
                {
                  "properties": {
                    "direction": {
                      "enum": [
                        "ascending",
                        "descending",
                      ],
                      "type": "string",
                    },
                    "property": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "property",
                    "direction",
                  ],
                  "type": "object",
                },
                {
                  "properties": {
                    "direction": {
                      "enum": [
                        "ascending",
                        "descending",
                      ],
                      "type": "string",
                    },
                    "timestamp": {
                      "enum": [
                        "created_time",
                        "last_edited_time",
                      ],
                      "type": "string",
                    },
                  },
                  "required": [
                    "timestamp",
                    "direction",
                  ],
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
          "start_cursor": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "QueryDatabaseResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "object": {
            "enum": [
              "list",
            ],
            "type": "string",
          },
          "results": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PageObjectResponse",
                },
                {
                  "$ref": "#/components/schemas/PartialPageObjectResponse",
                },
              ],
            },
            "type": "array",
          },
        },
        "required": [
          "object",
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "RelationPropertyFilter": {
        "properties": {
          "contains": {
            "type": "string",
          },
          "does_not_contain": {
            "type": "string",
          },
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "RelationPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "relation": {
            "properties": {
              "database_id": {
                "type": "string",
              },
              "synced_property_id": {
                "type": "string",
              },
              "synced_property_name": {
                "type": "string",
              },
            },
            "required": [
              "database_id",
              "synced_property_name",
              "synced_property_id",
            ],
            "type": "object",
          },
          "type": {
            "enum": [
              "relation",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "relation",
        ],
        "type": "object",
      },
      "RichTextItemRequest": {
        "oneOf": [
          {
            "properties": {
              "annotations": {
                "$ref": "#/components/schemas/AnnotationRequest",
              },
              "text": {
                "properties": {
                  "content": {
                    "type": "string",
                  },
                  "link": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": [
                      "object",
                      "null",
                    ],
                  },
                },
                "required": [
                  "content",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "text",
                ],
                "type": "string",
              },
            },
            "required": [
              "text",
            ],
            "type": "object",
          },
          {
            "properties": {
              "annotations": {
                "$ref": "#/components/schemas/AnnotationRequest",
              },
              "mention": {
                "oneOf": [
                  {
                    "properties": {
                      "user": {
                        "oneOf": [
                          {
                            "properties": {
                              "id": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "id",
                            ],
                            "type": "object",
                          },
                          {
                            "$ref": "#/components/schemas/UserObjectResponse",
                          },
                        ],
                      },
                    },
                    "required": [
                      "user",
                    ],
                    "type": "object",
                  },
                  {
                    "properties": {
                      "page": {
                        "properties": {
                          "id": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "id",
                        ],
                        "type": "object",
                      },
                    },
                    "required": [
                      "page",
                    ],
                    "type": "object",
                  },
                  {
                    "properties": {
                      "database": {
                        "properties": {
                          "id": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "id",
                        ],
                        "type": "object",
                      },
                    },
                    "required": [
                      "database",
                    ],
                    "type": "object",
                  },
                  {
                    "properties": {
                      "date": {
                        "$ref": "#/components/schemas/DateRequest",
                      },
                    },
                    "required": [
                      "date",
                    ],
                    "type": "object",
                  },
                ],
              },
              "type": {
                "enum": [
                  "mention",
                ],
                "type": "string",
              },
            },
            "required": [
              "mention",
            ],
            "type": "object",
          },
          {
            "properties": {
              "annotations": {
                "$ref": "#/components/schemas/AnnotationRequest",
              },
              "equation": {
                "properties": {
                  "expression": {
                    "type": "string",
                  },
                },
                "required": [
                  "expression",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "equation",
                ],
                "type": "string",
              },
            },
            "required": [
              "equation",
            ],
            "type": "object",
          },
        ],
      },
      "RichTextItemResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TextRichTextItemResponse",
          },
          {
            "$ref": "#/components/schemas/MentionRichTextItemResponse",
          },
          {
            "$ref": "#/components/schemas/EquationRichTextItemResponse",
          },
        ],
      },
      "RichTextPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "rich_text": {
            "type": "object",
          },
          "type": {
            "enum": [
              "rich_text",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "rich_text",
        ],
        "type": "object",
      },
      "RollupPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "rollup": {
            "properties": {
              "function": {
                "type": "string",
              },
              "relation_property_id": {
                "type": "string",
              },
              "relation_property_name": {
                "type": "string",
              },
              "rollup_property_id": {
                "type": "string",
              },
              "rollup_property_name": {
                "type": "string",
              },
            },
            "required": [
              "relation_property_name",
              "relation_property_id",
              "rollup_property_name",
              "rollup_property_id",
              "function",
            ],
            "type": "object",
          },
          "type": {
            "enum": [
              "rollup",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "rollup",
        ],
        "type": "object",
      },
      "SearchParameters": {
        "properties": {
          "filter": {
            "properties": {
              "property": {
                "enum": [
                  "object",
                ],
                "type": "string",
              },
              "value": {
                "enum": [
                  "page",
                  "database",
                ],
                "type": "string",
              },
            },
            "required": [
              "value",
              "property",
            ],
            "type": "object",
          },
          "page_size": {
            "type": "integer",
          },
          "query": {
            "type": "string",
          },
          "sort": {
            "properties": {
              "direction": {
                "enum": [
                  "ascending",
                  "descending",
                ],
                "type": "string",
              },
              "timestamp": {
                "enum": [
                  "last_edited_time",
                ],
                "type": "string",
              },
            },
            "required": [
              "direction",
              "timestamp",
            ],
            "type": "object",
          },
          "start_cursor": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "SearchResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "object": {
            "enum": [
              "list",
            ],
            "type": "string",
          },
          "results": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PageObjectResponse",
                },
                {
                  "$ref": "#/components/schemas/PartialPageObjectResponse",
                },
                {
                  "$ref": "#/components/schemas/PartialDatabaseObjectResponse",
                },
                {
                  "$ref": "#/components/schemas/DatabaseObjectResponse",
                },
              ],
            },
            "type": "array",
          },
        },
        "required": [
          "object",
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "SelectOption": {
        "properties": {
          "color": {
            "type": "string",
          },
          "id": {
            "type": "string",
          },
          "name": {
            "type": "string",
          },
        },
        "required": [
          "id",
          "name",
          "color",
        ],
        "type": "object",
      },
      "SelectPropertyFilter": {
        "properties": {
          "does_not_equal": {
            "type": "string",
          },
          "equals": {
            "type": "string",
          },
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "SelectPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "select": {
            "properties": {
              "options": {
                "items": {
                  "$ref": "#/components/schemas/SelectOption",
                },
                "type": "array",
              },
            },
            "required": [
              "options",
            ],
            "type": "object",
          },
          "type": {
            "enum": [
              "select",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "select",
        ],
        "type": "object",
      },
      "TextPropertyFilter": {
        "properties": {
          "contains": {
            "type": "string",
          },
          "does_not_contain": {
            "type": "string",
          },
          "does_not_equal": {
            "type": "string",
          },
          "ends_with": {
            "type": "string",
          },
          "equals": {
            "type": "string",
          },
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
          "starts_with": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "TextRichTextItemResponse": {
        "properties": {
          "annotations": {
            "$ref": "#/components/schemas/AnnotationResponse",
          },
          "href": {
            "type": [
              "string",
              "null",
            ],
          },
          "plain_text": {
            "type": "string",
          },
          "text": {
            "properties": {
              "content": {
                "type": "string",
              },
              "link": {
                "properties": {
                  "url": {
                    "type": "string",
                  },
                },
                "required": [
                  "url",
                ],
                "type": [
                  "object",
                  "null",
                ],
              },
            },
            "required": [
              "content",
              "link",
            ],
            "type": "object",
          },
          "type": {
            "enum": [
              "text",
            ],
            "type": "string",
          },
        },
        "required": [
          "type",
          "text",
          "annotations",
          "plain_text",
          "href",
        ],
        "type": "object",
      },
      "TitlePropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "title": {
            "type": "object",
          },
          "type": {
            "enum": [
              "title",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "title",
        ],
        "type": "object",
      },
      "URLPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "url",
            ],
            "type": "string",
          },
          "url": {
            "type": "object",
          },
        },
        "required": [
          "id",
          "type",
          "url",
        ],
        "type": "object",
      },
      "UpdateBlockParameters": {
        "properties": {
          "archived": {
            "type": "boolean",
          },
          "bookmark": {
            "properties": {
              "url": {
                "type": "string",
              },
            },
            "type": "object",
          },
          "breadcrumb": {
            "type": "object",
          },
          "bulleted_list_item": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "code": {
            "properties": {
              "language": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "column": {
            "type": "object",
          },
          "column_list": {
            "type": "object",
          },
          "divider": {
            "type": "object",
          },
          "embed": {
            "properties": {
              "url": {
                "type": "string",
              },
            },
            "type": "object",
          },
          "equation": {
            "properties": {
              "expression": {
                "type": "string",
              },
            },
            "type": "object",
          },
          "file": {
            "properties": {
              "external": {
                "properties": {
                  "url": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
            "type": "object",
          },
          "heading_1": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "heading_2": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "heading_3": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "image": {
            "properties": {
              "external": {
                "properties": {
                  "url": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
            "type": "object",
          },
          "link_to_page": {
            "properties": {
              "database_id": {
                "type": "string",
              },
              "page_id": {
                "type": "string",
              },
              "type": {
                "enum": [
                  "page_id",
                  "database_id",
                ],
                "type": "string",
              },
            },
            "type": "object",
          },
          "numbered_list_item": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "paragraph": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "pdf": {
            "properties": {
              "external": {
                "properties": {
                  "url": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
            "type": "object",
          },
          "quote": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "table_of_contents": {
            "properties": {
              "color": {
                "type": "string",
              },
            },
            "type": "object",
          },
          "table_row": {
            "properties": {
              "cells": {
                "items": {
                  "items": {
                    "$ref": "#/components/schemas/RichTextItemRequest",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "to_do": {
            "properties": {
              "checked": {
                "type": "boolean",
              },
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "toggle": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "video": {
            "properties": {
              "external": {
                "properties": {
                  "url": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
            "type": "object",
          },
        },
        "type": "object",
      },
      "UpdateDatabaseParameters": {
        "properties": {
          "archived": {
            "type": "boolean",
          },
          "cover": {
            "oneOf": [
              {
                "properties": {
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "external",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "external",
                  "type",
                ],
                "type": "object",
              },
              {
                "type": "null",
              },
            ],
          },
          "description": {
            "items": {
              "$ref": "#/components/schemas/RichTextItemRequest",
            },
            "type": "array",
          },
          "icon": {
            "oneOf": [
              {
                "properties": {
                  "emoji": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "emoji",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "emoji",
                  "type",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "external",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "external",
                  "type",
                ],
                "type": "object",
              },
              {
                "type": "null",
              },
            ],
          },
          "is_inline": {
            "type": "boolean",
          },
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/PropertyUpdateSchema",
            },
            "type": "object",
          },
          "title": {
            "items": {
              "$ref": "#/components/schemas/RichTextItemRequest",
            },
            "type": "array",
          },
        },
        "type": "object",
      },
      "UpdatePageParameters": {
        "properties": {
          "archived": {
            "type": "boolean",
          },
          "properties": {
            "additionalProperties": {
              "oneOf": [
                {
                  "properties": {
                    "title": {
                      "items": {
                        "$ref": "#/components/schemas/RichTextItemRequest",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "title",
                  ],
                  "type": "object",
                },
                {
                  "properties": {
                    "rich_text": {
                      "items": {
                        "$ref": "#/components/schemas/RichTextItemRequest",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "rich_text",
                  ],
                  "type": "object",
                },
                {
                  "properties": {
                    "number": {
                      "type": [
                        "number",
                        "null",
                      ],
                    },
                  },
                  "required": [
                    "number",
                  ],
                  "type": "object",
                },
                {
                  "properties": {
                    "select": {
                      "properties": {
                        "name": {
                          "type": "string",
                        },
                      },
                      "required": [
                        "name",
                      ],
                      "type": [
                        "object",
                        "null",
                      ],
                    },
                  },
                  "required": [
                    "select",
                  ],
                  "type": "object",
                },
              ],
            },
            "type": "object",
          },
        },
        "type": "object",
      },
      "UserObjectResponse": {
        "properties": {
          "avatar_url": {
            "type": "string",
          },
          "id": {
            "type": "string",
          },
          "name": {
            "type": "string",
          },
          "object": {
            "enum": [
              "user",
            ],
            "type": "string",
          },
          "type": {
            "enum": [
              "person",
              "bot",
            ],
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
          "type",
          "name",
          "avatar_url",
        ],
        "type": "object",
      },
    },
    "securitySchemes": {
      "oauth2": {
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://api.notion.com/v1/oauth/authorize",
            "scopes": {},
            "tokenUrl": "https://api.notion.com/v1/oauth/token",
          },
        },
        "type": "oauth2",
      },
    },
  },
  "info": {
    "description": "API specification for Notion",
    "title": "Notion API",
    "version": "1.0.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/blocks/{block_id}": {
      "delete": {
        "operationId": "deleteBlock",
        "parameters": [
          {
            "in": "path",
            "name": "block_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PartialBlockObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/BlockObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Delete block",
      },
      "get": {
        "operationId": "getBlock",
        "parameters": [
          {
            "in": "path",
            "name": "block_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PartialBlockObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/BlockObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Get block",
      },
      "patch": {
        "operationId": "updateBlock",
        "parameters": [
          {
            "in": "path",
            "name": "block_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBlockParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PartialBlockObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/BlockObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Update block",
      },
    },
    "/blocks/{block_id}/children": {
      "get": {
        "operationId": "listBlockChildren",
        "parameters": [
          {
            "in": "path",
            "name": "block_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "start_cursor",
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListBlockChildrenResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "List block children",
      },
      "patch": {
        "operationId": "appendBlockChildren",
        "parameters": [
          {
            "in": "path",
            "name": "block_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppendBlockChildrenParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppendBlockChildrenResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Append block children",
      },
    },
    "/comments": {
      "get": {
        "operationId": "listComments",
        "parameters": [
          {
            "in": "query",
            "name": "block_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "start_cursor",
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCommentsResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "List comments",
      },
      "post": {
        "operationId": "createComment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommentParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CommentObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/PartialCommentObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Create comment",
      },
    },
    "/databases": {
      "get": {
        "operationId": "listDatabases",
        "parameters": [
          {
            "in": "query",
            "name": "start_cursor",
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDatabasesResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "List databases",
      },
      "post": {
        "operationId": "createDatabase",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDatabaseParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PartialDatabaseObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/DatabaseObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Create database",
      },
    },
    "/databases/{database_id}": {
      "get": {
        "operationId": "getDatabase",
        "parameters": [
          {
            "in": "path",
            "name": "database_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PartialDatabaseObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/DatabaseObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Get database",
      },
      "patch": {
        "operationId": "updateDatabase",
        "parameters": [
          {
            "in": "path",
            "name": "database_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDatabaseParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PartialDatabaseObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/DatabaseObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Update database",
      },
    },
    "/databases/{database_id}/query": {
      "post": {
        "operationId": "queryDatabase",
        "parameters": [
          {
            "in": "path",
            "name": "database_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "filter_properties",
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryDatabaseParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDatabaseResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Query database",
      },
    },
    "/oauth/token": {
      "post": {
        "operationId": "oauthToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OauthTokenParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthTokenResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "OAuth token",
      },
    },
    "/pages": {
      "post": {
        "operationId": "createPage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePageParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PageObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/PartialPageObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Create page",
      },
    },
    "/pages/{page_id}": {
      "get": {
        "operationId": "getPage",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "filter_properties",
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PageObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/PartialPageObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Get page",
      },
      "patch": {
        "operationId": "updatePage",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePageParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PageObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/PartialPageObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Update page",
      },
    },
    "/pages/{page_id}/properties/{property_id}": {
      "get": {
        "operationId": "getPageProperty",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "property_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "start_cursor",
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PropertyItemObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/PropertyItemListResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Get page property",
      },
    },
    "/search": {
      "post": {
        "operationId": "search",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Search",
      },
    },
    "/users": {
      "get": {
        "operationId": "listUsers",
        "parameters": [
          {
            "in": "query",
            "name": "start_cursor",
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListUsersResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "List users",
      },
    },
    "/users/me": {
      "get": {
        "operationId": "getSelf",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserObjectResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Get current user",
      },
    },
    "/users/{user_id}": {
      "get": {
        "operationId": "getUser",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserObjectResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Get user",
      },
    },
  },
  "security": [
    {
      "oauth2": [],
    },
  ],
  "servers": [
    {
      "url": "https://api.notion.so",
    },
  ],
}
`;

exports[`validateOpenAPISpec > notion.json (string) 1`] = `
{
  "components": {
    "schemas": {
      "AnnotationRequest": {
        "properties": {
          "bold": {
            "type": "boolean",
          },
          "code": {
            "type": "boolean",
          },
          "color": {
            "enum": [
              "default",
              "gray",
              "brown",
              "orange",
              "yellow",
              "green",
              "blue",
              "purple",
              "pink",
              "red",
              "gray_background",
              "brown_background",
              "orange_background",
              "yellow_background",
              "green_background",
              "blue_background",
              "purple_background",
              "pink_background",
              "red_background",
            ],
            "type": "string",
          },
          "italic": {
            "type": "boolean",
          },
          "strikethrough": {
            "type": "boolean",
          },
          "underline": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "AnnotationResponse": {
        "properties": {
          "bold": {
            "type": "boolean",
          },
          "code": {
            "type": "boolean",
          },
          "color": {
            "enum": [
              "default",
              "gray",
              "brown",
              "orange",
              "yellow",
              "green",
              "blue",
              "purple",
              "pink",
              "red",
              "gray_background",
              "brown_background",
              "orange_background",
              "yellow_background",
              "green_background",
              "blue_background",
              "purple_background",
              "pink_background",
              "red_background",
            ],
            "type": "string",
          },
          "italic": {
            "type": "boolean",
          },
          "strikethrough": {
            "type": "boolean",
          },
          "underline": {
            "type": "boolean",
          },
        },
        "required": [
          "bold",
          "italic",
          "strikethrough",
          "underline",
          "code",
          "color",
        ],
        "type": "object",
      },
      "AppendBlockChildrenParameters": {
        "properties": {
          "children": {
            "items": {
              "$ref": "#/components/schemas/BlockObjectRequest",
            },
            "type": "array",
          },
        },
        "required": [
          "children",
        ],
        "type": "object",
      },
      "AppendBlockChildrenResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "object": {
            "enum": [
              "list",
            ],
            "type": "string",
          },
          "results": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PartialBlockObjectResponse",
                },
                {
                  "$ref": "#/components/schemas/BlockObjectResponse",
                },
              ],
            },
            "type": "array",
          },
        },
        "required": [
          "object",
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "BlockObjectRequest": {
        "oneOf": [
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "paragraph": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "paragraph",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "paragraph",
            ],
            "type": "object",
          },
          {
            "properties": {
              "heading_1": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "heading_1",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "heading_1",
            ],
            "type": "object",
          },
          {
            "properties": {
              "heading_2": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "heading_2",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "heading_2",
            ],
            "type": "object",
          },
          {
            "properties": {
              "heading_3": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "heading_3",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "heading_3",
            ],
            "type": "object",
          },
          {
            "properties": {
              "bulleted_list_item": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "bulleted_list_item",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "bulleted_list_item",
            ],
            "type": "object",
          },
          {
            "properties": {
              "numbered_list_item": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "numbered_list_item",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "numbered_list_item",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "to_do": {
                "properties": {
                  "checked": {
                    "type": "boolean",
                  },
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                  "checked",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "to_do",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "to_do",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "toggle": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "toggle",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "toggle",
            ],
            "type": "object",
          },
          {
            "properties": {
              "code": {
                "properties": {
                  "caption": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                  "language": {
                    "type": "string",
                  },
                  "rich_text": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "rich_text",
                  "language",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "code",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "code",
            ],
            "type": "object",
          },
          {
            "properties": {
              "child_page": {
                "properties": {
                  "title": {
                    "type": "string",
                  },
                },
                "required": [
                  "title",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "child_page",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "child_page",
            ],
            "type": "object",
          },
          {
            "properties": {
              "child_database": {
                "properties": {
                  "title": {
                    "type": "string",
                  },
                },
                "required": [
                  "title",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "child_database",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "child_database",
            ],
            "type": "object",
          },
          {
            "properties": {
              "embed": {
                "properties": {
                  "caption": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                  "url": {
                    "type": "string",
                  },
                },
                "required": [
                  "url",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "embed",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "embed",
            ],
            "type": "object",
          },
          {
            "properties": {
              "image": {
                "properties": {
                  "caption": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                },
                "required": [
                  "external",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "image",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "image",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "video",
                ],
                "type": "string",
              },
              "video": {
                "properties": {
                  "caption": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                },
                "required": [
                  "external",
                ],
                "type": "object",
              },
            },
            "required": [
              "object",
              "type",
              "video",
            ],
            "type": "object",
          },
          {
            "properties": {
              "file": {
                "properties": {
                  "caption": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                },
                "required": [
                  "external",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "file",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "file",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "pdf": {
                "properties": {
                  "caption": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                },
                "required": [
                  "external",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "pdf",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "pdf",
            ],
            "type": "object",
          },
          {
            "properties": {
              "bookmark": {
                "properties": {
                  "caption": {
                    "items": {
                      "$ref": "#/components/schemas/RichTextItemRequest",
                    },
                    "type": "array",
                  },
                  "url": {
                    "type": "string",
                  },
                },
                "required": [
                  "url",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "bookmark",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "bookmark",
            ],
            "type": "object",
          },
          {
            "properties": {
              "equation": {
                "properties": {
                  "expression": {
                    "type": "string",
                  },
                },
                "required": [
                  "expression",
                ],
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "equation",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "equation",
            ],
            "type": "object",
          },
          {
            "properties": {
              "divider": {
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "divider",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "divider",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "table_of_contents": {
                "properties": {
                  "color": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
              "type": {
                "enum": [
                  "table_of_contents",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "table_of_contents",
            ],
            "type": "object",
          },
          {
            "properties": {
              "column_list": {
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "column_list",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "column_list",
            ],
            "type": "object",
          },
          {
            "properties": {
              "column": {
                "type": "object",
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "column",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "column",
            ],
            "type": "object",
          },
          {
            "properties": {
              "link_to_page": {
                "oneOf": [
                  {
                    "properties": {
                      "page_id": {
                        "type": "string",
                      },
                      "type": {
                        "enum": [
                          "page_id",
                        ],
                        "type": "string",
                      },
                    },
                    "required": [
                      "type",
                      "page_id",
                    ],
                    "type": "object",
                  },
                  {
                    "properties": {
                      "database_id": {
                        "type": "string",
                      },
                      "type": {
                        "enum": [
                          "database_id",
                        ],
                        "type": "string",
                      },
                    },
                    "required": [
                      "type",
                      "database_id",
                    ],
                    "type": "object",
                  },
                ],
              },
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "type": {
                "enum": [
                  "link_to_page",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "link_to_page",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "table": {
                "properties": {
                  "children": {
                    "items": {
                      "$ref": "#/components/schemas/BlockObjectRequest",
                    },
                    "type": "array",
                  },
                  "has_column_header": {
                    "type": "boolean",
                  },
                  "has_row_header": {
                    "type": "boolean",
                  },
                  "table_width": {
                    "type": "integer",
                  },
                },
                "required": [
                  "table_width",
                  "children",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "table",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "table",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "table_row": {
                "properties": {
                  "cells": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/RichTextItemRequest",
                      },
                      "type": "array",
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "cells",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "table_row",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "table_row",
            ],
            "type": "object",
          },
          {
            "properties": {
              "object": {
                "enum": [
                  "block",
                ],
                "type": "string",
              },
              "synced_block": {
                "properties": {
                  "children": {
                    "items": {
                      "$ref": "#/components/schemas/BlockObjectRequest",
                    },
                    "type": "array",
                  },
                  "synced_from": {
                    "oneOf": [
                      {
                        "properties": {
                          "block_id": {
                            "type": "string",
                          },
                          "type": {
                            "enum": [
                              "block_id",
                            ],
                            "type": "string",
                          },
                        },
                        "required": [
                          "type",
                          "block_id",
                        ],
                        "type": "object",
                      },
                      {
                        "type": "null",
                      },
                    ],
                  },
                },
                "type": "object",
              },
              "type": {
                "enum": [
                  "synced_block",
                ],
                "type": "string",
              },
            },
            "required": [
              "object",
              "type",
              "synced_block",
            ],
            "type": "object",
          },
        ],
      },
      "BlockObjectResponse": {
        "properties": {
          "archived": {
            "type": "boolean",
          },
          "created_time": {
            "type": "string",
          },
          "has_children": {
            "type": "boolean",
          },
          "id": {
            "type": "string",
          },
          "last_edited_time": {
            "type": "string",
          },
          "object": {
            "enum": [
              "block",
            ],
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
          "type",
          "created_time",
          "last_edited_time",
          "has_children",
          "archived",
        ],
        "type": "object",
      },
      "CheckboxPropertyFilter": {
        "properties": {
          "does_not_equal": {
            "type": "boolean",
          },
          "equals": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "CheckboxPropertyResponse": {
        "properties": {
          "checkbox": {
            "type": "object",
          },
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "checkbox",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "checkbox",
        ],
        "type": "object",
      },
      "CommentObjectResponse": {
        "properties": {
          "created_by": {
            "$ref": "#/components/schemas/PartialUserObjectResponse",
          },
          "created_time": {
            "type": "string",
          },
          "discussion_id": {
            "type": "string",
          },
          "id": {
            "type": "string",
          },
          "last_edited_time": {
            "type": "string",
          },
          "object": {
            "enum": [
              "comment",
            ],
            "type": "string",
          },
          "parent": {
            "oneOf": [
              {
                "properties": {
                  "page_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "page_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "page_id",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "block_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "block_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "block_id",
                ],
                "type": "object",
              },
            ],
          },
          "rich_text": {
            "items": {
              "$ref": "#/components/schemas/RichTextItemResponse",
            },
            "type": "array",
          },
        },
        "required": [
          "object",
          "id",
          "parent",
          "discussion_id",
          "rich_text",
          "created_by",
          "created_time",
          "last_edited_time",
        ],
        "type": "object",
      },
      "CompoundFilter": {
        "properties": {
          "and": {
            "items": {
              "$ref": "#/components/schemas/PropertyFilter",
            },
            "type": "array",
          },
          "or": {
            "items": {
              "$ref": "#/components/schemas/PropertyFilter",
            },
            "type": "array",
          },
        },
        "type": "object",
      },
      "CreateCommentParameters": {
        "oneOf": [
          {
            "properties": {
              "parent": {
                "properties": {
                  "page_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "page_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "page_id",
                ],
                "type": "object",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "required": [
              "parent",
              "rich_text",
            ],
            "type": "object",
          },
          {
            "properties": {
              "discussion_id": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "required": [
              "discussion_id",
              "rich_text",
            ],
            "type": "object",
          },
        ],
      },
      "CreateDatabaseParameters": {
        "properties": {
          "cover": {
            "oneOf": [
              {
                "properties": {
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "external",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "external",
                ],
                "type": "object",
              },
              {
                "type": "null",
              },
            ],
          },
          "description": {
            "items": {
              "$ref": "#/components/schemas/RichTextItemRequest",
            },
            "type": "array",
          },
          "icon": {
            "oneOf": [
              {
                "properties": {
                  "emoji": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "emoji",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "emoji",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "external",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "external",
                ],
                "type": "object",
              },
              {
                "type": "null",
              },
            ],
          },
          "is_inline": {
            "type": "boolean",
          },
          "parent": {
            "oneOf": [
              {
                "properties": {
                  "page_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "page_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "page_id",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "database_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "database_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "database_id",
                ],
                "type": "object",
              },
            ],
          },
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/PropertySchema",
            },
            "type": "object",
          },
          "title": {
            "items": {
              "$ref": "#/components/schemas/RichTextItemRequest",
            },
            "type": "array",
          },
        },
        "required": [
          "parent",
          "properties",
          "title",
        ],
        "type": "object",
      },
      "CreatePageParameters": {
        "properties": {
          "parent": {
            "oneOf": [
              {
                "properties": {
                  "page_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "page_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "page_id",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "database_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "database_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "database_id",
                ],
                "type": "object",
              },
            ],
            "type": "object",
          },
          "properties": {
            "additionalProperties": {
              "oneOf": [
                {
                  "properties": {
                    "title": {
                      "items": {
                        "$ref": "#/components/schemas/RichTextItemRequest",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "title",
                  ],
                  "type": "object",
                },
                {
                  "properties": {
                    "rich_text": {
                      "items": {
                        "$ref": "#/components/schemas/RichTextItemRequest",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "rich_text",
                  ],
                  "type": "object",
                },
                {
                  "properties": {
                    "number": {
                      "type": [
                        "number",
                        "null",
                      ],
                    },
                  },
                  "required": [
                    "number",
                  ],
                  "type": "object",
                },
                {
                  "properties": {
                    "select": {
                      "properties": {
                        "name": {
                          "type": "string",
                        },
                      },
                      "required": [
                        "name",
                      ],
                      "type": [
                        "object",
                        "null",
                      ],
                    },
                  },
                  "required": [
                    "select",
                  ],
                  "type": "object",
                },
              ],
            },
            "type": "object",
          },
        },
        "required": [
          "parent",
          "properties",
        ],
        "type": "object",
      },
      "CreatedByPropertyResponse": {
        "properties": {
          "created_by": {
            "type": "object",
          },
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "created_by",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "created_by",
        ],
        "type": "object",
      },
      "CreatedTimePropertyResponse": {
        "properties": {
          "created_time": {
            "type": "object",
          },
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "created_time",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "created_time",
        ],
        "type": "object",
      },
      "DatabaseObjectResponse": {
        "properties": {
          "archived": {
            "type": "boolean",
          },
          "cover": {
            "oneOf": [
              {
                "properties": {
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "external",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "external",
                ],
                "type": "object",
              },
              {
                "type": "null",
              },
            ],
          },
          "created_by": {
            "$ref": "#/components/schemas/PartialUserObjectResponse",
          },
          "created_time": {
            "type": "string",
          },
          "description": {
            "items": {
              "$ref": "#/components/schemas/RichTextItemResponse",
            },
            "type": "array",
          },
          "icon": {
            "oneOf": [
              {
                "properties": {
                  "emoji": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "emoji",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "emoji",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "external",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "external",
                ],
                "type": "object",
              },
              {
                "type": "null",
              },
            ],
          },
          "id": {
            "type": "string",
          },
          "is_inline": {
            "type": "boolean",
          },
          "last_edited_by": {
            "$ref": "#/components/schemas/PartialUserObjectResponse",
          },
          "last_edited_time": {
            "type": "string",
          },
          "object": {
            "enum": [
              "database",
            ],
            "type": "string",
          },
          "parent": {
            "oneOf": [
              {
                "properties": {
                  "page_id": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "page_id",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "page_id",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "workspace",
                    ],
                    "type": "string",
                  },
                  "workspace": {
                    "enum": [
                      true,
                    ],
                    "type": "boolean",
                  },
                },
                "required": [
                  "type",
                  "workspace",
                ],
                "type": "object",
              },
            ],
          },
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/DatabasePropertyConfigResponse",
            },
            "type": "object",
          },
          "title": {
            "items": {
              "$ref": "#/components/schemas/RichTextItemResponse",
            },
            "type": "array",
          },
          "url": {
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
          "created_time",
          "created_by",
          "last_edited_time",
          "last_edited_by",
          "title",
          "description",
          "is_inline",
          "properties",
          "parent",
          "url",
          "archived",
        ],
        "type": "object",
      },
      "DatabasePropertyConfigResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TitlePropertyResponse",
          },
          {
            "$ref": "#/components/schemas/RichTextPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/NumberPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/SelectPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/MultiSelectPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/DatePropertyResponse",
          },
          {
            "$ref": "#/components/schemas/PeoplePropertyResponse",
          },
          {
            "$ref": "#/components/schemas/FilePropertyResponse",
          },
          {
            "$ref": "#/components/schemas/CheckboxPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/URLPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/EmailPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/PhoneNumberPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/FormulaPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/RelationPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/RollupPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/CreatedTimePropertyResponse",
          },
          {
            "$ref": "#/components/schemas/CreatedByPropertyResponse",
          },
          {
            "$ref": "#/components/schemas/LastEditedTimePropertyResponse",
          },
          {
            "$ref": "#/components/schemas/LastEditedByPropertyResponse",
          },
        ],
      },
      "DatePropertyFilter": {
        "properties": {
          "after": {
            "type": "string",
          },
          "before": {
            "type": "string",
          },
          "equals": {
            "type": "string",
          },
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
          "next_month": {},
          "next_week": {},
          "next_year": {},
          "on_or_after": {
            "type": "string",
          },
          "on_or_before": {
            "type": "string",
          },
          "past_month": {},
          "past_week": {},
          "past_year": {},
        },
        "type": "object",
      },
      "DatePropertyResponse": {
        "properties": {
          "date": {
            "type": "object",
          },
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "date",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "date",
        ],
        "type": "object",
      },
      "DateRequest": {
        "properties": {
          "end": {
            "type": [
              "string",
              "null",
            ],
          },
          "start": {
            "type": "string",
          },
          "time_zone": {
            "type": [
              "string",
              "null",
            ],
          },
        },
        "required": [
          "start",
        ],
        "type": "object",
      },
      "DateResponse": {
        "properties": {
          "end": {
            "type": [
              "string",
              "null",
            ],
          },
          "start": {
            "type": "string",
          },
          "time_zone": {
            "type": [
              "string",
              "null",
            ],
          },
        },
        "required": [
          "start",
          "end",
          "time_zone",
        ],
        "type": "object",
      },
      "EmailPropertyResponse": {
        "properties": {
          "email": {
            "type": "object",
          },
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "email",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "email",
        ],
        "type": "object",
      },
      "EquationRichTextItemResponse": {
        "properties": {
          "annotations": {
            "$ref": "#/components/schemas/AnnotationResponse",
          },
          "equation": {
            "properties": {
              "expression": {
                "type": "string",
              },
            },
            "required": [
              "expression",
            ],
            "type": "object",
          },
          "href": {
            "type": [
              "string",
              "null",
            ],
          },
          "plain_text": {
            "type": "string",
          },
          "type": {
            "enum": [
              "equation",
            ],
            "type": "string",
          },
        },
        "required": [
          "type",
          "equation",
          "annotations",
          "plain_text",
          "href",
        ],
        "type": "object",
      },
      "FilePropertyResponse": {
        "properties": {
          "files": {
            "type": "object",
          },
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "files",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "files",
        ],
        "type": "object",
      },
      "FilesPropertyFilter": {
        "properties": {
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "FormulaPropertyResponse": {
        "properties": {
          "formula": {
            "properties": {
              "expression": {
                "type": "string",
              },
            },
            "required": [
              "expression",
            ],
            "type": "object",
          },
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "formula",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "formula",
        ],
        "type": "object",
      },
      "LastEditedByPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "last_edited_by": {
            "type": "object",
          },
          "type": {
            "enum": [
              "last_edited_by",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "last_edited_by",
        ],
        "type": "object",
      },
      "LastEditedTimePropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "last_edited_time": {
            "type": "object",
          },
          "type": {
            "enum": [
              "last_edited_time",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "last_edited_time",
        ],
        "type": "object",
      },
      "ListBlockChildrenResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "object": {
            "enum": [
              "list",
            ],
            "type": "string",
          },
          "results": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PartialBlockObjectResponse",
                },
                {
                  "$ref": "#/components/schemas/BlockObjectResponse",
                },
              ],
            },
            "type": "array",
          },
        },
        "required": [
          "object",
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "ListCommentsResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "object": {
            "enum": [
              "list",
            ],
            "type": "string",
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/CommentObjectResponse",
            },
            "type": "array",
          },
        },
        "required": [
          "object",
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "ListDatabasesResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "object": {
            "enum": [
              "list",
            ],
            "type": "string",
          },
          "results": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PartialDatabaseObjectResponse",
                },
                {
                  "$ref": "#/components/schemas/DatabaseObjectResponse",
                },
              ],
            },
            "type": "array",
          },
        },
        "required": [
          "object",
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "ListUsersResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/UserObjectResponse",
            },
            "type": "array",
          },
        },
        "required": [
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "MentionRichTextItemResponse": {
        "properties": {
          "annotations": {
            "$ref": "#/components/schemas/AnnotationResponse",
          },
          "href": {
            "type": [
              "string",
              "null",
            ],
          },
          "mention": {
            "oneOf": [
              {
                "properties": {
                  "type": {
                    "enum": [
                      "user",
                    ],
                    "type": "string",
                  },
                  "user": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/PartialUserObjectResponse",
                      },
                      {
                        "$ref": "#/components/schemas/UserObjectResponse",
                      },
                    ],
                  },
                },
                "required": [
                  "type",
                  "user",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "date": {
                    "$ref": "#/components/schemas/DateResponse",
                  },
                  "type": {
                    "enum": [
                      "date",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "date",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "link_preview": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "link_preview",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "link_preview",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "page": {
                    "properties": {
                      "id": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "id",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "page",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "page",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "database": {
                    "properties": {
                      "id": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "id",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "database",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "database",
                ],
                "type": "object",
              },
            ],
          },
          "plain_text": {
            "type": "string",
          },
          "type": {
            "enum": [
              "mention",
            ],
            "type": "string",
          },
        },
        "required": [
          "type",
          "mention",
          "annotations",
          "plain_text",
          "href",
        ],
        "type": "object",
      },
      "MultiSelectPropertyFilter": {
        "properties": {
          "contains": {
            "type": "string",
          },
          "does_not_contain": {
            "type": "string",
          },
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "MultiSelectPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "multi_select": {
            "properties": {
              "options": {
                "items": {
                  "$ref": "#/components/schemas/SelectOption",
                },
                "type": "array",
              },
            },
            "required": [
              "options",
            ],
            "type": "object",
          },
          "type": {
            "enum": [
              "multi_select",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "multi_select",
        ],
        "type": "object",
      },
      "NumberPropertyFilter": {
        "properties": {
          "does_not_equal": {
            "type": "number",
          },
          "equals": {
            "type": "number",
          },
          "greater_than": {
            "type": "number",
          },
          "greater_than_or_equal_to": {
            "type": "number",
          },
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
          "less_than": {
            "type": "number",
          },
          "less_than_or_equal_to": {
            "type": "number",
          },
        },
        "type": "object",
      },
      "NumberPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "number": {
            "properties": {
              "format": {
                "type": "string",
              },
            },
            "required": [
              "format",
            ],
            "type": "object",
          },
          "type": {
            "enum": [
              "number",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "number",
        ],
        "type": "object",
      },
      "OauthTokenParameters": {
        "properties": {
          "code": {
            "type": "string",
          },
          "external_account": {
            "properties": {
              "key": {
                "type": "string",
              },
              "name": {
                "type": "string",
              },
            },
            "required": [
              "key",
              "name",
            ],
            "type": "object",
          },
          "grant_type": {
            "type": "string",
          },
          "redirect_uri": {
            "type": "string",
          },
        },
        "required": [
          "grant_type",
          "code",
        ],
        "type": "object",
      },
      "OauthTokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
          },
          "bot_id": {
            "type": "string",
          },
          "duplicated_template_id": {
            "type": [
              "string",
              "null",
            ],
          },
          "owner": {
            "oneOf": [
              {
                "properties": {
                  "type": {
                    "enum": [
                      "user",
                    ],
                    "type": "string",
                  },
                  "user": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/UserObjectResponse",
                      },
                      {
                        "$ref": "#/components/schemas/PartialUserObjectResponse",
                      },
                    ],
                  },
                },
                "required": [
                  "type",
                  "user",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "workspace",
                    ],
                    "type": "string",
                  },
                  "workspace": {
                    "enum": [
                      true,
                    ],
                    "type": "boolean",
                  },
                },
                "required": [
                  "type",
                  "workspace",
                ],
                "type": "object",
              },
            ],
          },
          "token_type": {
            "enum": [
              "bearer",
            ],
            "type": "string",
          },
          "workspace_icon": {
            "type": [
              "string",
              "null",
            ],
          },
          "workspace_id": {
            "type": "string",
          },
          "workspace_name": {
            "type": [
              "string",
              "null",
            ],
          },
        },
        "required": [
          "access_token",
          "token_type",
          "bot_id",
          "workspace_name",
          "workspace_icon",
          "workspace_id",
          "owner",
          "duplicated_template_id",
        ],
        "type": "object",
      },
      "PageObjectResponse": {
        "properties": {
          "archived": {
            "type": "boolean",
          },
          "created_time": {
            "type": "string",
          },
          "id": {
            "type": "string",
          },
          "last_edited_time": {
            "type": "string",
          },
          "object": {
            "enum": [
              "page",
            ],
            "type": "string",
          },
          "url": {
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
          "created_time",
          "last_edited_time",
          "archived",
          "url",
        ],
        "type": "object",
      },
      "PartialBlockObjectResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "object": {
            "enum": [
              "block",
            ],
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
        ],
        "type": "object",
      },
      "PartialCommentObjectResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "object": {
            "enum": [
              "comment",
            ],
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
        ],
        "type": "object",
      },
      "PartialDatabaseObjectResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "object": {
            "enum": [
              "database",
            ],
            "type": "string",
          },
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/DatabasePropertyConfigResponse",
            },
            "type": "object",
          },
        },
        "required": [
          "object",
          "id",
          "properties",
        ],
        "type": "object",
      },
      "PartialPageObjectResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "object": {
            "enum": [
              "page",
            ],
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
        ],
        "type": "object",
      },
      "PartialUserObjectResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "object": {
            "enum": [
              "user",
            ],
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
        ],
        "type": "object",
      },
      "PeoplePropertyFilter": {
        "properties": {
          "contains": {
            "type": "string",
          },
          "does_not_contain": {
            "type": "string",
          },
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "PeoplePropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "people": {
            "type": "object",
          },
          "type": {
            "enum": [
              "people",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "people",
        ],
        "type": "object",
      },
      "PhoneNumberPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "phone_number": {
            "type": "object",
          },
          "type": {
            "enum": [
              "phone_number",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "phone_number",
        ],
        "type": "object",
      },
      "PropertyFilter": {
        "oneOf": [
          {
            "properties": {
              "property": {
                "type": "string",
              },
              "title": {
                "$ref": "#/components/schemas/TextPropertyFilter",
              },
            },
            "required": [
              "property",
              "title",
            ],
            "type": "object",
          },
          {
            "properties": {
              "property": {
                "type": "string",
              },
              "rich_text": {
                "$ref": "#/components/schemas/TextPropertyFilter",
              },
            },
            "required": [
              "property",
              "rich_text",
            ],
            "type": "object",
          },
          {
            "properties": {
              "number": {
                "$ref": "#/components/schemas/NumberPropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "number",
            ],
            "type": "object",
          },
          {
            "properties": {
              "checkbox": {
                "$ref": "#/components/schemas/CheckboxPropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "checkbox",
            ],
            "type": "object",
          },
          {
            "properties": {
              "property": {
                "type": "string",
              },
              "select": {
                "$ref": "#/components/schemas/SelectPropertyFilter",
              },
            },
            "required": [
              "property",
              "select",
            ],
            "type": "object",
          },
          {
            "properties": {
              "multi_select": {
                "$ref": "#/components/schemas/MultiSelectPropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "multi_select",
            ],
            "type": "object",
          },
          {
            "properties": {
              "date": {
                "$ref": "#/components/schemas/DatePropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "date",
            ],
            "type": "object",
          },
          {
            "properties": {
              "people": {
                "$ref": "#/components/schemas/PeoplePropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "people",
            ],
            "type": "object",
          },
          {
            "properties": {
              "files": {
                "$ref": "#/components/schemas/FilesPropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "files",
            ],
            "type": "object",
          },
          {
            "properties": {
              "property": {
                "type": "string",
              },
              "url": {
                "$ref": "#/components/schemas/TextPropertyFilter",
              },
            },
            "required": [
              "property",
              "url",
            ],
            "type": "object",
          },
          {
            "properties": {
              "email": {
                "$ref": "#/components/schemas/TextPropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "email",
            ],
            "type": "object",
          },
          {
            "properties": {
              "phone_number": {
                "$ref": "#/components/schemas/TextPropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "phone_number",
            ],
            "type": "object",
          },
          {
            "properties": {
              "property": {
                "type": "string",
              },
              "relation": {
                "$ref": "#/components/schemas/RelationPropertyFilter",
              },
            },
            "required": [
              "property",
              "relation",
            ],
            "type": "object",
          },
          {
            "properties": {
              "created_by": {
                "$ref": "#/components/schemas/PeoplePropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "created_by",
            ],
            "type": "object",
          },
          {
            "properties": {
              "created_time": {
                "$ref": "#/components/schemas/DatePropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "created_time",
            ],
            "type": "object",
          },
          {
            "properties": {
              "last_edited_by": {
                "$ref": "#/components/schemas/PeoplePropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "last_edited_by",
            ],
            "type": "object",
          },
          {
            "properties": {
              "last_edited_time": {
                "$ref": "#/components/schemas/DatePropertyFilter",
              },
              "property": {
                "type": "string",
              },
            },
            "required": [
              "property",
              "last_edited_time",
            ],
            "type": "object",
          },
          {
            "properties": {
              "created_time": {
                "$ref": "#/components/schemas/DatePropertyFilter",
              },
              "timestamp": {
                "enum": [
                  "created_time",
                  "last_edited_time",
                ],
                "type": "string",
              },
            },
            "required": [
              "timestamp",
              "created_time",
            ],
            "type": "object",
          },
          {
            "properties": {
              "last_edited_time": {
                "$ref": "#/components/schemas/DatePropertyFilter",
              },
              "timestamp": {
                "enum": [
                  "created_time",
                  "last_edited_time",
                ],
                "type": "string",
              },
            },
            "required": [
              "timestamp",
              "last_edited_time",
            ],
            "type": "object",
          },
        ],
      },
      "PropertyItemListResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/PropertyItemObjectResponse",
            },
            "type": "array",
          },
        },
        "required": [
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "PropertyItemObjectResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "required": [
          "type",
          "id",
        ],
        "type": "object",
      },
      "PropertySchema": {
        "properties": {
          "name": {
            "type": [
              "string",
              "null",
            ],
          },
          "type": {
            "type": "string",
          },
        },
        "required": [
          "type",
        ],
        "type": "object",
      },
      "PropertyUpdateSchema": {
        "properties": {
          "name": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "QueryDatabaseParameters": {
        "properties": {
          "archived": {
            "type": "boolean",
          },
          "filter": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PropertyFilter",
              },
              {
                "$ref": "#/components/schemas/CompoundFilter",
              },
            ],
          },
          "page_size": {
            "type": "integer",
          },
          "sorts": {
            "items": {
              "oneOf": [
                {
                  "properties": {
                    "direction": {
                      "enum": [
                        "ascending",
                        "descending",
                      ],
                      "type": "string",
                    },
                    "property": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "property",
                    "direction",
                  ],
                  "type": "object",
                },
                {
                  "properties": {
                    "direction": {
                      "enum": [
                        "ascending",
                        "descending",
                      ],
                      "type": "string",
                    },
                    "timestamp": {
                      "enum": [
                        "created_time",
                        "last_edited_time",
                      ],
                      "type": "string",
                    },
                  },
                  "required": [
                    "timestamp",
                    "direction",
                  ],
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
          "start_cursor": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "QueryDatabaseResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "object": {
            "enum": [
              "list",
            ],
            "type": "string",
          },
          "results": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PageObjectResponse",
                },
                {
                  "$ref": "#/components/schemas/PartialPageObjectResponse",
                },
              ],
            },
            "type": "array",
          },
        },
        "required": [
          "object",
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "RelationPropertyFilter": {
        "properties": {
          "contains": {
            "type": "string",
          },
          "does_not_contain": {
            "type": "string",
          },
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "RelationPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "relation": {
            "properties": {
              "database_id": {
                "type": "string",
              },
              "synced_property_id": {
                "type": "string",
              },
              "synced_property_name": {
                "type": "string",
              },
            },
            "required": [
              "database_id",
              "synced_property_name",
              "synced_property_id",
            ],
            "type": "object",
          },
          "type": {
            "enum": [
              "relation",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "relation",
        ],
        "type": "object",
      },
      "RichTextItemRequest": {
        "oneOf": [
          {
            "properties": {
              "annotations": {
                "$ref": "#/components/schemas/AnnotationRequest",
              },
              "text": {
                "properties": {
                  "content": {
                    "type": "string",
                  },
                  "link": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": [
                      "object",
                      "null",
                    ],
                  },
                },
                "required": [
                  "content",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "text",
                ],
                "type": "string",
              },
            },
            "required": [
              "text",
            ],
            "type": "object",
          },
          {
            "properties": {
              "annotations": {
                "$ref": "#/components/schemas/AnnotationRequest",
              },
              "mention": {
                "oneOf": [
                  {
                    "properties": {
                      "user": {
                        "oneOf": [
                          {
                            "properties": {
                              "id": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "id",
                            ],
                            "type": "object",
                          },
                          {
                            "$ref": "#/components/schemas/UserObjectResponse",
                          },
                        ],
                      },
                    },
                    "required": [
                      "user",
                    ],
                    "type": "object",
                  },
                  {
                    "properties": {
                      "page": {
                        "properties": {
                          "id": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "id",
                        ],
                        "type": "object",
                      },
                    },
                    "required": [
                      "page",
                    ],
                    "type": "object",
                  },
                  {
                    "properties": {
                      "database": {
                        "properties": {
                          "id": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "id",
                        ],
                        "type": "object",
                      },
                    },
                    "required": [
                      "database",
                    ],
                    "type": "object",
                  },
                  {
                    "properties": {
                      "date": {
                        "$ref": "#/components/schemas/DateRequest",
                      },
                    },
                    "required": [
                      "date",
                    ],
                    "type": "object",
                  },
                ],
              },
              "type": {
                "enum": [
                  "mention",
                ],
                "type": "string",
              },
            },
            "required": [
              "mention",
            ],
            "type": "object",
          },
          {
            "properties": {
              "annotations": {
                "$ref": "#/components/schemas/AnnotationRequest",
              },
              "equation": {
                "properties": {
                  "expression": {
                    "type": "string",
                  },
                },
                "required": [
                  "expression",
                ],
                "type": "object",
              },
              "type": {
                "enum": [
                  "equation",
                ],
                "type": "string",
              },
            },
            "required": [
              "equation",
            ],
            "type": "object",
          },
        ],
      },
      "RichTextItemResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TextRichTextItemResponse",
          },
          {
            "$ref": "#/components/schemas/MentionRichTextItemResponse",
          },
          {
            "$ref": "#/components/schemas/EquationRichTextItemResponse",
          },
        ],
      },
      "RichTextPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "rich_text": {
            "type": "object",
          },
          "type": {
            "enum": [
              "rich_text",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "rich_text",
        ],
        "type": "object",
      },
      "RollupPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "rollup": {
            "properties": {
              "function": {
                "type": "string",
              },
              "relation_property_id": {
                "type": "string",
              },
              "relation_property_name": {
                "type": "string",
              },
              "rollup_property_id": {
                "type": "string",
              },
              "rollup_property_name": {
                "type": "string",
              },
            },
            "required": [
              "relation_property_name",
              "relation_property_id",
              "rollup_property_name",
              "rollup_property_id",
              "function",
            ],
            "type": "object",
          },
          "type": {
            "enum": [
              "rollup",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "rollup",
        ],
        "type": "object",
      },
      "SearchParameters": {
        "properties": {
          "filter": {
            "properties": {
              "property": {
                "enum": [
                  "object",
                ],
                "type": "string",
              },
              "value": {
                "enum": [
                  "page",
                  "database",
                ],
                "type": "string",
              },
            },
            "required": [
              "value",
              "property",
            ],
            "type": "object",
          },
          "page_size": {
            "type": "integer",
          },
          "query": {
            "type": "string",
          },
          "sort": {
            "properties": {
              "direction": {
                "enum": [
                  "ascending",
                  "descending",
                ],
                "type": "string",
              },
              "timestamp": {
                "enum": [
                  "last_edited_time",
                ],
                "type": "string",
              },
            },
            "required": [
              "direction",
              "timestamp",
            ],
            "type": "object",
          },
          "start_cursor": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "SearchResponse": {
        "properties": {
          "has_more": {
            "type": "boolean",
          },
          "next_cursor": {
            "type": [
              "string",
              "null",
            ],
          },
          "object": {
            "enum": [
              "list",
            ],
            "type": "string",
          },
          "results": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PageObjectResponse",
                },
                {
                  "$ref": "#/components/schemas/PartialPageObjectResponse",
                },
                {
                  "$ref": "#/components/schemas/PartialDatabaseObjectResponse",
                },
                {
                  "$ref": "#/components/schemas/DatabaseObjectResponse",
                },
              ],
            },
            "type": "array",
          },
        },
        "required": [
          "object",
          "results",
          "next_cursor",
          "has_more",
        ],
        "type": "object",
      },
      "SelectOption": {
        "properties": {
          "color": {
            "type": "string",
          },
          "id": {
            "type": "string",
          },
          "name": {
            "type": "string",
          },
        },
        "required": [
          "id",
          "name",
          "color",
        ],
        "type": "object",
      },
      "SelectPropertyFilter": {
        "properties": {
          "does_not_equal": {
            "type": "string",
          },
          "equals": {
            "type": "string",
          },
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "SelectPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "select": {
            "properties": {
              "options": {
                "items": {
                  "$ref": "#/components/schemas/SelectOption",
                },
                "type": "array",
              },
            },
            "required": [
              "options",
            ],
            "type": "object",
          },
          "type": {
            "enum": [
              "select",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "select",
        ],
        "type": "object",
      },
      "TextPropertyFilter": {
        "properties": {
          "contains": {
            "type": "string",
          },
          "does_not_contain": {
            "type": "string",
          },
          "does_not_equal": {
            "type": "string",
          },
          "ends_with": {
            "type": "string",
          },
          "equals": {
            "type": "string",
          },
          "is_empty": {
            "type": "boolean",
          },
          "is_not_empty": {
            "type": "boolean",
          },
          "starts_with": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "TextRichTextItemResponse": {
        "properties": {
          "annotations": {
            "$ref": "#/components/schemas/AnnotationResponse",
          },
          "href": {
            "type": [
              "string",
              "null",
            ],
          },
          "plain_text": {
            "type": "string",
          },
          "text": {
            "properties": {
              "content": {
                "type": "string",
              },
              "link": {
                "properties": {
                  "url": {
                    "type": "string",
                  },
                },
                "required": [
                  "url",
                ],
                "type": [
                  "object",
                  "null",
                ],
              },
            },
            "required": [
              "content",
              "link",
            ],
            "type": "object",
          },
          "type": {
            "enum": [
              "text",
            ],
            "type": "string",
          },
        },
        "required": [
          "type",
          "text",
          "annotations",
          "plain_text",
          "href",
        ],
        "type": "object",
      },
      "TitlePropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "title": {
            "type": "object",
          },
          "type": {
            "enum": [
              "title",
            ],
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "title",
        ],
        "type": "object",
      },
      "URLPropertyResponse": {
        "properties": {
          "id": {
            "type": "string",
          },
          "type": {
            "enum": [
              "url",
            ],
            "type": "string",
          },
          "url": {
            "type": "object",
          },
        },
        "required": [
          "id",
          "type",
          "url",
        ],
        "type": "object",
      },
      "UpdateBlockParameters": {
        "properties": {
          "archived": {
            "type": "boolean",
          },
          "bookmark": {
            "properties": {
              "url": {
                "type": "string",
              },
            },
            "type": "object",
          },
          "breadcrumb": {
            "type": "object",
          },
          "bulleted_list_item": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "code": {
            "properties": {
              "language": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "column": {
            "type": "object",
          },
          "column_list": {
            "type": "object",
          },
          "divider": {
            "type": "object",
          },
          "embed": {
            "properties": {
              "url": {
                "type": "string",
              },
            },
            "type": "object",
          },
          "equation": {
            "properties": {
              "expression": {
                "type": "string",
              },
            },
            "type": "object",
          },
          "file": {
            "properties": {
              "external": {
                "properties": {
                  "url": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
            "type": "object",
          },
          "heading_1": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "heading_2": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "heading_3": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "image": {
            "properties": {
              "external": {
                "properties": {
                  "url": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
            "type": "object",
          },
          "link_to_page": {
            "properties": {
              "database_id": {
                "type": "string",
              },
              "page_id": {
                "type": "string",
              },
              "type": {
                "enum": [
                  "page_id",
                  "database_id",
                ],
                "type": "string",
              },
            },
            "type": "object",
          },
          "numbered_list_item": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "paragraph": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "pdf": {
            "properties": {
              "external": {
                "properties": {
                  "url": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
            "type": "object",
          },
          "quote": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "table_of_contents": {
            "properties": {
              "color": {
                "type": "string",
              },
            },
            "type": "object",
          },
          "table_row": {
            "properties": {
              "cells": {
                "items": {
                  "items": {
                    "$ref": "#/components/schemas/RichTextItemRequest",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "to_do": {
            "properties": {
              "checked": {
                "type": "boolean",
              },
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "toggle": {
            "properties": {
              "color": {
                "type": "string",
              },
              "rich_text": {
                "items": {
                  "$ref": "#/components/schemas/RichTextItemRequest",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "video": {
            "properties": {
              "external": {
                "properties": {
                  "url": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
            "type": "object",
          },
        },
        "type": "object",
      },
      "UpdateDatabaseParameters": {
        "properties": {
          "archived": {
            "type": "boolean",
          },
          "cover": {
            "oneOf": [
              {
                "properties": {
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "external",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "external",
                  "type",
                ],
                "type": "object",
              },
              {
                "type": "null",
              },
            ],
          },
          "description": {
            "items": {
              "$ref": "#/components/schemas/RichTextItemRequest",
            },
            "type": "array",
          },
          "icon": {
            "oneOf": [
              {
                "properties": {
                  "emoji": {
                    "type": "string",
                  },
                  "type": {
                    "enum": [
                      "emoji",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "emoji",
                  "type",
                ],
                "type": "object",
              },
              {
                "properties": {
                  "external": {
                    "properties": {
                      "url": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "url",
                    ],
                    "type": "object",
                  },
                  "type": {
                    "enum": [
                      "external",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "external",
                  "type",
                ],
                "type": "object",
              },
              {
                "type": "null",
              },
            ],
          },
          "is_inline": {
            "type": "boolean",
          },
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/PropertyUpdateSchema",
            },
            "type": "object",
          },
          "title": {
            "items": {
              "$ref": "#/components/schemas/RichTextItemRequest",
            },
            "type": "array",
          },
        },
        "type": "object",
      },
      "UpdatePageParameters": {
        "properties": {
          "archived": {
            "type": "boolean",
          },
          "properties": {
            "additionalProperties": {
              "oneOf": [
                {
                  "properties": {
                    "title": {
                      "items": {
                        "$ref": "#/components/schemas/RichTextItemRequest",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "title",
                  ],
                  "type": "object",
                },
                {
                  "properties": {
                    "rich_text": {
                      "items": {
                        "$ref": "#/components/schemas/RichTextItemRequest",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "rich_text",
                  ],
                  "type": "object",
                },
                {
                  "properties": {
                    "number": {
                      "type": [
                        "number",
                        "null",
                      ],
                    },
                  },
                  "required": [
                    "number",
                  ],
                  "type": "object",
                },
                {
                  "properties": {
                    "select": {
                      "properties": {
                        "name": {
                          "type": "string",
                        },
                      },
                      "required": [
                        "name",
                      ],
                      "type": [
                        "object",
                        "null",
                      ],
                    },
                  },
                  "required": [
                    "select",
                  ],
                  "type": "object",
                },
              ],
            },
            "type": "object",
          },
        },
        "type": "object",
      },
      "UserObjectResponse": {
        "properties": {
          "avatar_url": {
            "type": "string",
          },
          "id": {
            "type": "string",
          },
          "name": {
            "type": "string",
          },
          "object": {
            "enum": [
              "user",
            ],
            "type": "string",
          },
          "type": {
            "enum": [
              "person",
              "bot",
            ],
            "type": "string",
          },
        },
        "required": [
          "object",
          "id",
          "type",
          "name",
          "avatar_url",
        ],
        "type": "object",
      },
    },
    "securitySchemes": {
      "oauth2": {
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://api.notion.com/v1/oauth/authorize",
            "scopes": {},
            "tokenUrl": "https://api.notion.com/v1/oauth/token",
          },
        },
        "type": "oauth2",
      },
    },
  },
  "info": {
    "description": "API specification for Notion",
    "title": "Notion API",
    "version": "1.0.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/blocks/{block_id}": {
      "delete": {
        "operationId": "deleteBlock",
        "parameters": [
          {
            "in": "path",
            "name": "block_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PartialBlockObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/BlockObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Delete block",
      },
      "get": {
        "operationId": "getBlock",
        "parameters": [
          {
            "in": "path",
            "name": "block_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PartialBlockObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/BlockObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Get block",
      },
      "patch": {
        "operationId": "updateBlock",
        "parameters": [
          {
            "in": "path",
            "name": "block_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBlockParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PartialBlockObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/BlockObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Update block",
      },
    },
    "/blocks/{block_id}/children": {
      "get": {
        "operationId": "listBlockChildren",
        "parameters": [
          {
            "in": "path",
            "name": "block_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "start_cursor",
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListBlockChildrenResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "List block children",
      },
      "patch": {
        "operationId": "appendBlockChildren",
        "parameters": [
          {
            "in": "path",
            "name": "block_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppendBlockChildrenParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppendBlockChildrenResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Append block children",
      },
    },
    "/comments": {
      "get": {
        "operationId": "listComments",
        "parameters": [
          {
            "in": "query",
            "name": "block_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "start_cursor",
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCommentsResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "List comments",
      },
      "post": {
        "operationId": "createComment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommentParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CommentObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/PartialCommentObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Create comment",
      },
    },
    "/databases": {
      "get": {
        "operationId": "listDatabases",
        "parameters": [
          {
            "in": "query",
            "name": "start_cursor",
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDatabasesResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "List databases",
      },
      "post": {
        "operationId": "createDatabase",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDatabaseParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PartialDatabaseObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/DatabaseObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Create database",
      },
    },
    "/databases/{database_id}": {
      "get": {
        "operationId": "getDatabase",
        "parameters": [
          {
            "in": "path",
            "name": "database_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PartialDatabaseObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/DatabaseObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Get database",
      },
      "patch": {
        "operationId": "updateDatabase",
        "parameters": [
          {
            "in": "path",
            "name": "database_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDatabaseParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PartialDatabaseObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/DatabaseObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Update database",
      },
    },
    "/databases/{database_id}/query": {
      "post": {
        "operationId": "queryDatabase",
        "parameters": [
          {
            "in": "path",
            "name": "database_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "filter_properties",
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryDatabaseParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDatabaseResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Query database",
      },
    },
    "/oauth/token": {
      "post": {
        "operationId": "oauthToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OauthTokenParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthTokenResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "OAuth token",
      },
    },
    "/pages": {
      "post": {
        "operationId": "createPage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePageParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PageObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/PartialPageObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Create page",
      },
    },
    "/pages/{page_id}": {
      "get": {
        "operationId": "getPage",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "filter_properties",
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PageObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/PartialPageObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Get page",
      },
      "patch": {
        "operationId": "updatePage",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePageParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PageObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/PartialPageObjectResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Update page",
      },
    },
    "/pages/{page_id}/properties/{property_id}": {
      "get": {
        "operationId": "getPageProperty",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "property_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "start_cursor",
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PropertyItemObjectResponse",
                    },
                    {
                      "$ref": "#/components/schemas/PropertyItemListResponse",
                    },
                  ],
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Get page property",
      },
    },
    "/search": {
      "post": {
        "operationId": "search",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchParameters",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Search",
      },
    },
    "/users": {
      "get": {
        "operationId": "listUsers",
        "parameters": [
          {
            "in": "query",
            "name": "start_cursor",
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListUsersResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "List users",
      },
    },
    "/users/me": {
      "get": {
        "operationId": "getSelf",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserObjectResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Get current user",
      },
    },
    "/users/{user_id}": {
      "get": {
        "operationId": "getUser",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserObjectResponse",
                },
              },
            },
            "description": "Successful response",
          },
        },
        "summary": "Get user",
      },
    },
  },
  "security": [
    {
      "oauth2": [],
    },
  ],
  "servers": [
    {
      "url": "https://api.notion.so",
    },
  ],
}
`;

exports[`validateOpenAPISpec > open-meteo.yaml (file url) 1`] = `
{
  "components": {
    "schemas": {
      "CurrentWeather": {
        "description": "Current weather conditions with the attributes: time, temperature, wind_speed, wind_direction and weather_code",
        "properties": {
          "temperature": {
            "type": "number",
          },
          "time": {
            "type": "string",
          },
          "weather_code": {
            "type": "integer",
          },
          "wind_direction": {
            "type": "number",
          },
          "wind_speed": {
            "type": "number",
          },
        },
        "required": [
          "time",
          "temperature",
          "wind_speed",
          "wind_direction",
          "weather_code",
        ],
        "type": "object",
      },
      "DailyResponse": {
        "description": "For each selected daily weather variable, data will be returned as a floating point array. Additionally a \`time\` array will be returned with ISO8601 timestamps.",
        "properties": {
          "apparent_temperature_max": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "apparent_temperature_min": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "et0_fao_evapotranspiration": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "precipitation_hours": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "precipitation_sum": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "shortwave_radiation_sum": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "sunrise": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "sunset": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "temperature_2m_max": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "temperature_2m_min": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "time": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "uv_index_clear_sky_max": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "uv_index_max": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "weather_code": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_direction_10m_dominant": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_gusts_10m_max": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_speed_10m_max": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
        },
        "required": [
          "time",
        ],
        "type": "object",
      },
      "HourlyResponse": {
        "description": "For each selected weather variable, data will be returned as a floating point array. Additionally a \`time\` array will be returned with ISO8601 timestamps.",
        "properties": {
          "apparent_temperature": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "cloud_cover": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "cloud_cover_high": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "cloud_cover_low": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "cloud_cover_mid": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "dew_point_2m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "diffuse_radiation": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "direct_normal_irradiance": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "direct_radiation": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "evapotranspiration": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "freezing_level_height": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "precipitation": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "pressure_msl": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "relative_humidity_2m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "shortwave_radiation": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "snow_height": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_moisture_0_1cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_moisture_1_3cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_moisture_27_81cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_moisture_3_9cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_moisture_9_27cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_temperature_0cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_temperature_18cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_temperature_54cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_temperature_6cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "temperature_2m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "time": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "vapour_pressure_deficit": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "weather_code": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_direction_10m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_direction_120m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_direction_180m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_direction_80m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_gusts_10m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_speed_10m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_speed_120m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_speed_180m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_speed_80m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
        },
        "required": [
          "time",
        ],
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {
      "email": "info@open-meteo.com",
      "name": "Open-Meteo",
      "url": "https://open-meteo.com",
    },
    "description": "Open-Meteo offers free weather forecast APIs for open-source developers and non-commercial use. No API key is required.",
    "license": {
      "name": "Attribution 4.0 International (CC BY 4.0)",
      "url": "https://creativecommons.org/licenses/by/4.0/",
    },
    "termsOfService": "https://open-meteo.com/en/features#terms",
    "title": "Open-Meteo APIs",
    "version": "1.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/v1/forecast": {
      "get": {
        "description": "7 day weather variables in hourly and daily resolution for given WGS84 latitude and longitude coordinates. Available worldwide.",
        "parameters": [
          {
            "explode": false,
            "in": "query",
            "name": "hourly",
            "schema": {
              "items": {
                "enum": [
                  "temperature_2m",
                  "relative_humidity_2m",
                  "dew_point_2m",
                  "apparent_temperature",
                  "pressure_msl",
                  "cloud_cover",
                  "cloud_cover_low",
                  "cloud_cover_mid",
                  "cloud_cover_high",
                  "wind_speed_10m",
                  "wind_speed_80m",
                  "wind_speed_120m",
                  "wind_speed_180m",
                  "wind_direction_10m",
                  "wind_direction_80m",
                  "wind_direction_120m",
                  "wind_direction_180m",
                  "wind_gusts_10m",
                  "shortwave_radiation",
                  "direct_radiation",
                  "direct_normal_irradiance",
                  "diffuse_radiation",
                  "vapour_pressure_deficit",
                  "evapotranspiration",
                  "precipitation",
                  "weather_code",
                  "snow_height",
                  "freezing_level_height",
                  "soil_temperature_0cm",
                  "soil_temperature_6cm",
                  "soil_temperature_18cm",
                  "soil_temperature_54cm",
                  "soil_moisture_0_1cm",
                  "soil_moisture_1_3cm",
                  "soil_moisture_3_9cm",
                  "soil_moisture_9_27cm",
                  "soil_moisture_27_81cm",
                ],
                "type": "string",
              },
              "type": "array",
            },
          },
          {
            "in": "query",
            "name": "daily",
            "schema": {
              "items": {
                "enum": [
                  "temperature_2m_max",
                  "temperature_2m_min",
                  "apparent_temperature_max",
                  "apparent_temperature_min",
                  "precipitation_sum",
                  "precipitation_hours",
                  "weather_code",
                  "sunrise",
                  "sunset",
                  "wind_speed_10m_max",
                  "wind_gusts_10m_max",
                  "wind_direction_10m_dominant",
                  "shortwave_radiation_sum",
                  "uv_index_max",
                  "uv_index_clear_sky_max",
                  "et0_fao_evapotranspiration",
                ],
                "type": "string",
              },
              "type": "array",
            },
          },
          {
            "description": "WGS84 coordinate",
            "in": "query",
            "name": "latitude",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number",
            },
          },
          {
            "description": "WGS84 coordinate",
            "in": "query",
            "name": "longitude",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number",
            },
          },
          {
            "in": "query",
            "name": "current_weather",
            "schema": {
              "type": "boolean",
            },
          },
          {
            "in": "query",
            "name": "temperature_unit",
            "schema": {
              "default": "celsius",
              "enum": [
                "celsius",
                "fahrenheit",
              ],
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "wind_speed_unit",
            "schema": {
              "default": "kmh",
              "enum": [
                "kmh",
                "ms",
                "mph",
                "kn",
              ],
              "type": "string",
            },
          },
          {
            "description": "If format \`unixtime\` is selected, all time values are returned in UNIX epoch time in seconds. Please not that all time is then in GMT+0! For daily values with unix timestamp, please apply \`utc_offset_seconds\` again to get the correct date.",
            "in": "query",
            "name": "timeformat",
            "schema": {
              "default": "iso8601",
              "enum": [
                "iso8601",
                "unixtime",
              ],
              "type": "string",
            },
          },
          {
            "description": "If \`timezone\` is set, all timestamps are returned as local-time and data is returned starting at 0:00 local-time. Any time zone name from the [time zone database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) is supported.",
            "in": "query",
            "name": "timezone",
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "If \`past_days\` is set, yesterdays or the day before yesterdays data are also returned.",
            "in": "query",
            "name": "past_days",
            "schema": {
              "enum": [
                1,
                2,
              ],
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "current_weather": {
                      "$ref": "#/components/schemas/CurrentWeather",
                    },
                    "daily": {
                      "$ref": "#/components/schemas/DailyResponse",
                    },
                    "daily_units": {
                      "additionalProperties": {
                        "type": "string",
                      },
                      "description": "For each selected daily weather variable, the unit will be listed here.",
                      "type": "object",
                    },
                    "elevation": {
                      "description": "The elevation in meters of the selected weather grid-cell. In mountain terrain it might differ from the location you would expect.",
                      "example": 44.812,
                      "type": "number",
                    },
                    "generationtime_ms": {
                      "description": "Generation time of the weather forecast in milli seconds. This is mainly used for performance monitoring and improvements.",
                      "example": 2.2119,
                      "type": "number",
                    },
                    "hourly": {
                      "$ref": "#/components/schemas/HourlyResponse",
                    },
                    "hourly_units": {
                      "additionalProperties": {
                        "type": "string",
                      },
                      "description": "For each selected weather variable, the unit will be listed here.",
                      "type": "object",
                    },
                    "latitude": {
                      "description": "WGS84 of the center of the weather grid-cell which was used to generate this forecast. This coordinate might be up to 5 km away.",
                      "example": 52.52,
                      "type": "number",
                    },
                    "longitude": {
                      "description": "WGS84 of the center of the weather grid-cell which was used to generate this forecast. This coordinate might be up to 5 km away.",
                      "example": "13.419.52",
                      "type": "number",
                    },
                    "utc_offset_seconds": {
                      "description": "Applied timezone offset from the &timezone= parameter.",
                      "example": 3600,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "OK",
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "Always set true for errors",
                      "type": "boolean",
                    },
                    "reason": {
                      "description": "Description of the error",
                      "example": "Latitude must be in range of -90 to 90°. Given: 300",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Bad Request",
          },
        },
        "summary": "7 day weather forecast for coordinates",
        "tags": [
          "Weather Forecast APIs",
        ],
      },
      "servers": [
        {
          "url": "https://api.open-meteo.com",
        },
      ],
    },
  },
}
`;

exports[`validateOpenAPISpec > open-meteo.yaml (http url) 1`] = `
{
  "components": {
    "schemas": {
      "CurrentWeather": {
        "description": "Current weather conditions with the attributes: time, temperature, wind_speed, wind_direction and weather_code",
        "properties": {
          "temperature": {
            "type": "number",
          },
          "time": {
            "type": "string",
          },
          "weather_code": {
            "type": "integer",
          },
          "wind_direction": {
            "type": "number",
          },
          "wind_speed": {
            "type": "number",
          },
        },
        "required": [
          "time",
          "temperature",
          "wind_speed",
          "wind_direction",
          "weather_code",
        ],
        "type": "object",
      },
      "DailyResponse": {
        "description": "For each selected daily weather variable, data will be returned as a floating point array. Additionally a \`time\` array will be returned with ISO8601 timestamps.",
        "properties": {
          "apparent_temperature_max": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "apparent_temperature_min": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "et0_fao_evapotranspiration": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "precipitation_hours": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "precipitation_sum": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "shortwave_radiation_sum": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "sunrise": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "sunset": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "temperature_2m_max": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "temperature_2m_min": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "time": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "uv_index_clear_sky_max": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "uv_index_max": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "weather_code": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_direction_10m_dominant": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_gusts_10m_max": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_speed_10m_max": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
        },
        "required": [
          "time",
        ],
        "type": "object",
      },
      "HourlyResponse": {
        "description": "For each selected weather variable, data will be returned as a floating point array. Additionally a \`time\` array will be returned with ISO8601 timestamps.",
        "properties": {
          "apparent_temperature": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "cloud_cover": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "cloud_cover_high": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "cloud_cover_low": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "cloud_cover_mid": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "dew_point_2m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "diffuse_radiation": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "direct_normal_irradiance": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "direct_radiation": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "evapotranspiration": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "freezing_level_height": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "precipitation": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "pressure_msl": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "relative_humidity_2m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "shortwave_radiation": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "snow_height": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_moisture_0_1cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_moisture_1_3cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_moisture_27_81cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_moisture_3_9cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_moisture_9_27cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_temperature_0cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_temperature_18cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_temperature_54cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_temperature_6cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "temperature_2m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "time": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "vapour_pressure_deficit": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "weather_code": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_direction_10m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_direction_120m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_direction_180m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_direction_80m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_gusts_10m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_speed_10m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_speed_120m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_speed_180m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_speed_80m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
        },
        "required": [
          "time",
        ],
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {
      "email": "info@open-meteo.com",
      "name": "Open-Meteo",
      "url": "https://open-meteo.com",
    },
    "description": "Open-Meteo offers free weather forecast APIs for open-source developers and non-commercial use. No API key is required.",
    "license": {
      "name": "Attribution 4.0 International (CC BY 4.0)",
      "url": "https://creativecommons.org/licenses/by/4.0/",
    },
    "termsOfService": "https://open-meteo.com/en/features#terms",
    "title": "Open-Meteo APIs",
    "version": "1.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/v1/forecast": {
      "get": {
        "description": "7 day weather variables in hourly and daily resolution for given WGS84 latitude and longitude coordinates. Available worldwide.",
        "parameters": [
          {
            "explode": false,
            "in": "query",
            "name": "hourly",
            "schema": {
              "items": {
                "enum": [
                  "temperature_2m",
                  "relative_humidity_2m",
                  "dew_point_2m",
                  "apparent_temperature",
                  "pressure_msl",
                  "cloud_cover",
                  "cloud_cover_low",
                  "cloud_cover_mid",
                  "cloud_cover_high",
                  "wind_speed_10m",
                  "wind_speed_80m",
                  "wind_speed_120m",
                  "wind_speed_180m",
                  "wind_direction_10m",
                  "wind_direction_80m",
                  "wind_direction_120m",
                  "wind_direction_180m",
                  "wind_gusts_10m",
                  "shortwave_radiation",
                  "direct_radiation",
                  "direct_normal_irradiance",
                  "diffuse_radiation",
                  "vapour_pressure_deficit",
                  "evapotranspiration",
                  "precipitation",
                  "weather_code",
                  "snow_height",
                  "freezing_level_height",
                  "soil_temperature_0cm",
                  "soil_temperature_6cm",
                  "soil_temperature_18cm",
                  "soil_temperature_54cm",
                  "soil_moisture_0_1cm",
                  "soil_moisture_1_3cm",
                  "soil_moisture_3_9cm",
                  "soil_moisture_9_27cm",
                  "soil_moisture_27_81cm",
                ],
                "type": "string",
              },
              "type": "array",
            },
          },
          {
            "in": "query",
            "name": "daily",
            "schema": {
              "items": {
                "enum": [
                  "temperature_2m_max",
                  "temperature_2m_min",
                  "apparent_temperature_max",
                  "apparent_temperature_min",
                  "precipitation_sum",
                  "precipitation_hours",
                  "weather_code",
                  "sunrise",
                  "sunset",
                  "wind_speed_10m_max",
                  "wind_gusts_10m_max",
                  "wind_direction_10m_dominant",
                  "shortwave_radiation_sum",
                  "uv_index_max",
                  "uv_index_clear_sky_max",
                  "et0_fao_evapotranspiration",
                ],
                "type": "string",
              },
              "type": "array",
            },
          },
          {
            "description": "WGS84 coordinate",
            "in": "query",
            "name": "latitude",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number",
            },
          },
          {
            "description": "WGS84 coordinate",
            "in": "query",
            "name": "longitude",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number",
            },
          },
          {
            "in": "query",
            "name": "current_weather",
            "schema": {
              "type": "boolean",
            },
          },
          {
            "in": "query",
            "name": "temperature_unit",
            "schema": {
              "default": "celsius",
              "enum": [
                "celsius",
                "fahrenheit",
              ],
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "wind_speed_unit",
            "schema": {
              "default": "kmh",
              "enum": [
                "kmh",
                "ms",
                "mph",
                "kn",
              ],
              "type": "string",
            },
          },
          {
            "description": "If format \`unixtime\` is selected, all time values are returned in UNIX epoch time in seconds. Please not that all time is then in GMT+0! For daily values with unix timestamp, please apply \`utc_offset_seconds\` again to get the correct date.",
            "in": "query",
            "name": "timeformat",
            "schema": {
              "default": "iso8601",
              "enum": [
                "iso8601",
                "unixtime",
              ],
              "type": "string",
            },
          },
          {
            "description": "If \`timezone\` is set, all timestamps are returned as local-time and data is returned starting at 0:00 local-time. Any time zone name from the [time zone database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) is supported.",
            "in": "query",
            "name": "timezone",
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "If \`past_days\` is set, yesterdays or the day before yesterdays data are also returned.",
            "in": "query",
            "name": "past_days",
            "schema": {
              "enum": [
                1,
                2,
              ],
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "current_weather": {
                      "$ref": "#/components/schemas/CurrentWeather",
                    },
                    "daily": {
                      "$ref": "#/components/schemas/DailyResponse",
                    },
                    "daily_units": {
                      "additionalProperties": {
                        "type": "string",
                      },
                      "description": "For each selected daily weather variable, the unit will be listed here.",
                      "type": "object",
                    },
                    "elevation": {
                      "description": "The elevation in meters of the selected weather grid-cell. In mountain terrain it might differ from the location you would expect.",
                      "example": 44.812,
                      "type": "number",
                    },
                    "generationtime_ms": {
                      "description": "Generation time of the weather forecast in milli seconds. This is mainly used for performance monitoring and improvements.",
                      "example": 2.2119,
                      "type": "number",
                    },
                    "hourly": {
                      "$ref": "#/components/schemas/HourlyResponse",
                    },
                    "hourly_units": {
                      "additionalProperties": {
                        "type": "string",
                      },
                      "description": "For each selected weather variable, the unit will be listed here.",
                      "type": "object",
                    },
                    "latitude": {
                      "description": "WGS84 of the center of the weather grid-cell which was used to generate this forecast. This coordinate might be up to 5 km away.",
                      "example": 52.52,
                      "type": "number",
                    },
                    "longitude": {
                      "description": "WGS84 of the center of the weather grid-cell which was used to generate this forecast. This coordinate might be up to 5 km away.",
                      "example": "13.419.52",
                      "type": "number",
                    },
                    "utc_offset_seconds": {
                      "description": "Applied timezone offset from the &timezone= parameter.",
                      "example": 3600,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "OK",
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "Always set true for errors",
                      "type": "boolean",
                    },
                    "reason": {
                      "description": "Description of the error",
                      "example": "Latitude must be in range of -90 to 90°. Given: 300",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Bad Request",
          },
        },
        "summary": "7 day weather forecast for coordinates",
        "tags": [
          "Weather Forecast APIs",
        ],
      },
      "servers": [
        {
          "url": "https://api.open-meteo.com",
        },
      ],
    },
  },
}
`;

exports[`validateOpenAPISpec > open-meteo.yaml (string) 1`] = `
{
  "components": {
    "schemas": {
      "CurrentWeather": {
        "description": "Current weather conditions with the attributes: time, temperature, wind_speed, wind_direction and weather_code",
        "properties": {
          "temperature": {
            "type": "number",
          },
          "time": {
            "type": "string",
          },
          "weather_code": {
            "type": "integer",
          },
          "wind_direction": {
            "type": "number",
          },
          "wind_speed": {
            "type": "number",
          },
        },
        "required": [
          "time",
          "temperature",
          "wind_speed",
          "wind_direction",
          "weather_code",
        ],
        "type": "object",
      },
      "DailyResponse": {
        "description": "For each selected daily weather variable, data will be returned as a floating point array. Additionally a \`time\` array will be returned with ISO8601 timestamps.",
        "properties": {
          "apparent_temperature_max": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "apparent_temperature_min": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "et0_fao_evapotranspiration": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "precipitation_hours": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "precipitation_sum": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "shortwave_radiation_sum": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "sunrise": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "sunset": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "temperature_2m_max": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "temperature_2m_min": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "time": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "uv_index_clear_sky_max": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "uv_index_max": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "weather_code": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_direction_10m_dominant": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_gusts_10m_max": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_speed_10m_max": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
        },
        "required": [
          "time",
        ],
        "type": "object",
      },
      "HourlyResponse": {
        "description": "For each selected weather variable, data will be returned as a floating point array. Additionally a \`time\` array will be returned with ISO8601 timestamps.",
        "properties": {
          "apparent_temperature": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "cloud_cover": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "cloud_cover_high": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "cloud_cover_low": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "cloud_cover_mid": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "dew_point_2m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "diffuse_radiation": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "direct_normal_irradiance": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "direct_radiation": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "evapotranspiration": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "freezing_level_height": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "precipitation": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "pressure_msl": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "relative_humidity_2m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "shortwave_radiation": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "snow_height": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_moisture_0_1cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_moisture_1_3cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_moisture_27_81cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_moisture_3_9cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_moisture_9_27cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_temperature_0cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_temperature_18cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_temperature_54cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "soil_temperature_6cm": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "temperature_2m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "time": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "vapour_pressure_deficit": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "weather_code": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_direction_10m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_direction_120m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_direction_180m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_direction_80m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_gusts_10m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_speed_10m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_speed_120m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_speed_180m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "wind_speed_80m": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
        },
        "required": [
          "time",
        ],
        "type": "object",
      },
    },
  },
  "info": {
    "contact": {
      "email": "info@open-meteo.com",
      "name": "Open-Meteo",
      "url": "https://open-meteo.com",
    },
    "description": "Open-Meteo offers free weather forecast APIs for open-source developers and non-commercial use. No API key is required.",
    "license": {
      "name": "Attribution 4.0 International (CC BY 4.0)",
      "url": "https://creativecommons.org/licenses/by/4.0/",
    },
    "termsOfService": "https://open-meteo.com/en/features#terms",
    "title": "Open-Meteo APIs",
    "version": "1.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/v1/forecast": {
      "get": {
        "description": "7 day weather variables in hourly and daily resolution for given WGS84 latitude and longitude coordinates. Available worldwide.",
        "parameters": [
          {
            "explode": false,
            "in": "query",
            "name": "hourly",
            "schema": {
              "items": {
                "enum": [
                  "temperature_2m",
                  "relative_humidity_2m",
                  "dew_point_2m",
                  "apparent_temperature",
                  "pressure_msl",
                  "cloud_cover",
                  "cloud_cover_low",
                  "cloud_cover_mid",
                  "cloud_cover_high",
                  "wind_speed_10m",
                  "wind_speed_80m",
                  "wind_speed_120m",
                  "wind_speed_180m",
                  "wind_direction_10m",
                  "wind_direction_80m",
                  "wind_direction_120m",
                  "wind_direction_180m",
                  "wind_gusts_10m",
                  "shortwave_radiation",
                  "direct_radiation",
                  "direct_normal_irradiance",
                  "diffuse_radiation",
                  "vapour_pressure_deficit",
                  "evapotranspiration",
                  "precipitation",
                  "weather_code",
                  "snow_height",
                  "freezing_level_height",
                  "soil_temperature_0cm",
                  "soil_temperature_6cm",
                  "soil_temperature_18cm",
                  "soil_temperature_54cm",
                  "soil_moisture_0_1cm",
                  "soil_moisture_1_3cm",
                  "soil_moisture_3_9cm",
                  "soil_moisture_9_27cm",
                  "soil_moisture_27_81cm",
                ],
                "type": "string",
              },
              "type": "array",
            },
          },
          {
            "in": "query",
            "name": "daily",
            "schema": {
              "items": {
                "enum": [
                  "temperature_2m_max",
                  "temperature_2m_min",
                  "apparent_temperature_max",
                  "apparent_temperature_min",
                  "precipitation_sum",
                  "precipitation_hours",
                  "weather_code",
                  "sunrise",
                  "sunset",
                  "wind_speed_10m_max",
                  "wind_gusts_10m_max",
                  "wind_direction_10m_dominant",
                  "shortwave_radiation_sum",
                  "uv_index_max",
                  "uv_index_clear_sky_max",
                  "et0_fao_evapotranspiration",
                ],
                "type": "string",
              },
              "type": "array",
            },
          },
          {
            "description": "WGS84 coordinate",
            "in": "query",
            "name": "latitude",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number",
            },
          },
          {
            "description": "WGS84 coordinate",
            "in": "query",
            "name": "longitude",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number",
            },
          },
          {
            "in": "query",
            "name": "current_weather",
            "schema": {
              "type": "boolean",
            },
          },
          {
            "in": "query",
            "name": "temperature_unit",
            "schema": {
              "default": "celsius",
              "enum": [
                "celsius",
                "fahrenheit",
              ],
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "wind_speed_unit",
            "schema": {
              "default": "kmh",
              "enum": [
                "kmh",
                "ms",
                "mph",
                "kn",
              ],
              "type": "string",
            },
          },
          {
            "description": "If format \`unixtime\` is selected, all time values are returned in UNIX epoch time in seconds. Please not that all time is then in GMT+0! For daily values with unix timestamp, please apply \`utc_offset_seconds\` again to get the correct date.",
            "in": "query",
            "name": "timeformat",
            "schema": {
              "default": "iso8601",
              "enum": [
                "iso8601",
                "unixtime",
              ],
              "type": "string",
            },
          },
          {
            "description": "If \`timezone\` is set, all timestamps are returned as local-time and data is returned starting at 0:00 local-time. Any time zone name from the [time zone database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) is supported.",
            "in": "query",
            "name": "timezone",
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "If \`past_days\` is set, yesterdays or the day before yesterdays data are also returned.",
            "in": "query",
            "name": "past_days",
            "schema": {
              "enum": [
                1,
                2,
              ],
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "current_weather": {
                      "$ref": "#/components/schemas/CurrentWeather",
                    },
                    "daily": {
                      "$ref": "#/components/schemas/DailyResponse",
                    },
                    "daily_units": {
                      "additionalProperties": {
                        "type": "string",
                      },
                      "description": "For each selected daily weather variable, the unit will be listed here.",
                      "type": "object",
                    },
                    "elevation": {
                      "description": "The elevation in meters of the selected weather grid-cell. In mountain terrain it might differ from the location you would expect.",
                      "example": 44.812,
                      "type": "number",
                    },
                    "generationtime_ms": {
                      "description": "Generation time of the weather forecast in milli seconds. This is mainly used for performance monitoring and improvements.",
                      "example": 2.2119,
                      "type": "number",
                    },
                    "hourly": {
                      "$ref": "#/components/schemas/HourlyResponse",
                    },
                    "hourly_units": {
                      "additionalProperties": {
                        "type": "string",
                      },
                      "description": "For each selected weather variable, the unit will be listed here.",
                      "type": "object",
                    },
                    "latitude": {
                      "description": "WGS84 of the center of the weather grid-cell which was used to generate this forecast. This coordinate might be up to 5 km away.",
                      "example": 52.52,
                      "type": "number",
                    },
                    "longitude": {
                      "description": "WGS84 of the center of the weather grid-cell which was used to generate this forecast. This coordinate might be up to 5 km away.",
                      "example": "13.419.52",
                      "type": "number",
                    },
                    "utc_offset_seconds": {
                      "description": "Applied timezone offset from the &timezone= parameter.",
                      "example": 3600,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "OK",
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "description": "Always set true for errors",
                      "type": "boolean",
                    },
                    "reason": {
                      "description": "Description of the error",
                      "example": "Latitude must be in range of -90 to 90°. Given: 300",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Bad Request",
          },
        },
        "summary": "7 day weather forecast for coordinates",
        "tags": [
          "Weather Forecast APIs",
        ],
      },
      "servers": [
        {
          "url": "https://api.open-meteo.com",
        },
      ],
    },
  },
}
`;

exports[`validateOpenAPISpec > pet-store.json (file url) 1`] = `
{
  "components": {
    "schemas": {
      "Error": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer",
          },
          "message": {
            "type": "string",
          },
        },
        "required": [
          "code",
          "message",
        ],
        "type": "object",
      },
      "Pet": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
          "tag": {
            "type": "string",
          },
        },
        "required": [
          "id",
          "name",
        ],
        "type": "object",
      },
      "Pets": {
        "items": {
          "$ref": "#/components/schemas/Pet",
        },
        "maxItems": 100,
        "type": "array",
      },
    },
  },
  "info": {
    "license": {
      "name": "MIT",
    },
    "title": "Swagger Petstore",
    "version": "1.0.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/pets": {
      "get": {
        "operationId": "listPets",
        "parameters": [
          {
            "description": "How many items to return at one time (max 100)",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "maximum": 100,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pets",
                },
              },
            },
            "description": "A paged array of pets",
            "headers": {
              "x-next": {
                "description": "A link to the next page of responses",
                "schema": {
                  "type": "string",
                },
              },
            },
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error",
                },
              },
            },
            "description": "unexpected error",
          },
        },
        "summary": "List all pets",
        "tags": [
          "pets",
        ],
      },
      "post": {
        "operationId": "createPets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "201": {
            "description": "Null response",
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error",
                },
              },
            },
            "description": "unexpected error",
          },
        },
        "summary": "Create a pet",
        "tags": [
          "pets",
        ],
      },
    },
    "/pets/{petId}": {
      "get": {
        "operationId": "showPetById",
        "parameters": [
          {
            "description": "The id of the pet to retrieve",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "Expected response to a valid request",
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error",
                },
              },
            },
            "description": "unexpected error",
          },
        },
        "summary": "Info for a specific pet",
        "tags": [
          "pets",
        ],
      },
    },
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/v1",
    },
  ],
}
`;

exports[`validateOpenAPISpec > pet-store.json (http url) 1`] = `
{
  "components": {
    "schemas": {
      "Error": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer",
          },
          "message": {
            "type": "string",
          },
        },
        "required": [
          "code",
          "message",
        ],
        "type": "object",
      },
      "Pet": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
          "tag": {
            "type": "string",
          },
        },
        "required": [
          "id",
          "name",
        ],
        "type": "object",
      },
      "Pets": {
        "items": {
          "$ref": "#/components/schemas/Pet",
        },
        "maxItems": 100,
        "type": "array",
      },
    },
  },
  "info": {
    "license": {
      "name": "MIT",
    },
    "title": "Swagger Petstore",
    "version": "1.0.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/pets": {
      "get": {
        "operationId": "listPets",
        "parameters": [
          {
            "description": "How many items to return at one time (max 100)",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "maximum": 100,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pets",
                },
              },
            },
            "description": "A paged array of pets",
            "headers": {
              "x-next": {
                "description": "A link to the next page of responses",
                "schema": {
                  "type": "string",
                },
              },
            },
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error",
                },
              },
            },
            "description": "unexpected error",
          },
        },
        "summary": "List all pets",
        "tags": [
          "pets",
        ],
      },
      "post": {
        "operationId": "createPets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "201": {
            "description": "Null response",
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error",
                },
              },
            },
            "description": "unexpected error",
          },
        },
        "summary": "Create a pet",
        "tags": [
          "pets",
        ],
      },
    },
    "/pets/{petId}": {
      "get": {
        "operationId": "showPetById",
        "parameters": [
          {
            "description": "The id of the pet to retrieve",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "Expected response to a valid request",
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error",
                },
              },
            },
            "description": "unexpected error",
          },
        },
        "summary": "Info for a specific pet",
        "tags": [
          "pets",
        ],
      },
    },
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/v1",
    },
  ],
}
`;

exports[`validateOpenAPISpec > pet-store.json (string) 1`] = `
{
  "components": {
    "schemas": {
      "Error": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer",
          },
          "message": {
            "type": "string",
          },
        },
        "required": [
          "code",
          "message",
        ],
        "type": "object",
      },
      "Pet": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
          "tag": {
            "type": "string",
          },
        },
        "required": [
          "id",
          "name",
        ],
        "type": "object",
      },
      "Pets": {
        "items": {
          "$ref": "#/components/schemas/Pet",
        },
        "maxItems": 100,
        "type": "array",
      },
    },
  },
  "info": {
    "license": {
      "name": "MIT",
    },
    "title": "Swagger Petstore",
    "version": "1.0.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/pets": {
      "get": {
        "operationId": "listPets",
        "parameters": [
          {
            "description": "How many items to return at one time (max 100)",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "maximum": 100,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pets",
                },
              },
            },
            "description": "A paged array of pets",
            "headers": {
              "x-next": {
                "description": "A link to the next page of responses",
                "schema": {
                  "type": "string",
                },
              },
            },
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error",
                },
              },
            },
            "description": "unexpected error",
          },
        },
        "summary": "List all pets",
        "tags": [
          "pets",
        ],
      },
      "post": {
        "operationId": "createPets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "201": {
            "description": "Null response",
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error",
                },
              },
            },
            "description": "unexpected error",
          },
        },
        "summary": "Create a pet",
        "tags": [
          "pets",
        ],
      },
    },
    "/pets/{petId}": {
      "get": {
        "operationId": "showPetById",
        "parameters": [
          {
            "description": "The id of the pet to retrieve",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "Expected response to a valid request",
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error",
                },
              },
            },
            "description": "unexpected error",
          },
        },
        "summary": "Info for a specific pet",
        "tags": [
          "pets",
        ],
      },
    },
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/v1",
    },
  ],
}
`;

exports[`validateOpenAPISpec > petstore-expanded.json (file url) 1`] = `
{
  "components": {
    "schemas": {
      "Error": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer",
          },
          "message": {
            "type": "string",
          },
        },
        "required": [
          "code",
          "message",
        ],
        "type": "object",
      },
      "NewPet": {
        "properties": {
          "name": {
            "type": "string",
          },
          "tag": {
            "type": "string",
          },
        },
        "required": [
          "name",
        ],
        "type": "object",
      },
      "Pet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NewPet",
          },
          {
            "properties": {
              "id": {
                "format": "int64",
                "type": "integer",
              },
            },
            "required": [
              "id",
            ],
            "type": "object",
          },
        ],
      },
    },
  },
  "info": {
    "contact": {
      "email": "apiteam@swagger.io",
      "name": "Swagger API Team",
      "url": "http://swagger.io",
    },
    "description": "A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
    },
    "termsOfService": "http://swagger.io/terms/",
    "title": "Swagger Petstore",
    "version": "1.0.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/pets": {
      "get": {
        "description": "Returns all pets from the system that the user has access to
Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.

Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.",
        "operationId": "findPets",
        "parameters": [
          {
            "description": "tags to filter by",
            "in": "query",
            "name": "tags",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
            "style": "form",
          },
          {
            "description": "maximum number of results to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "pet response",
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error",
                },
              },
            },
            "description": "unexpected error",
          },
        },
      },
      "post": {
        "description": "Creates a new pet in the store. Duplicates are allowed",
        "operationId": "addPet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPet",
              },
            },
          },
          "description": "Pet to add to the store",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "pet response",
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error",
                },
              },
            },
            "description": "unexpected error",
          },
        },
      },
    },
    "/pets/{id}": {
      "delete": {
        "description": "deletes a single pet based on the ID supplied",
        "operationId": "deletePet",
        "parameters": [
          {
            "description": "ID of pet to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "204": {
            "description": "pet deleted",
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error",
                },
              },
            },
            "description": "unexpected error",
          },
        },
      },
      "get": {
        "description": "Returns a user based on a single ID, if the user does not have access to the pet",
        "operationId": "find pet by id",
        "parameters": [
          {
            "description": "ID of pet to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "pet response",
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error",
                },
              },
            },
            "description": "unexpected error",
          },
        },
      },
    },
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/api",
    },
  ],
}
`;

exports[`validateOpenAPISpec > petstore-expanded.json (http url) 1`] = `
{
  "components": {
    "schemas": {
      "Error": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer",
          },
          "message": {
            "type": "string",
          },
        },
        "required": [
          "code",
          "message",
        ],
        "type": "object",
      },
      "NewPet": {
        "properties": {
          "name": {
            "type": "string",
          },
          "tag": {
            "type": "string",
          },
        },
        "required": [
          "name",
        ],
        "type": "object",
      },
      "Pet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NewPet",
          },
          {
            "properties": {
              "id": {
                "format": "int64",
                "type": "integer",
              },
            },
            "required": [
              "id",
            ],
            "type": "object",
          },
        ],
      },
    },
  },
  "info": {
    "contact": {
      "email": "apiteam@swagger.io",
      "name": "Swagger API Team",
      "url": "http://swagger.io",
    },
    "description": "A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
    },
    "termsOfService": "http://swagger.io/terms/",
    "title": "Swagger Petstore",
    "version": "1.0.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/pets": {
      "get": {
        "description": "Returns all pets from the system that the user has access to
Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.

Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.",
        "operationId": "findPets",
        "parameters": [
          {
            "description": "tags to filter by",
            "in": "query",
            "name": "tags",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
            "style": "form",
          },
          {
            "description": "maximum number of results to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "pet response",
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error",
                },
              },
            },
            "description": "unexpected error",
          },
        },
      },
      "post": {
        "description": "Creates a new pet in the store. Duplicates are allowed",
        "operationId": "addPet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPet",
              },
            },
          },
          "description": "Pet to add to the store",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "pet response",
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error",
                },
              },
            },
            "description": "unexpected error",
          },
        },
      },
    },
    "/pets/{id}": {
      "delete": {
        "description": "deletes a single pet based on the ID supplied",
        "operationId": "deletePet",
        "parameters": [
          {
            "description": "ID of pet to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "204": {
            "description": "pet deleted",
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error",
                },
              },
            },
            "description": "unexpected error",
          },
        },
      },
      "get": {
        "description": "Returns a user based on a single ID, if the user does not have access to the pet",
        "operationId": "find pet by id",
        "parameters": [
          {
            "description": "ID of pet to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "pet response",
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error",
                },
              },
            },
            "description": "unexpected error",
          },
        },
      },
    },
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/api",
    },
  ],
}
`;

exports[`validateOpenAPISpec > petstore-expanded.json (string) 1`] = `
{
  "components": {
    "schemas": {
      "Error": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer",
          },
          "message": {
            "type": "string",
          },
        },
        "required": [
          "code",
          "message",
        ],
        "type": "object",
      },
      "NewPet": {
        "properties": {
          "name": {
            "type": "string",
          },
          "tag": {
            "type": "string",
          },
        },
        "required": [
          "name",
        ],
        "type": "object",
      },
      "Pet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NewPet",
          },
          {
            "properties": {
              "id": {
                "format": "int64",
                "type": "integer",
              },
            },
            "required": [
              "id",
            ],
            "type": "object",
          },
        ],
      },
    },
  },
  "info": {
    "contact": {
      "email": "apiteam@swagger.io",
      "name": "Swagger API Team",
      "url": "http://swagger.io",
    },
    "description": "A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
    },
    "termsOfService": "http://swagger.io/terms/",
    "title": "Swagger Petstore",
    "version": "1.0.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/pets": {
      "get": {
        "description": "Returns all pets from the system that the user has access to
Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.

Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.",
        "operationId": "findPets",
        "parameters": [
          {
            "description": "tags to filter by",
            "in": "query",
            "name": "tags",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
            "style": "form",
          },
          {
            "description": "maximum number of results to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "pet response",
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error",
                },
              },
            },
            "description": "unexpected error",
          },
        },
      },
      "post": {
        "description": "Creates a new pet in the store. Duplicates are allowed",
        "operationId": "addPet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPet",
              },
            },
          },
          "description": "Pet to add to the store",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "pet response",
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error",
                },
              },
            },
            "description": "unexpected error",
          },
        },
      },
    },
    "/pets/{id}": {
      "delete": {
        "description": "deletes a single pet based on the ID supplied",
        "operationId": "deletePet",
        "parameters": [
          {
            "description": "ID of pet to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "204": {
            "description": "pet deleted",
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error",
                },
              },
            },
            "description": "unexpected error",
          },
        },
      },
      "get": {
        "description": "Returns a user based on a single ID, if the user does not have access to the pet",
        "operationId": "find pet by id",
        "parameters": [
          {
            "description": "ID of pet to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "pet response",
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error",
                },
              },
            },
            "description": "unexpected error",
          },
        },
      },
    },
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/api",
    },
  ],
}
`;

exports[`validateOpenAPISpec > remote spec https://agentic-platform-fixtures-everything.onrender.com/docs 1`] = `
{
  "components": {
    "parameters": {},
    "schemas": {
      "User": {
        "properties": {
          "email": {
            "type": "string",
          },
          "id": {
            "type": "string",
          },
          "name": {
            "type": "string",
          },
        },
        "required": [
          "id",
          "name",
          "email",
        ],
        "type": "object",
      },
    },
  },
  "info": {
    "title": "OpenAPI server to test everything",
    "version": "0.1.0",
  },
  "openapi": "3.1.0",
  "paths": {
    "/custom-cache-control-tool": {
      "post": {
        "description": "Custom cache control tool",
        "operationId": "customCacheControlTool",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {},
                  "type": "object",
                },
              },
            },
            "description": "Echoed request body",
          },
        },
      },
    },
    "/custom-rate-limit-tool": {
      "post": {
        "description": "Custom rate limit tool",
        "operationId": "customRateLimitTool",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {},
                  "type": "object",
                },
              },
            },
            "description": "Echoed request body",
          },
        },
      },
    },
    "/disabled-for-free-plan-tool": {
      "get": {
        "description": "Disabled for free plan tool",
        "operationId": "disabledForFreePlanTool",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "status",
                  ],
                  "type": "object",
                },
              },
            },
            "description": "OK",
          },
        },
      },
    },
    "/disabled-rate-limit-tool": {
      "post": {
        "description": "Disabled rate limit tool",
        "operationId": "disabledRateLimitTool",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {},
                  "type": "object",
                },
              },
            },
            "description": "Echoed request body",
          },
        },
      },
    },
    "/disabled-tool": {
      "get": {
        "description": "Disabled tool",
        "operationId": "disabledTool",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "status",
                  ],
                  "type": "object",
                },
              },
            },
            "description": "OK",
          },
        },
      },
    },
    "/echo": {
      "post": {
        "description": "Echoes the request body",
        "operationId": "echo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {},
                  "type": "object",
                },
              },
            },
            "description": "Echoed request body",
          },
        },
      },
    },
    "/health": {
      "get": {
        "description": "Check if the server is healthy",
        "operationId": "healthCheck",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "status",
                  ],
                  "type": "object",
                },
              },
            },
            "description": "OK",
          },
        },
      },
    },
    "/no-store-cache-control-tool": {
      "post": {
        "description": "No store cache control tool",
        "operationId": "noStoreCacheControlTool",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {},
                  "type": "object",
                },
              },
            },
            "description": "Echoed request body",
          },
        },
      },
    },
    "/pure": {
      "post": {
        "description": "Pure tool",
        "operationId": "pure",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {},
                  "type": "object",
                },
              },
            },
            "description": "Echoed request body",
          },
        },
      },
    },
    "/users/{userId}": {
      "get": {
        "description": "Gets a user",
        "operationId": "getUser",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "A user object",
          },
        },
        "tags": [
          "users",
        ],
      },
    },
  },
  "webhooks": {},
}
`;

exports[`validateOpenAPISpec > security.json (file url) 1`] = `
{
  "components": {
    "securitySchemes": {
      "apiKey_cookie": {
        "description": "An API key that will be supplied in a named cookie. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#security-scheme-object",
        "in": "cookie",
        "name": "api_key",
        "type": "apiKey",
      },
      "apiKey_header": {
        "description": "An API key that will be supplied in a named header. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#security-scheme-object",
        "in": "header",
        "name": "X-API-KEY",
        "type": "apiKey",
      },
      "apiKey_query": {
        "description": "An API key that will be supplied in a named query parameter. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#security-scheme-object",
        "in": "query",
        "name": "apiKey",
        "type": "apiKey",
      },
      "basic": {
        "description": "Basic auth that takes a base64'd combination of \`user:password\`. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#basic-authentication-sample",
        "scheme": "basic",
        "type": "http",
      },
      "bearer": {
        "description": "A bearer token that will be supplied within an \`Authentication\` header as \`bearer <token>\`. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#basic-authentication-sample",
        "scheme": "bearer",
        "type": "http",
      },
      "bearer_jwt": {
        "bearerFormat": "JWT",
        "description": "A bearer token that will be supplied within an \`Authentication\` header as \`bearer <token>\`. In this case, the format of the token is specified as JWT. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#jwt-bearer-sample",
        "scheme": "bearer",
        "type": "http",
      },
      "oauth2": {
        "description": "An OAuth 2 security flow. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#fixed-fields-23",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "http://example.com/oauth/dialog",
            "scopes": {
              "write:things": "Add things to your account",
            },
            "tokenUrl": "http://example.com/oauth/token",
          },
          "clientCredentials": {
            "scopes": {
              "write:things": "Add things to your account",
            },
            "tokenUrl": "http://example.com/oauth/token",
          },
          "implicit": {
            "authorizationUrl": "http://example.com/oauth/dialog",
            "scopes": {
              "write:things": "Add things to your account",
            },
          },
          "password": {
            "scopes": {
              "write:things": "Add things to your account",
            },
            "tokenUrl": "http://example.com/oauth/token",
          },
        },
        "type": "oauth2",
      },
      "oauth2_authorizationCode": {
        "description": "An OAuth 2 security flow that only supports the \`authorizationCode\` flow type. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#oauth-flows-object",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "http://alt.example.com/oauth/dialog",
            "scopes": {
              "write:things": "Add things to your account",
            },
            "tokenUrl": "http://alt.example.com/oauth/token",
          },
        },
        "type": "oauth2",
      },
      "oauth2_clientCredentials": {
        "description": "An OAuth 2 security flow that only supports the \`clientCredentials\` flow type. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#oauth-flows-object",
        "flows": {
          "clientCredentials": {
            "scopes": {
              "write:things": "Add things to your account",
            },
            "tokenUrl": "http://alt.example.com/oauth/token",
          },
        },
        "type": "oauth2",
      },
      "oauth2_implicit": {
        "description": "An OAuth 2 security flow that only supports the \`implicit\` flow type. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#oauth-flows-object",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://alt.example.com/oauth/dialog",
            "scopes": {
              "write:things": "Add things to your account",
            },
          },
        },
        "type": "oauth2",
      },
      "oauth2_password": {
        "description": "An OAuth 2 security flow that only supports the \`password\` flow type. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#oauth-flows-object",
        "flows": {
          "password": {
            "scopes": {
              "write:things": "Add things to your account",
            },
            "tokenUrl": "http://alt.example.com/oauth/token",
          },
        },
        "type": "oauth2",
      },
      "openIdConnect": {
        "description": "OpenAPI authentication. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#fixed-fields-23",
        "openIdConnectUrl": "https://example.com/.well-known/openid-configuration",
        "type": "openIdConnect",
      },
    },
  },
  "info": {
    "description": "https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#securitySchemeObject",
    "title": "Support for different security types",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/anything/apiKey": {
      "get": {
        "description": "\`apiKey\` auth will be supplied within an \`apiKey\` query parameter.",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "apiKey_query": [],
          },
        ],
        "summary": "Query parameter",
        "tags": [
          "API Key",
        ],
      },
      "post": {
        "description": "\`apiKey\` auth will be supplied within an \`api_key\` cookie.",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "apiKey_cookie": [],
          },
        ],
        "summary": "Cookie",
        "tags": [
          "API Key",
        ],
      },
      "put": {
        "description": "\`apiKey\` auth will be supplied within an \`X-API-KEY\` header.",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "apiKey_header": [],
          },
        ],
        "summary": "Header",
        "tags": [
          "API Key",
        ],
      },
    },
    "/anything/basic": {
      "post": {
        "description": "Authentication credentials will be supplied within a \`Basic\` \`Authorization\` header.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#basic-authentication-sample",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "basic": [],
          },
        ],
        "summary": "Basic",
        "tags": [
          "HTTP",
        ],
      },
    },
    "/anything/bearer": {
      "post": {
        "description": "Authentication credentials will be supplied within a \`Bearer\` \`Authorization\` header.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#basic-authentication-sample",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "bearer": [],
          },
        ],
        "summary": "Bearer",
        "tags": [
          "HTTP",
        ],
      },
      "put": {
        "description": "Authentication credentials will be supplied within a \`Bearer\` \`Authorization\` header, but its data should be controlled as a JWT.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#basic-authentication-sample

> ℹ️
> We currently do not support any special handling for this so they're handled as a standard \`Bearer\` authentication token.",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "bearer_jwt": [],
          },
        ],
        "summary": "Bearer (\`jwt\` format)",
        "tags": [
          "HTTP",
        ],
      },
    },
    "/anything/no-auth": {
      "post": {
        "description": "This operation does not have any authentication requirements.",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": "No auth requirements",
        "tags": [
          "Other",
        ],
      },
    },
    "/anything/oauth2": {
      "delete": {
        "description": "> ℹ️
> We currently do not handle OAuth 2 authentication flows so if an operation has an \`oauth2\` requirement we assume that the user, or the projects JWT, has a qualified \`bearer\` token and will use that.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#fixed-fields-23",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "oauth2_password": [
              "write:things",
            ],
          },
        ],
        "summary": "General support (password flow type)",
        "tags": [
          "OAuth 2",
        ],
      },
      "get": {
        "description": "> ℹ️
> We currently do not handle OAuth 2 authentication flows so if an operation has an \`oauth2\` requirement we assume that the user, or the projects JWT, has a qualified \`bearer\` token and will use that.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#fixed-fields-23",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "oauth2_authorizationCode": [
              "write:things",
            ],
          },
        ],
        "summary": "General support (authorizationCode flow type)",
        "tags": [
          "OAuth 2",
        ],
      },
      "patch": {
        "description": "> ℹ️
> We currently do not handle OAuth 2 authentication flows so if an operation has an \`oauth2\` requirement we assume that the user, or the projects JWT, has a qualified \`bearer\` token and will use that.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#fixed-fields-23",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "oauth2_implicit": [
              "write:things",
            ],
          },
        ],
        "summary": "General support (implicit flow type)",
        "tags": [
          "OAuth 2",
        ],
      },
      "post": {
        "description": "> ℹ️
> We currently do not handle OAuth 2 authentication flows so if an operation has an \`oauth2\` requirement we assume that the user, or the projects JWT, has a qualified \`bearer\` token and will use that.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#fixed-fields-23",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "oauth2": [
              "write:things",
            ],
          },
        ],
        "summary": "General support (all flow types)",
        "tags": [
          "OAuth 2",
        ],
      },
      "put": {
        "description": "> ℹ️
> We currently do not handle OAuth 2 authentication flows so if an operation has an \`oauth2\` requirement we assume that the user, or the projects JWT, has a qualified \`bearer\` token and will use that.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#fixed-fields-23",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "oauth2_clientCredentials": [
              "write:things",
            ],
          },
        ],
        "summary": "General support (clientCredentials flow type)",
        "tags": [
          "OAuth 2",
        ],
      },
    },
    "/anything/openIdConnect": {
      "post": {
        "description": "🚧 This is not supported.",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "openIdConnect": [],
          },
        ],
        "summary": "General support",
        "tags": [
          "OpenID Connect",
        ],
      },
    },
    "/anything/optional-auth": {
      "get": {
        "description": "The \`apiKey\` query parameter auth on this operation is optional.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#security-requirement-object",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "apiKey_query": [],
          },
          {},
        ],
        "summary": "Optional auth",
        "tags": [
          "Other",
        ],
      },
    },
    "/status/401": {
      "post": {
        "description": "This endpoint requires an authentication header but making any request to it will forcefully return a 401 status code for invalid auth.",
        "responses": {
          "401": {
            "description": "Unauthorized",
          },
        },
        "security": [
          {
            "apiKey_header": [],
          },
        ],
        "summary": "Forced invalid authentication",
        "tags": [
          "Other",
        ],
      },
    },
  },
  "servers": [
    {
      "url": "https://httpbin.org",
    },
  ],
  "tags": [
    {
      "name": "API Key",
    },
    {
      "name": "HTTP",
    },
    {
      "name": "OAuth 2",
    },
    {
      "name": "OpenID Connect",
    },
    {
      "name": "Other",
    },
  ],
}
`;

exports[`validateOpenAPISpec > security.json (http url) 1`] = `
{
  "components": {
    "securitySchemes": {
      "apiKey_cookie": {
        "description": "An API key that will be supplied in a named cookie. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#security-scheme-object",
        "in": "cookie",
        "name": "api_key",
        "type": "apiKey",
      },
      "apiKey_header": {
        "description": "An API key that will be supplied in a named header. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#security-scheme-object",
        "in": "header",
        "name": "X-API-KEY",
        "type": "apiKey",
      },
      "apiKey_query": {
        "description": "An API key that will be supplied in a named query parameter. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#security-scheme-object",
        "in": "query",
        "name": "apiKey",
        "type": "apiKey",
      },
      "basic": {
        "description": "Basic auth that takes a base64'd combination of \`user:password\`. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#basic-authentication-sample",
        "scheme": "basic",
        "type": "http",
      },
      "bearer": {
        "description": "A bearer token that will be supplied within an \`Authentication\` header as \`bearer <token>\`. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#basic-authentication-sample",
        "scheme": "bearer",
        "type": "http",
      },
      "bearer_jwt": {
        "bearerFormat": "JWT",
        "description": "A bearer token that will be supplied within an \`Authentication\` header as \`bearer <token>\`. In this case, the format of the token is specified as JWT. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#jwt-bearer-sample",
        "scheme": "bearer",
        "type": "http",
      },
      "oauth2": {
        "description": "An OAuth 2 security flow. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#fixed-fields-23",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "http://example.com/oauth/dialog",
            "scopes": {
              "write:things": "Add things to your account",
            },
            "tokenUrl": "http://example.com/oauth/token",
          },
          "clientCredentials": {
            "scopes": {
              "write:things": "Add things to your account",
            },
            "tokenUrl": "http://example.com/oauth/token",
          },
          "implicit": {
            "authorizationUrl": "http://example.com/oauth/dialog",
            "scopes": {
              "write:things": "Add things to your account",
            },
          },
          "password": {
            "scopes": {
              "write:things": "Add things to your account",
            },
            "tokenUrl": "http://example.com/oauth/token",
          },
        },
        "type": "oauth2",
      },
      "oauth2_authorizationCode": {
        "description": "An OAuth 2 security flow that only supports the \`authorizationCode\` flow type. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#oauth-flows-object",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "http://alt.example.com/oauth/dialog",
            "scopes": {
              "write:things": "Add things to your account",
            },
            "tokenUrl": "http://alt.example.com/oauth/token",
          },
        },
        "type": "oauth2",
      },
      "oauth2_clientCredentials": {
        "description": "An OAuth 2 security flow that only supports the \`clientCredentials\` flow type. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#oauth-flows-object",
        "flows": {
          "clientCredentials": {
            "scopes": {
              "write:things": "Add things to your account",
            },
            "tokenUrl": "http://alt.example.com/oauth/token",
          },
        },
        "type": "oauth2",
      },
      "oauth2_implicit": {
        "description": "An OAuth 2 security flow that only supports the \`implicit\` flow type. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#oauth-flows-object",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://alt.example.com/oauth/dialog",
            "scopes": {
              "write:things": "Add things to your account",
            },
          },
        },
        "type": "oauth2",
      },
      "oauth2_password": {
        "description": "An OAuth 2 security flow that only supports the \`password\` flow type. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#oauth-flows-object",
        "flows": {
          "password": {
            "scopes": {
              "write:things": "Add things to your account",
            },
            "tokenUrl": "http://alt.example.com/oauth/token",
          },
        },
        "type": "oauth2",
      },
      "openIdConnect": {
        "description": "OpenAPI authentication. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#fixed-fields-23",
        "openIdConnectUrl": "https://example.com/.well-known/openid-configuration",
        "type": "openIdConnect",
      },
    },
  },
  "info": {
    "description": "https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#securitySchemeObject",
    "title": "Support for different security types",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/anything/apiKey": {
      "get": {
        "description": "\`apiKey\` auth will be supplied within an \`apiKey\` query parameter.",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "apiKey_query": [],
          },
        ],
        "summary": "Query parameter",
        "tags": [
          "API Key",
        ],
      },
      "post": {
        "description": "\`apiKey\` auth will be supplied within an \`api_key\` cookie.",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "apiKey_cookie": [],
          },
        ],
        "summary": "Cookie",
        "tags": [
          "API Key",
        ],
      },
      "put": {
        "description": "\`apiKey\` auth will be supplied within an \`X-API-KEY\` header.",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "apiKey_header": [],
          },
        ],
        "summary": "Header",
        "tags": [
          "API Key",
        ],
      },
    },
    "/anything/basic": {
      "post": {
        "description": "Authentication credentials will be supplied within a \`Basic\` \`Authorization\` header.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#basic-authentication-sample",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "basic": [],
          },
        ],
        "summary": "Basic",
        "tags": [
          "HTTP",
        ],
      },
    },
    "/anything/bearer": {
      "post": {
        "description": "Authentication credentials will be supplied within a \`Bearer\` \`Authorization\` header.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#basic-authentication-sample",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "bearer": [],
          },
        ],
        "summary": "Bearer",
        "tags": [
          "HTTP",
        ],
      },
      "put": {
        "description": "Authentication credentials will be supplied within a \`Bearer\` \`Authorization\` header, but its data should be controlled as a JWT.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#basic-authentication-sample

> ℹ️
> We currently do not support any special handling for this so they're handled as a standard \`Bearer\` authentication token.",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "bearer_jwt": [],
          },
        ],
        "summary": "Bearer (\`jwt\` format)",
        "tags": [
          "HTTP",
        ],
      },
    },
    "/anything/no-auth": {
      "post": {
        "description": "This operation does not have any authentication requirements.",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": "No auth requirements",
        "tags": [
          "Other",
        ],
      },
    },
    "/anything/oauth2": {
      "delete": {
        "description": "> ℹ️
> We currently do not handle OAuth 2 authentication flows so if an operation has an \`oauth2\` requirement we assume that the user, or the projects JWT, has a qualified \`bearer\` token and will use that.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#fixed-fields-23",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "oauth2_password": [
              "write:things",
            ],
          },
        ],
        "summary": "General support (password flow type)",
        "tags": [
          "OAuth 2",
        ],
      },
      "get": {
        "description": "> ℹ️
> We currently do not handle OAuth 2 authentication flows so if an operation has an \`oauth2\` requirement we assume that the user, or the projects JWT, has a qualified \`bearer\` token and will use that.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#fixed-fields-23",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "oauth2_authorizationCode": [
              "write:things",
            ],
          },
        ],
        "summary": "General support (authorizationCode flow type)",
        "tags": [
          "OAuth 2",
        ],
      },
      "patch": {
        "description": "> ℹ️
> We currently do not handle OAuth 2 authentication flows so if an operation has an \`oauth2\` requirement we assume that the user, or the projects JWT, has a qualified \`bearer\` token and will use that.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#fixed-fields-23",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "oauth2_implicit": [
              "write:things",
            ],
          },
        ],
        "summary": "General support (implicit flow type)",
        "tags": [
          "OAuth 2",
        ],
      },
      "post": {
        "description": "> ℹ️
> We currently do not handle OAuth 2 authentication flows so if an operation has an \`oauth2\` requirement we assume that the user, or the projects JWT, has a qualified \`bearer\` token and will use that.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#fixed-fields-23",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "oauth2": [
              "write:things",
            ],
          },
        ],
        "summary": "General support (all flow types)",
        "tags": [
          "OAuth 2",
        ],
      },
      "put": {
        "description": "> ℹ️
> We currently do not handle OAuth 2 authentication flows so if an operation has an \`oauth2\` requirement we assume that the user, or the projects JWT, has a qualified \`bearer\` token and will use that.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#fixed-fields-23",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "oauth2_clientCredentials": [
              "write:things",
            ],
          },
        ],
        "summary": "General support (clientCredentials flow type)",
        "tags": [
          "OAuth 2",
        ],
      },
    },
    "/anything/openIdConnect": {
      "post": {
        "description": "🚧 This is not supported.",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "openIdConnect": [],
          },
        ],
        "summary": "General support",
        "tags": [
          "OpenID Connect",
        ],
      },
    },
    "/anything/optional-auth": {
      "get": {
        "description": "The \`apiKey\` query parameter auth on this operation is optional.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#security-requirement-object",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "apiKey_query": [],
          },
          {},
        ],
        "summary": "Optional auth",
        "tags": [
          "Other",
        ],
      },
    },
    "/status/401": {
      "post": {
        "description": "This endpoint requires an authentication header but making any request to it will forcefully return a 401 status code for invalid auth.",
        "responses": {
          "401": {
            "description": "Unauthorized",
          },
        },
        "security": [
          {
            "apiKey_header": [],
          },
        ],
        "summary": "Forced invalid authentication",
        "tags": [
          "Other",
        ],
      },
    },
  },
  "servers": [
    {
      "url": "https://httpbin.org",
    },
  ],
  "tags": [
    {
      "name": "API Key",
    },
    {
      "name": "HTTP",
    },
    {
      "name": "OAuth 2",
    },
    {
      "name": "OpenID Connect",
    },
    {
      "name": "Other",
    },
  ],
}
`;

exports[`validateOpenAPISpec > security.json (string) 1`] = `
{
  "components": {
    "securitySchemes": {
      "apiKey_cookie": {
        "description": "An API key that will be supplied in a named cookie. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#security-scheme-object",
        "in": "cookie",
        "name": "api_key",
        "type": "apiKey",
      },
      "apiKey_header": {
        "description": "An API key that will be supplied in a named header. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#security-scheme-object",
        "in": "header",
        "name": "X-API-KEY",
        "type": "apiKey",
      },
      "apiKey_query": {
        "description": "An API key that will be supplied in a named query parameter. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#security-scheme-object",
        "in": "query",
        "name": "apiKey",
        "type": "apiKey",
      },
      "basic": {
        "description": "Basic auth that takes a base64'd combination of \`user:password\`. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#basic-authentication-sample",
        "scheme": "basic",
        "type": "http",
      },
      "bearer": {
        "description": "A bearer token that will be supplied within an \`Authentication\` header as \`bearer <token>\`. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#basic-authentication-sample",
        "scheme": "bearer",
        "type": "http",
      },
      "bearer_jwt": {
        "bearerFormat": "JWT",
        "description": "A bearer token that will be supplied within an \`Authentication\` header as \`bearer <token>\`. In this case, the format of the token is specified as JWT. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#jwt-bearer-sample",
        "scheme": "bearer",
        "type": "http",
      },
      "oauth2": {
        "description": "An OAuth 2 security flow. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#fixed-fields-23",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "http://example.com/oauth/dialog",
            "scopes": {
              "write:things": "Add things to your account",
            },
            "tokenUrl": "http://example.com/oauth/token",
          },
          "clientCredentials": {
            "scopes": {
              "write:things": "Add things to your account",
            },
            "tokenUrl": "http://example.com/oauth/token",
          },
          "implicit": {
            "authorizationUrl": "http://example.com/oauth/dialog",
            "scopes": {
              "write:things": "Add things to your account",
            },
          },
          "password": {
            "scopes": {
              "write:things": "Add things to your account",
            },
            "tokenUrl": "http://example.com/oauth/token",
          },
        },
        "type": "oauth2",
      },
      "oauth2_authorizationCode": {
        "description": "An OAuth 2 security flow that only supports the \`authorizationCode\` flow type. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#oauth-flows-object",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "http://alt.example.com/oauth/dialog",
            "scopes": {
              "write:things": "Add things to your account",
            },
            "tokenUrl": "http://alt.example.com/oauth/token",
          },
        },
        "type": "oauth2",
      },
      "oauth2_clientCredentials": {
        "description": "An OAuth 2 security flow that only supports the \`clientCredentials\` flow type. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#oauth-flows-object",
        "flows": {
          "clientCredentials": {
            "scopes": {
              "write:things": "Add things to your account",
            },
            "tokenUrl": "http://alt.example.com/oauth/token",
          },
        },
        "type": "oauth2",
      },
      "oauth2_implicit": {
        "description": "An OAuth 2 security flow that only supports the \`implicit\` flow type. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#oauth-flows-object",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://alt.example.com/oauth/dialog",
            "scopes": {
              "write:things": "Add things to your account",
            },
          },
        },
        "type": "oauth2",
      },
      "oauth2_password": {
        "description": "An OAuth 2 security flow that only supports the \`password\` flow type. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#oauth-flows-object",
        "flows": {
          "password": {
            "scopes": {
              "write:things": "Add things to your account",
            },
            "tokenUrl": "http://alt.example.com/oauth/token",
          },
        },
        "type": "oauth2",
      },
      "openIdConnect": {
        "description": "OpenAPI authentication. https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#fixed-fields-23",
        "openIdConnectUrl": "https://example.com/.well-known/openid-configuration",
        "type": "openIdConnect",
      },
    },
  },
  "info": {
    "description": "https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#securitySchemeObject",
    "title": "Support for different security types",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/anything/apiKey": {
      "get": {
        "description": "\`apiKey\` auth will be supplied within an \`apiKey\` query parameter.",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "apiKey_query": [],
          },
        ],
        "summary": "Query parameter",
        "tags": [
          "API Key",
        ],
      },
      "post": {
        "description": "\`apiKey\` auth will be supplied within an \`api_key\` cookie.",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "apiKey_cookie": [],
          },
        ],
        "summary": "Cookie",
        "tags": [
          "API Key",
        ],
      },
      "put": {
        "description": "\`apiKey\` auth will be supplied within an \`X-API-KEY\` header.",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "apiKey_header": [],
          },
        ],
        "summary": "Header",
        "tags": [
          "API Key",
        ],
      },
    },
    "/anything/basic": {
      "post": {
        "description": "Authentication credentials will be supplied within a \`Basic\` \`Authorization\` header.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#basic-authentication-sample",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "basic": [],
          },
        ],
        "summary": "Basic",
        "tags": [
          "HTTP",
        ],
      },
    },
    "/anything/bearer": {
      "post": {
        "description": "Authentication credentials will be supplied within a \`Bearer\` \`Authorization\` header.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#basic-authentication-sample",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "bearer": [],
          },
        ],
        "summary": "Bearer",
        "tags": [
          "HTTP",
        ],
      },
      "put": {
        "description": "Authentication credentials will be supplied within a \`Bearer\` \`Authorization\` header, but its data should be controlled as a JWT.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#basic-authentication-sample

> ℹ️
> We currently do not support any special handling for this so they're handled as a standard \`Bearer\` authentication token.",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "bearer_jwt": [],
          },
        ],
        "summary": "Bearer (\`jwt\` format)",
        "tags": [
          "HTTP",
        ],
      },
    },
    "/anything/no-auth": {
      "post": {
        "description": "This operation does not have any authentication requirements.",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "summary": "No auth requirements",
        "tags": [
          "Other",
        ],
      },
    },
    "/anything/oauth2": {
      "delete": {
        "description": "> ℹ️
> We currently do not handle OAuth 2 authentication flows so if an operation has an \`oauth2\` requirement we assume that the user, or the projects JWT, has a qualified \`bearer\` token and will use that.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#fixed-fields-23",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "oauth2_password": [
              "write:things",
            ],
          },
        ],
        "summary": "General support (password flow type)",
        "tags": [
          "OAuth 2",
        ],
      },
      "get": {
        "description": "> ℹ️
> We currently do not handle OAuth 2 authentication flows so if an operation has an \`oauth2\` requirement we assume that the user, or the projects JWT, has a qualified \`bearer\` token and will use that.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#fixed-fields-23",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "oauth2_authorizationCode": [
              "write:things",
            ],
          },
        ],
        "summary": "General support (authorizationCode flow type)",
        "tags": [
          "OAuth 2",
        ],
      },
      "patch": {
        "description": "> ℹ️
> We currently do not handle OAuth 2 authentication flows so if an operation has an \`oauth2\` requirement we assume that the user, or the projects JWT, has a qualified \`bearer\` token and will use that.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#fixed-fields-23",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "oauth2_implicit": [
              "write:things",
            ],
          },
        ],
        "summary": "General support (implicit flow type)",
        "tags": [
          "OAuth 2",
        ],
      },
      "post": {
        "description": "> ℹ️
> We currently do not handle OAuth 2 authentication flows so if an operation has an \`oauth2\` requirement we assume that the user, or the projects JWT, has a qualified \`bearer\` token and will use that.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#fixed-fields-23",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "oauth2": [
              "write:things",
            ],
          },
        ],
        "summary": "General support (all flow types)",
        "tags": [
          "OAuth 2",
        ],
      },
      "put": {
        "description": "> ℹ️
> We currently do not handle OAuth 2 authentication flows so if an operation has an \`oauth2\` requirement we assume that the user, or the projects JWT, has a qualified \`bearer\` token and will use that.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#fixed-fields-23",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "oauth2_clientCredentials": [
              "write:things",
            ],
          },
        ],
        "summary": "General support (clientCredentials flow type)",
        "tags": [
          "OAuth 2",
        ],
      },
    },
    "/anything/openIdConnect": {
      "post": {
        "description": "🚧 This is not supported.",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "openIdConnect": [],
          },
        ],
        "summary": "General support",
        "tags": [
          "OpenID Connect",
        ],
      },
    },
    "/anything/optional-auth": {
      "get": {
        "description": "The \`apiKey\` query parameter auth on this operation is optional.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#security-requirement-object",
        "responses": {
          "200": {
            "description": "OK",
          },
        },
        "security": [
          {
            "apiKey_query": [],
          },
          {},
        ],
        "summary": "Optional auth",
        "tags": [
          "Other",
        ],
      },
    },
    "/status/401": {
      "post": {
        "description": "This endpoint requires an authentication header but making any request to it will forcefully return a 401 status code for invalid auth.",
        "responses": {
          "401": {
            "description": "Unauthorized",
          },
        },
        "security": [
          {
            "apiKey_header": [],
          },
        ],
        "summary": "Forced invalid authentication",
        "tags": [
          "Other",
        ],
      },
    },
  },
  "servers": [
    {
      "url": "https://httpbin.org",
    },
  ],
  "tags": [
    {
      "name": "API Key",
    },
    {
      "name": "HTTP",
    },
    {
      "name": "OAuth 2",
    },
    {
      "name": "OpenID Connect",
    },
    {
      "name": "Other",
    },
  ],
}
`;

exports[`validateOpenAPISpec > tic-tac-toe.json (file url) 1`] = `
{
  "components": {
    "parameters": {
      "columnParam": {
        "description": "Board column (horizontal coordinate)",
        "in": "path",
        "name": "column",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/coordinate",
        },
      },
      "rowParam": {
        "description": "Board row (vertical coordinate)",
        "in": "path",
        "name": "row",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/coordinate",
        },
      },
    },
    "schemas": {
      "board": {
        "items": {
          "items": {
            "$ref": "#/components/schemas/mark",
          },
          "maxItems": 3,
          "minItems": 3,
          "type": "array",
        },
        "maxItems": 3,
        "minItems": 3,
        "type": "array",
      },
      "coordinate": {
        "example": 1,
        "maximum": 3,
        "minimum": 1,
        "type": "integer",
      },
      "errorMessage": {
        "description": "A text message describing an error",
        "maxLength": 256,
        "type": "string",
      },
      "mark": {
        "description": "Possible values for a board square. \`.\` means empty square.",
        "enum": [
          ".",
          "X",
          "O",
        ],
        "example": ".",
        "type": "string",
      },
      "status": {
        "properties": {
          "board": {
            "$ref": "#/components/schemas/board",
          },
          "winner": {
            "$ref": "#/components/schemas/winner",
          },
        },
        "type": "object",
      },
      "winner": {
        "description": "Winner of the game. \`.\` means nobody has won yet.",
        "enum": [
          ".",
          "X",
          "O",
        ],
        "example": ".",
        "type": "string",
      },
    },
    "securitySchemes": {
      "app2AppOauth": {
        "flows": {
          "clientCredentials": {
            "scopes": {
              "board:read": "Read the board",
            },
            "tokenUrl": "https://learn.openapis.org/oauth/2.0/token",
          },
        },
        "type": "oauth2",
      },
      "basicHttpAuthentication": {
        "description": "Basic HTTP Authentication",
        "scheme": "Basic",
        "type": "http",
      },
      "bearerHttpAuthentication": {
        "bearerFormat": "JWT",
        "description": "Bearer token using a JWT",
        "scheme": "Bearer",
        "type": "http",
      },
      "defaultApiKey": {
        "description": "API key provided in console",
        "in": "header",
        "name": "api-key",
        "type": "apiKey",
      },
      "user2AppOauth": {
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://learn.openapis.org/oauth/2.0/auth",
            "scopes": {
              "board:read": "Read the board",
              "board:write": "Write to the board",
            },
            "tokenUrl": "https://learn.openapis.org/oauth/2.0/token",
          },
        },
        "type": "oauth2",
      },
    },
  },
  "info": {
    "description": "This API allows writing down marks on a Tic Tac Toe board
and requesting the state of the board or of individual squares.
",
    "title": "Tic Tac Toe",
    "version": "1.0.0",
  },
  "openapi": "3.1.0",
  "paths": {
    "/board": {
      "get": {
        "description": "Retrieves the current state of the board and the winner.",
        "operationId": "get-board",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status",
                },
              },
            },
            "description": "OK",
          },
        },
        "security": [
          {
            "defaultApiKey": [],
          },
          {
            "app2AppOauth": [
              "board:read",
            ],
          },
        ],
        "summary": "Get the whole board",
        "tags": [
          "Gameplay",
        ],
      },
    },
    "/board/{row}/{column}": {
      "get": {
        "description": "Retrieves the requested square.",
        "operationId": "get-square",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mark",
                },
              },
            },
            "description": "OK",
          },
          "400": {
            "content": {
              "text/html": {
                "example": "Illegal coordinates",
                "schema": {
                  "$ref": "#/components/schemas/errorMessage",
                },
              },
            },
            "description": "The provided parameters are incorrect",
          },
        },
        "security": [
          {
            "bearerHttpAuthentication": [],
          },
          {
            "user2AppOauth": [
              "board:read",
            ],
          },
        ],
        "summary": "Get a single board square",
        "tags": [
          "Gameplay",
        ],
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/rowParam",
        },
        {
          "$ref": "#/components/parameters/columnParam",
        },
      ],
      "put": {
        "description": "Places a mark on the board and retrieves the whole board and the winner (if any).",
        "operationId": "put-square",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/mark",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status",
                },
              },
            },
            "description": "OK",
          },
          "400": {
            "content": {
              "text/html": {
                "examples": {
                  "illegalCoordinates": {
                    "value": "Illegal coordinates.",
                  },
                  "invalidMark": {
                    "value": "Invalid Mark (X or O).",
                  },
                  "notEmpty": {
                    "value": "Square is not empty.",
                  },
                },
                "schema": {
                  "$ref": "#/components/schemas/errorMessage",
                },
              },
            },
            "description": "The provided parameters are incorrect",
          },
        },
        "security": [
          {
            "bearerHttpAuthentication": [],
          },
          {
            "user2AppOauth": [
              "board:write",
            ],
          },
        ],
        "summary": "Set a single board square",
        "tags": [
          "Gameplay",
        ],
      },
    },
  },
  "tags": [
    {
      "name": "Gameplay",
    },
  ],
}
`;

exports[`validateOpenAPISpec > tic-tac-toe.json (http url) 1`] = `
{
  "components": {
    "parameters": {
      "columnParam": {
        "description": "Board column (horizontal coordinate)",
        "in": "path",
        "name": "column",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/coordinate",
        },
      },
      "rowParam": {
        "description": "Board row (vertical coordinate)",
        "in": "path",
        "name": "row",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/coordinate",
        },
      },
    },
    "schemas": {
      "board": {
        "items": {
          "items": {
            "$ref": "#/components/schemas/mark",
          },
          "maxItems": 3,
          "minItems": 3,
          "type": "array",
        },
        "maxItems": 3,
        "minItems": 3,
        "type": "array",
      },
      "coordinate": {
        "example": 1,
        "maximum": 3,
        "minimum": 1,
        "type": "integer",
      },
      "errorMessage": {
        "description": "A text message describing an error",
        "maxLength": 256,
        "type": "string",
      },
      "mark": {
        "description": "Possible values for a board square. \`.\` means empty square.",
        "enum": [
          ".",
          "X",
          "O",
        ],
        "example": ".",
        "type": "string",
      },
      "status": {
        "properties": {
          "board": {
            "$ref": "#/components/schemas/board",
          },
          "winner": {
            "$ref": "#/components/schemas/winner",
          },
        },
        "type": "object",
      },
      "winner": {
        "description": "Winner of the game. \`.\` means nobody has won yet.",
        "enum": [
          ".",
          "X",
          "O",
        ],
        "example": ".",
        "type": "string",
      },
    },
    "securitySchemes": {
      "app2AppOauth": {
        "flows": {
          "clientCredentials": {
            "scopes": {
              "board:read": "Read the board",
            },
            "tokenUrl": "https://learn.openapis.org/oauth/2.0/token",
          },
        },
        "type": "oauth2",
      },
      "basicHttpAuthentication": {
        "description": "Basic HTTP Authentication",
        "scheme": "Basic",
        "type": "http",
      },
      "bearerHttpAuthentication": {
        "bearerFormat": "JWT",
        "description": "Bearer token using a JWT",
        "scheme": "Bearer",
        "type": "http",
      },
      "defaultApiKey": {
        "description": "API key provided in console",
        "in": "header",
        "name": "api-key",
        "type": "apiKey",
      },
      "user2AppOauth": {
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://learn.openapis.org/oauth/2.0/auth",
            "scopes": {
              "board:read": "Read the board",
              "board:write": "Write to the board",
            },
            "tokenUrl": "https://learn.openapis.org/oauth/2.0/token",
          },
        },
        "type": "oauth2",
      },
    },
  },
  "info": {
    "description": "This API allows writing down marks on a Tic Tac Toe board
and requesting the state of the board or of individual squares.
",
    "title": "Tic Tac Toe",
    "version": "1.0.0",
  },
  "openapi": "3.1.0",
  "paths": {
    "/board": {
      "get": {
        "description": "Retrieves the current state of the board and the winner.",
        "operationId": "get-board",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status",
                },
              },
            },
            "description": "OK",
          },
        },
        "security": [
          {
            "defaultApiKey": [],
          },
          {
            "app2AppOauth": [
              "board:read",
            ],
          },
        ],
        "summary": "Get the whole board",
        "tags": [
          "Gameplay",
        ],
      },
    },
    "/board/{row}/{column}": {
      "get": {
        "description": "Retrieves the requested square.",
        "operationId": "get-square",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mark",
                },
              },
            },
            "description": "OK",
          },
          "400": {
            "content": {
              "text/html": {
                "example": "Illegal coordinates",
                "schema": {
                  "$ref": "#/components/schemas/errorMessage",
                },
              },
            },
            "description": "The provided parameters are incorrect",
          },
        },
        "security": [
          {
            "bearerHttpAuthentication": [],
          },
          {
            "user2AppOauth": [
              "board:read",
            ],
          },
        ],
        "summary": "Get a single board square",
        "tags": [
          "Gameplay",
        ],
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/rowParam",
        },
        {
          "$ref": "#/components/parameters/columnParam",
        },
      ],
      "put": {
        "description": "Places a mark on the board and retrieves the whole board and the winner (if any).",
        "operationId": "put-square",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/mark",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status",
                },
              },
            },
            "description": "OK",
          },
          "400": {
            "content": {
              "text/html": {
                "examples": {
                  "illegalCoordinates": {
                    "value": "Illegal coordinates.",
                  },
                  "invalidMark": {
                    "value": "Invalid Mark (X or O).",
                  },
                  "notEmpty": {
                    "value": "Square is not empty.",
                  },
                },
                "schema": {
                  "$ref": "#/components/schemas/errorMessage",
                },
              },
            },
            "description": "The provided parameters are incorrect",
          },
        },
        "security": [
          {
            "bearerHttpAuthentication": [],
          },
          {
            "user2AppOauth": [
              "board:write",
            ],
          },
        ],
        "summary": "Set a single board square",
        "tags": [
          "Gameplay",
        ],
      },
    },
  },
  "tags": [
    {
      "name": "Gameplay",
    },
  ],
}
`;

exports[`validateOpenAPISpec > tic-tac-toe.json (string) 1`] = `
{
  "components": {
    "parameters": {
      "columnParam": {
        "description": "Board column (horizontal coordinate)",
        "in": "path",
        "name": "column",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/coordinate",
        },
      },
      "rowParam": {
        "description": "Board row (vertical coordinate)",
        "in": "path",
        "name": "row",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/coordinate",
        },
      },
    },
    "schemas": {
      "board": {
        "items": {
          "items": {
            "$ref": "#/components/schemas/mark",
          },
          "maxItems": 3,
          "minItems": 3,
          "type": "array",
        },
        "maxItems": 3,
        "minItems": 3,
        "type": "array",
      },
      "coordinate": {
        "example": 1,
        "maximum": 3,
        "minimum": 1,
        "type": "integer",
      },
      "errorMessage": {
        "description": "A text message describing an error",
        "maxLength": 256,
        "type": "string",
      },
      "mark": {
        "description": "Possible values for a board square. \`.\` means empty square.",
        "enum": [
          ".",
          "X",
          "O",
        ],
        "example": ".",
        "type": "string",
      },
      "status": {
        "properties": {
          "board": {
            "$ref": "#/components/schemas/board",
          },
          "winner": {
            "$ref": "#/components/schemas/winner",
          },
        },
        "type": "object",
      },
      "winner": {
        "description": "Winner of the game. \`.\` means nobody has won yet.",
        "enum": [
          ".",
          "X",
          "O",
        ],
        "example": ".",
        "type": "string",
      },
    },
    "securitySchemes": {
      "app2AppOauth": {
        "flows": {
          "clientCredentials": {
            "scopes": {
              "board:read": "Read the board",
            },
            "tokenUrl": "https://learn.openapis.org/oauth/2.0/token",
          },
        },
        "type": "oauth2",
      },
      "basicHttpAuthentication": {
        "description": "Basic HTTP Authentication",
        "scheme": "Basic",
        "type": "http",
      },
      "bearerHttpAuthentication": {
        "bearerFormat": "JWT",
        "description": "Bearer token using a JWT",
        "scheme": "Bearer",
        "type": "http",
      },
      "defaultApiKey": {
        "description": "API key provided in console",
        "in": "header",
        "name": "api-key",
        "type": "apiKey",
      },
      "user2AppOauth": {
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://learn.openapis.org/oauth/2.0/auth",
            "scopes": {
              "board:read": "Read the board",
              "board:write": "Write to the board",
            },
            "tokenUrl": "https://learn.openapis.org/oauth/2.0/token",
          },
        },
        "type": "oauth2",
      },
    },
  },
  "info": {
    "description": "This API allows writing down marks on a Tic Tac Toe board
and requesting the state of the board or of individual squares.
",
    "title": "Tic Tac Toe",
    "version": "1.0.0",
  },
  "openapi": "3.1.0",
  "paths": {
    "/board": {
      "get": {
        "description": "Retrieves the current state of the board and the winner.",
        "operationId": "get-board",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status",
                },
              },
            },
            "description": "OK",
          },
        },
        "security": [
          {
            "defaultApiKey": [],
          },
          {
            "app2AppOauth": [
              "board:read",
            ],
          },
        ],
        "summary": "Get the whole board",
        "tags": [
          "Gameplay",
        ],
      },
    },
    "/board/{row}/{column}": {
      "get": {
        "description": "Retrieves the requested square.",
        "operationId": "get-square",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mark",
                },
              },
            },
            "description": "OK",
          },
          "400": {
            "content": {
              "text/html": {
                "example": "Illegal coordinates",
                "schema": {
                  "$ref": "#/components/schemas/errorMessage",
                },
              },
            },
            "description": "The provided parameters are incorrect",
          },
        },
        "security": [
          {
            "bearerHttpAuthentication": [],
          },
          {
            "user2AppOauth": [
              "board:read",
            ],
          },
        ],
        "summary": "Get a single board square",
        "tags": [
          "Gameplay",
        ],
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/rowParam",
        },
        {
          "$ref": "#/components/parameters/columnParam",
        },
      ],
      "put": {
        "description": "Places a mark on the board and retrieves the whole board and the winner (if any).",
        "operationId": "put-square",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/mark",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status",
                },
              },
            },
            "description": "OK",
          },
          "400": {
            "content": {
              "text/html": {
                "examples": {
                  "illegalCoordinates": {
                    "value": "Illegal coordinates.",
                  },
                  "invalidMark": {
                    "value": "Invalid Mark (X or O).",
                  },
                  "notEmpty": {
                    "value": "Square is not empty.",
                  },
                },
                "schema": {
                  "$ref": "#/components/schemas/errorMessage",
                },
              },
            },
            "description": "The provided parameters are incorrect",
          },
        },
        "security": [
          {
            "bearerHttpAuthentication": [],
          },
          {
            "user2AppOauth": [
              "board:write",
            ],
          },
        ],
        "summary": "Set a single board square",
        "tags": [
          "Gameplay",
        ],
      },
    },
  },
  "tags": [
    {
      "name": "Gameplay",
    },
  ],
}
`;
