
// TODO: Currently unused after forking @fisch0920/drizzle-zod.
export function makeNullablePropsOptional<Schema extends z.AnyZodObject>(
  schema: Schema
): z.ZodObject<{
  [key in keyof Schema['shape']]: Schema['shape'][key] extends z.ZodNullable<
    infer T
  >
    ? z.ZodOptional<T>
    : Schema['shape'][key]
}> {
  const entries = Object.entries(schema.shape)
  const newProps: any = {}

  for (const [key, value] of entries) {
    newProps[key] =
      value instanceof z.ZodNullable ? value.unwrap().optional() : value
    return newProps
  }

  return z.object(newProps) as any
}

export type ColumnType =
  // string
  | 'text'
  | 'varchar'
  | 'timestamp'
  | 'stripeId'
  | 'projectId'
  | 'deploymentId'
  | 'cuid'
  // boolean
  | 'boolean'
  // number
  | 'integer'
  | 'smallint'
  | 'bigint'
  // json
  | 'json'
  | 'jsonb'

export type ColumnTypeToTSType<T extends ColumnType> = T extends
  | 'text'
  | 'varchar'
  | 'timestamp'
  | 'cuid'
  | 'stripeId'
  | 'projectId'
  | 'deploymentId'
  ? string
  : T extends 'boolean'
    ? boolean
    : T extends 'integer' | 'smallint' | 'bigint'
      ? number
      : never

/**
 * @see https://github.com/drizzle-team/@fisch0920/drizzle-orm/issues/2745
 */
function optional<
  T extends ColumnType,
  InferredType extends
    | string
    | boolean
    | number
    | object = ColumnTypeToTSType<T>
>(dataType: T) {
  return customType<{
    data: InferredType | undefined
    driverData: InferredType | null
    config: T extends 'stripeId'
      ? {
          length: number
        }
      : never
  }>({
    dataType() {
      if (dataType === 'stripeId') {
        return 'varchar({ length: 255 })'
      }

      if (dataType === 'cuid') {
        return 'varchar({ length: 24 })'
      }

      if (dataType === 'projectId') {
        return 'varchar({ length: 130 })'
      }

      if (dataType === 'deploymentId') {
        return 'varchar({ length: 160 })'
      }

      if (dataType === 'timestamp') {
        return 'timestamp({ mode: "string" })'
      }

      return dataType
    },
    fromDriver: (v) => v ?? undefined,
    toDriver: (v) => v ?? null
  })
}

export const optionalText = optional('text')
export const optionalTimestamp = optional('timestamp')
export const optionalBoolean = optional('boolean')
export const optionalVarchar = optional('varchar')
export const optionalCuid = optional('cuid')
export const optionalStripeId = optional('stripeId')
export const optionalProjectId = optional('projectId')
export const optionalDeploymentId = optional('deploymentId')
